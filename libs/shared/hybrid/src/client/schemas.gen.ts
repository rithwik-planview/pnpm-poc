// This file is auto-generated by @hey-api/openapi-ts

export const EntitiesResponseSchema = {
    type: 'object',
    required: ['entities', 'limit', 'offset', 'hasMore', 'grandTotal'],
    properties: {
        entities: {
            type: 'array',
            items: {
                $ref: '#/definitions/EntityModel',
            },
        },
        limit: {
            type: 'integer',
            format: 'int64',
        },
        offset: {
            type: 'integer',
            format: 'int64',
        },
        hasMore: {
            type: 'boolean',
        },
        grandTotal: {
            type: 'integer',
            format: 'int32',
        },
    },
} as const;

export const EntityModelSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
        },
        internalId: {
            type: 'string',
        },
        entityTypeApiName: {
            type: 'string',
        },
        relationLinkId: {
            type: 'string',
        },
        permissions: {
            $ref: '#/definitions/Permissions',
        },
        extensionData: {
            type: 'object',
            additionalProperties: {},
        },
    },
} as const;

export const PermissionsSchema = {
    type: 'object',
    required: ['objectPermissions', 'fieldPermissions'],
    properties: {
        objectPermissions: {
            type: 'array',
            items: {
                $ref: '#/definitions/ObjectPermissionType',
            },
        },
        fieldPermissions: {
            type: 'array',
            items: {
                $ref: '#/definitions/FieldPermissions',
            },
        },
    },
} as const;

export const ObjectPermissionTypeSchema = {
    type: 'string',
    description: '',
    'x-enumNames': ['Delete', 'Update'],
    enum: ['Delete', 'Update'],
} as const;

export const FieldPermissionsSchema = {
    type: 'object',
    required: ['fieldName', 'permissions'],
    properties: {
        fieldName: {
            type: 'string',
            minLength: 1,
        },
        permissions: {
            $ref: '#/definitions/FieldPermissionsType',
        },
    },
} as const;

export const FieldPermissionsTypeSchema = {
    type: 'string',
    description: '',
    'x-enumNames': ['Read', 'ReadWrite', 'None'],
    enum: ['Read', 'ReadWrite', 'None'],
} as const;

export const EntitiesRequestSchema = {
    type: 'object',
    required: [
        'fields',
        'relations',
        'dataFilters',
        'limit',
        'offset',
        'sortStrategy',
        'excludePermissions',
    ],
    properties: {
        fields: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
        relations: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
        dataFilters: {
            type: 'array',
            items: {
                $ref: '#/definitions/FilterRequest',
            },
        },
        limit: {
            type: 'integer',
            format: 'int32',
        },
        offset: {
            type: 'integer',
            format: 'int32',
        },
        sortBy: {
            type: 'string',
        },
        sortStrategy: {
            $ref: '#/definitions/EntitySortStrategy',
        },
        excludePermissions: {
            type: 'boolean',
        },
    },
} as const;

export const FilterRequestSchema = {
    type: 'object',
    required: ['field', 'operator', 'filterValueType', 'values'],
    properties: {
        field: {
            $ref: '#/definitions/FilterField',
        },
        operator: {
            $ref: '#/definitions/OperatorId',
        },
        filterValueType: {
            $ref: '#/definitions/FilterValueItemType',
        },
        values: {
            type: 'array',
            items: {
                $ref: '#/definitions/BaseFilterValue',
            },
        },
    },
} as const;

export const FilterFieldSchema = {
    type: 'object',
    required: ['entityType', 'fieldName'],
    properties: {
        entityType: {
            type: 'string',
        },
        fieldName: {
            type: 'string',
        },
    },
} as const;

export const OperatorIdSchema = {
    type: 'string',
    description: '',
    'x-enumNames': [
        'None',
        'Equals',
        'NotEqual',
        'In',
        'NotIn',
        'GreaterThan',
        'LessThan',
        'Before',
        'After',
        'BeginsWith',
        'EndsWith',
        'TextualContains',
        'Between',
        'Contains',
        'DoesNotContain',
        'NotBetween',
        'GreaterOrEqual',
        'LessOrEqual',
        'Match',
        'AfterOrEqualsOf',
        'BeforeOrEqualsOf',
        'Blanks',
        'MatchesCurrency',
        'NotMatchedCurrency',
        'IsUnassignedOrEquals',
        'NonBlanks',
        'Is',
        'IsNot',
        'InTheFollowing',
        'DuringThePrevious',
        'PreviousDay',
        'Today',
        'NextDay',
        'LastWeek',
        'ThisWeek',
        'NextWeek',
        'LastMonth',
        'ThisMonth',
        'NextMonth',
        'LastQuarter',
        'ThisQuarter',
        'NextQuarter',
        'LastYear',
        'ThisYear',
        'NextYear',
        'Me',
        'MyManager',
        'MyDirectReports',
        'EqualsMulti',
        'NotEqualsMulti',
    ],
    enum: [
        'None',
        'Equals',
        'NotEqual',
        'In',
        'NotIn',
        'GreaterThan',
        'LessThan',
        'Before',
        'After',
        'BeginsWith',
        'EndsWith',
        'TextualContains',
        'Between',
        'Contains',
        'DoesNotContain',
        'NotBetween',
        'GreaterOrEqual',
        'LessOrEqual',
        'Match',
        'AfterOrEqualsOf',
        'BeforeOrEqualsOf',
        'Blanks',
        'MatchesCurrency',
        'NotMatchedCurrency',
        'IsUnassignedOrEquals',
        'NonBlanks',
        'Is',
        'IsNot',
        'InTheFollowing',
        'DuringThePrevious',
        'PreviousDay',
        'Today',
        'NextDay',
        'LastWeek',
        'ThisWeek',
        'NextWeek',
        'LastMonth',
        'ThisMonth',
        'NextMonth',
        'LastQuarter',
        'ThisQuarter',
        'NextQuarter',
        'LastYear',
        'ThisYear',
        'NextYear',
        'Me',
        'MyManager',
        'MyDirectReports',
        'EqualsMulti',
        'NotEqualsMulti',
    ],
} as const;

export const FilterValueItemTypeSchema = {
    type: 'string',
    description: '',
    'x-enumNames': [
        'None',
        'Numeric',
        'NumericWithUnit',
        'PickList',
        'Date',
        'ReferenceToObject',
        'Checkbox',
        'Text',
        'TextArea',
        'RelativeDate',
        'ContextualDate',
    ],
    enum: [
        'None',
        'Numeric',
        'NumericWithUnit',
        'PickList',
        'Date',
        'ReferenceToObject',
        'Checkbox',
        'Text',
        'TextArea',
        'RelativeDate',
        'ContextualDate',
    ],
} as const;

export const BaseFilterValueSchema = {
    type: 'object',
} as const;

export const CheckboxFilterValueSchema = {
    type: 'object',
    required: ['value'],
    properties: {
        value: {
            type: 'boolean',
        },
    },
} as const;

export const ContextualDateFilterValueSchema = {
    type: 'object',
    required: ['value'],
    properties: {
        value: {
            $ref: '#/definitions/ContextualDate',
        },
    },
} as const;

export const ContextualDateSchema = {
    type: 'string',
    description: '',
    'x-enumNames': [
        'Today',
        'ThisWeek',
        'NextWeek',
        'ThisMonth',
        'NextMonth',
        'ThisQuarter',
        'NextQuarter',
        'ThisYear',
        'NextYear',
    ],
    enum: [
        'Today',
        'ThisWeek',
        'NextWeek',
        'ThisMonth',
        'NextMonth',
        'ThisQuarter',
        'NextQuarter',
        'ThisYear',
        'NextYear',
    ],
} as const;

export const DateFilterValueSchema = {
    type: 'object',
    required: ['value'],
    properties: {
        value: {
            type: 'string',
            format: 'date-time',
        },
    },
} as const;

export const NumericFilterValueSchema = {
    type: 'object',
    required: ['value'],
    properties: {
        value: {
            type: 'number',
            format: 'double',
        },
    },
} as const;

export const NumericWithUnitFilterValueSchema = {
    type: 'object',
    required: ['value'],
    properties: {
        value: {
            $ref: '#/definitions/AmountAndUnit',
        },
    },
} as const;

export const AmountAndUnitSchema = {
    type: 'object',
    required: ['amount', 'unit'],
    properties: {
        amount: {
            type: 'number',
            format: 'double',
        },
        unit: {
            type: 'string',
        },
    },
} as const;

export const PickListFilterValueSchema = {
    type: 'object',
    required: ['value'],
    properties: {
        value: {
            type: 'string',
        },
    },
} as const;

export const ReferenceToObjectFilterValueSchema = {
    type: 'object',
    required: ['value'],
    properties: {
        value: {
            type: 'string',
        },
    },
} as const;

export const RelativeDateFilterValueSchema = {
    type: 'object',
    required: ['value'],
    properties: {
        value: {
            $ref: '#/definitions/RelativeDateValue',
        },
    },
} as const;

export const RelativeDateValueSchema = {
    type: 'object',
    required: ['dateUnit', 'amount'],
    properties: {
        dateUnit: {
            $ref: '#/definitions/RelativeDateUnit',
        },
        amount: {
            type: 'integer',
            format: 'int32',
        },
    },
} as const;

export const RelativeDateUnitSchema = {
    type: 'string',
    description: '',
    'x-enumNames': ['Days', 'Weeks', 'Months', 'Quarters', 'Years'],
    enum: ['Days', 'Weeks', 'Months', 'Quarters', 'Years'],
} as const;

export const TextFilterValueSchema = {
    type: 'object',
    required: ['value'],
    properties: {
        value: {
            type: 'string',
        },
    },
} as const;

export const EntitySortStrategySchema = {
    type: 'string',
    description: '',
    'x-enumNames': ['Asc', 'Desc'],
    enum: ['Asc', 'Desc'],
} as const;

export const GroupedEntitiesResponseSchema = {
    type: 'object',
    required: ['grandTotal', 'groupedEntities'],
    properties: {
        grandTotal: {
            type: 'integer',
            format: 'int32',
        },
        groupedEntities: {
            type: 'array',
            items: {
                $ref: '#/definitions/GroupedEntityListOfEntityModel',
            },
        },
    },
} as const;

export const GroupedEntityListOfEntityModelSchema = {
    type: 'object',
    required: ['entities', 'limit', 'offset', 'hasMore', 'groupName', 'totalRecords'],
    properties: {
        entities: {
            type: 'array',
            items: {
                $ref: '#/definitions/EntityModel',
            },
        },
        limit: {
            type: 'integer',
            format: 'int64',
        },
        offset: {
            type: 'integer',
            format: 'int64',
        },
        hasMore: {
            type: 'boolean',
        },
        groupName: {
            type: 'string',
            minLength: 1,
        },
        totalRecords: {
            type: 'integer',
            format: 'int64',
        },
    },
} as const;

export const GroupedEntitiesRequestSchema = {
    type: 'object',
    required: [
        'fields',
        'relations',
        'dataFilters',
        'limit',
        'offset',
        'sortStrategy',
        'excludePermissions',
        'groupBy',
    ],
    properties: {
        fields: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
        relations: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
        dataFilters: {
            type: 'array',
            items: {
                $ref: '#/definitions/FilterRequest',
            },
        },
        limit: {
            type: 'integer',
            format: 'int32',
        },
        offset: {
            type: 'integer',
            format: 'int32',
        },
        sortBy: {
            type: 'string',
        },
        sortStrategy: {
            $ref: '#/definitions/EntitySortStrategy',
        },
        excludePermissions: {
            type: 'boolean',
        },
        groupBy: {
            type: 'string',
            minLength: 1,
        },
        groupName: {
            type: 'string',
        },
    },
} as const;

export const EntityDetailsResponseSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
        },
        internalId: {
            type: 'string',
        },
        entityTypeApiName: {
            type: 'string',
        },
        permissions: {
            $ref: '#/definitions/Permissions',
        },
        extensionData: {
            type: 'object',
            additionalProperties: {},
        },
    },
} as const;

export const EntityDetailsRequestSchema = {
    type: 'object',
    required: ['fields', 'relations', 'excludePermissions'],
    properties: {
        fields: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
        relations: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
        excludePermissions: {
            type: 'boolean',
        },
    },
} as const;

export const EntitiesByIdsRequestSchema = {
    type: 'object',
    required: [
        'fields',
        'relations',
        'dataFilters',
        'limit',
        'offset',
        'sortStrategy',
        'excludePermissions',
        'ids',
    ],
    properties: {
        fields: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
        relations: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
        dataFilters: {
            type: 'array',
            items: {
                $ref: '#/definitions/FilterRequest',
            },
        },
        limit: {
            type: 'integer',
            format: 'int32',
        },
        offset: {
            type: 'integer',
            format: 'int32',
        },
        sortBy: {
            type: 'string',
        },
        sortStrategy: {
            $ref: '#/definitions/EntitySortStrategy',
        },
        excludePermissions: {
            type: 'boolean',
        },
        ids: {
            type: 'array',
            minItems: 1,
            items: {
                type: 'string',
            },
        },
    },
} as const;

export const CountResponseSchema = {
    type: 'object',
    required: ['totalCount'],
    properties: {
        totalCount: {
            type: 'integer',
            format: 'int32',
        },
    },
} as const;

export const CountRequestSchema = {
    type: 'object',
    required: ['dataFilters'],
    properties: {
        dataFilters: {
            type: 'array',
            items: {
                $ref: '#/definitions/FilterRequest',
            },
        },
    },
} as const;

export const RelatedEntitiesRequestSchema = {
    type: 'object',
    required: [
        'fields',
        'relations',
        'dataFilters',
        'limit',
        'offset',
        'sortStrategy',
        'excludePermissions',
    ],
    properties: {
        fields: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
        relations: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
        dataFilters: {
            type: 'array',
            items: {
                $ref: '#/definitions/FilterRequest',
            },
        },
        limit: {
            type: 'integer',
            format: 'int32',
        },
        offset: {
            type: 'integer',
            format: 'int32',
        },
        sortBy: {
            type: 'string',
        },
        sortStrategy: {
            $ref: '#/definitions/EntitySortStrategy',
        },
        excludePermissions: {
            type: 'boolean',
        },
    },
} as const;

export const GroupedRelationsRequestSchema = {
    type: 'object',
    required: [
        'fields',
        'relations',
        'dataFilters',
        'limit',
        'offset',
        'sortStrategy',
        'excludePermissions',
        'groupBy',
    ],
    properties: {
        fields: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
        relations: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
        dataFilters: {
            type: 'array',
            items: {
                $ref: '#/definitions/FilterRequest',
            },
        },
        limit: {
            type: 'integer',
            format: 'int32',
        },
        offset: {
            type: 'integer',
            format: 'int32',
        },
        sortBy: {
            type: 'string',
        },
        sortStrategy: {
            $ref: '#/definitions/EntitySortStrategy',
        },
        excludePermissions: {
            type: 'boolean',
        },
        groupBy: {
            type: 'string',
            minLength: 1,
        },
        groupName: {
            type: 'string',
        },
    },
} as const;

export const AvatarsResponseSchema = {
    type: 'object',
    required: ['resourceEntities'],
    properties: {
        resourceEntities: {
            type: 'array',
            items: {
                $ref: '#/definitions/ResourceEntity',
            },
        },
    },
} as const;

export const ResourceEntitySchema = {
    type: 'object',
    properties: {
        internalId: {
            type: 'string',
        },
        entityTypeApiName: {
            type: 'string',
        },
        email: {
            type: 'string',
        },
        id: {
            type: 'string',
        },
        description: {
            type: 'string',
        },
        name: {
            type: 'string',
        },
        entityType: {
            type: 'string',
        },
        imageUrl: {
            type: 'string',
        },
        state: {},
    },
} as const;

export const AvatarsRequestSchema = {
    type: 'object',
    properties: {
        fieldName: {
            type: 'string',
        },
        relation: {
            $ref: '#/definitions/Relation',
        },
        dataFilters: {
            type: 'array',
            items: {
                $ref: '#/definitions/FilterRequest',
            },
        },
    },
} as const;

export const RelationSchema = {
    type: 'object',
    required: ['name'],
    properties: {
        name: {
            type: 'string',
        },
        filteredEntityType: {
            type: 'string',
        },
    },
} as const;

export const PicklistDataSchema = {
    type: 'object',
    properties: {
        propertyName: {
            type: 'string',
        },
        dependsOnPicklist: {
            type: 'string',
        },
        options: {
            type: 'array',
            items: {
                $ref: '#/definitions/PicklistOptionData',
            },
        },
    },
} as const;

export const PicklistOptionDataSchema = {
    type: 'object',
    required: ['internalId'],
    properties: {
        internalId: {
            type: 'string',
        },
        value: {
            type: 'string',
        },
        displayName: {
            type: 'string',
        },
        description: {
            type: 'string',
        },
        color: {
            type: 'string',
        },
        imageUrl: {
            type: 'string',
        },
    },
} as const;

export const ProblemDetailsSchema = {
    type: 'object',
    additionalProperties: {},
    required: ['extensions'],
    properties: {
        type: {
            type: 'string',
        },
        title: {
            type: 'string',
        },
        status: {
            type: 'integer',
            format: 'int32',
        },
        detail: {
            type: 'string',
        },
        instance: {
            type: 'string',
        },
        extensions: {
            type: 'object',
            additionalProperties: {},
        },
    },
} as const;

export const SwimlaneResponseSchema = {
    type: 'object',
    required: ['grandTotal', 'swimlanes', 'groupedEntitiesCount'],
    properties: {
        grandTotal: {
            type: 'integer',
            format: 'int32',
        },
        swimlanes: {
            type: 'array',
            items: {
                $ref: '#/definitions/SwimlaneData',
            },
        },
        groupedEntitiesCount: {
            type: 'array',
            items: {
                $ref: '#/definitions/SwimlaneGroupedEntitiesCount',
            },
        },
    },
} as const;

export const SwimlaneDataSchema = {
    type: 'object',
    properties: {
        swimlaneValue: {
            $ref: '#/definitions/ResourceEntity',
        },
    },
} as const;

export const SwimlaneGroupedEntitiesCountSchema = {
    type: 'object',
    required: ['groupName', 'totalRecords'],
    properties: {
        groupName: {
            type: 'string',
        },
        totalRecords: {
            type: 'integer',
            format: 'int64',
        },
    },
} as const;

export const CustomPanelSchema = {
    type: 'object',
    required: ['id', 'apiName', 'name', 'description', 'isUrl', 'url', 'order'],
    properties: {
        id: {
            type: 'string',
        },
        apiName: {
            type: 'string',
        },
        name: {
            type: 'string',
        },
        description: {
            type: 'string',
        },
        isUrl: {
            type: 'boolean',
        },
        url: {
            type: 'string',
        },
        order: {
            type: 'integer',
            format: 'int32',
        },
    },
} as const;

export const MetadataRequestSchema = {
    type: 'object',
    required: ['entityType', 'propertyNames'],
    properties: {
        entityType: {
            type: 'string',
            minLength: 1,
        },
        propertyNames: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
    },
} as const;

export const FieldsResponseSchema = {
    type: 'object',
    required: [
        'isCalculated',
        'isCreateOnly',
        'isCustom',
        'isFilterable',
        'isManuallySet',
        'isNullable',
        'isSortable',
        'isUpdateable',
        'isVisible',
        'isFinancial',
        'isSpecialCustomRelation',
    ],
    properties: {
        name: {
            type: 'string',
        },
        type: {
            type: 'string',
        },
        label: {
            type: 'string',
        },
        description: {
            type: 'string',
        },
        tooltip: {
            type: 'string',
        },
        presentationType: {
            type: 'string',
        },
        manuallySetFieldName: {
            type: 'string',
        },
        isCalculated: {
            type: 'boolean',
        },
        isCreateOnly: {
            type: 'boolean',
        },
        isCustom: {
            type: 'boolean',
        },
        isFilterable: {
            type: 'boolean',
        },
        isManuallySet: {
            type: 'boolean',
        },
        isNullable: {
            type: 'boolean',
        },
        isSortable: {
            type: 'boolean',
        },
        isUpdateable: {
            type: 'boolean',
        },
        isVisible: {
            type: 'boolean',
        },
        isFinancial: {
            type: 'boolean',
        },
        decimalPlaces: {
            type: 'integer',
            format: 'int32',
        },
        referenceTypes: {
            type: 'array',
            items: {
                $ref: '#/definitions/ReferenceType',
            },
        },
        isSpecialCustomRelation: {
            type: 'boolean',
        },
    },
} as const;

export const ReferenceTypeSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
        },
        displayField: {
            type: 'string',
        },
    },
} as const;

export const MetadataEntitiesRequestSchema = {
    type: 'object',
    required: ['entityType', 'propertyNames', 'relationNames', 'includeFields', 'includeRelations'],
    properties: {
        entityType: {
            type: 'string',
            minLength: 1,
        },
        propertyNames: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
        relationNames: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
        includeFields: {
            type: 'boolean',
        },
        includeRelations: {
            type: 'boolean',
        },
    },
} as const;

export const SystemSettingsResponseSchema = {
    type: 'object',
    properties: {
        numericFormat: {
            type: 'string',
        },
        shortDateFormat: {
            type: 'string',
        },
        showEffortRelatedTimeInHours: {
            type: 'boolean',
        },
        onlyAdminsCanCreateGridViews: {
            type: 'boolean',
        },
        enableSupportOfMultiCurrency: {
            type: 'boolean',
        },
    },
} as const;

export const OrganizationSettingsResponseSchema = {
    type: 'object',
    required: ['currencies'],
    properties: {
        currencies: {
            $ref: '#/definitions/CurrenciesData',
        },
        entityTypeFilterValues: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    type: 'string',
                },
            },
        },
        entityTypes: {
            type: 'object',
            additionalProperties: {
                $ref: '#/definitions/EntityTypeDetails',
            },
        },
    },
} as const;

export const CurrenciesDataSchema = {
    type: 'object',
    required: ['baseCurrency', 'managedCurrencies'],
    properties: {
        baseCurrency: {
            $ref: '#/definitions/NameAndValue',
        },
        managedCurrencies: {
            type: 'array',
            items: {
                $ref: '#/definitions/NameAndValue',
            },
        },
    },
} as const;

export const NameAndValueSchema = {
    type: 'object',
    required: ['name', 'value'],
    properties: {
        name: {
            type: 'string',
        },
        value: {
            type: 'string',
        },
    },
} as const;

export const EntityTypeDetailsSchema = {
    type: 'object',
    properties: {
        label: {
            type: 'string',
        },
    },
} as const;

export const DescribeEntitiesResponseSchema = {
    type: 'object',
    properties: {
        entityDescriptions: {
            type: 'array',
            items: {
                $ref: '#/definitions/EntityDescriptionResponse',
            },
        },
    },
} as const;

export const EntityDescriptionResponseSchema = {
    type: 'object',
    required: ['disabled'],
    properties: {
        typeName: {
            type: 'string',
        },
        fields: {
            type: 'array',
            items: {
                $ref: '#/definitions/FieldsResponse',
            },
        },
        validStates: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
        label: {
            type: 'string',
        },
        labelPlural: {
            type: 'string',
        },
        parentEntity: {
            type: 'string',
        },
        displayField: {
            type: 'string',
        },
        disabled: {
            type: 'boolean',
        },
    },
} as const;

export const DescribeEntitiesRequestSchema = {
    type: 'object',
    required: ['entityType'],
    properties: {
        entityType: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
    },
} as const;

export const AvailableFieldsRequestSchema = {
    type: 'object',
    required: ['entityType', 'includeRelations'],
    properties: {
        entityType: {
            type: 'string',
            minLength: 1,
        },
        includeRelations: {
            type: 'boolean',
        },
    },
} as const;

export const RelationFieldsResponseSchema = {
    type: 'object',
    required: ['entityType', 'fields'],
    properties: {
        entityType: {
            type: 'string',
        },
        fields: {
            type: 'array',
            items: {
                $ref: '#/definitions/FieldsResponse',
            },
        },
    },
} as const;

export const RelationFieldsRequestSchema = {
    type: 'object',
    required: ['entityType', 'relationName'],
    properties: {
        entityType: {
            type: 'string',
        },
        relationName: {
            type: 'string',
        },
    },
} as const;

export const PropertyCardLayoutResponseSchema = {
    type: 'object',
    required: ['dimension'],
    properties: {
        dimension: {
            type: 'integer',
            format: 'int32',
        },
        sections: {
            type: 'array',
            items: {
                $ref: '#/definitions/Section',
            },
        },
    },
} as const;

export const SectionSchema = {
    type: 'object',
    required: ['showPath', 'order'],
    properties: {
        type: {
            type: 'string',
        },
        id: {
            type: 'string',
        },
        name: {
            type: 'string',
        },
        titleType: {
            type: 'string',
        },
        objectFieldName: {
            type: 'string',
        },
        access: {
            type: 'string',
        },
        showPath: {
            type: 'boolean',
        },
        fields: {
            type: 'array',
            items: {
                $ref: '#/definitions/LayoutSectionField',
            },
        },
        order: {
            type: 'integer',
            format: 'int32',
        },
    },
} as const;

export const LayoutSectionFieldSchema = {
    type: 'object',
    properties: {
        column: {
            type: 'integer',
            format: 'int32',
        },
        row: {
            type: 'integer',
            format: 'int32',
        },
        wholeRow: {
            type: 'boolean',
        },
        locations: {
            type: 'string',
        },
        name: {
            type: 'string',
        },
        type: {
            type: 'string',
        },
        presentationType: {
            type: 'string',
        },
        label: {
            type: 'string',
        },
        isSortable: {
            type: 'boolean',
        },
        isFilterable: {
            type: 'boolean',
        },
        isNullable: {
            type: 'boolean',
        },
        isUpdateable: {
            type: 'boolean',
        },
        isCustom: {
            type: 'boolean',
        },
        isCreateOnly: {
            type: 'boolean',
        },
        isVisible: {
            type: 'boolean',
        },
        isCalculated: {
            type: 'boolean',
        },
        referenceTypes: {
            type: 'array',
            items: {
                $ref: '#/definitions/ReferenceType',
            },
        },
    },
} as const;

export const ProfilesResponseSchema = {
    type: 'object',
    required: ['profiles'],
    properties: {
        profiles: {
            type: 'array',
            items: {
                $ref: '#/definitions/Profile',
            },
        },
    },
} as const;

export const ProfileSchema = {
    type: 'object',
    properties: {
        internalId: {
            type: 'string',
        },
        entityTypeApiName: {
            type: 'string',
        },
        externalId: {
            type: 'string',
        },
        name: {
            type: 'string',
        },
        description: {
            type: 'string',
        },
        imageUrl: {
            type: 'string',
        },
        type: {
            type: 'string',
        },
    },
} as const;

export const AuthorizationGroupsResponseSchema = {
    type: 'object',
    required: ['authorizationGroups'],
    properties: {
        authorizationGroups: {
            type: 'array',
            items: {
                $ref: '#/definitions/AuthorizationGroup',
            },
        },
    },
} as const;

export const AuthorizationGroupSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
        },
        name: {
            type: 'string',
        },
        entityTypeApiName: {
            type: 'string',
        },
        description: {
            type: 'string',
        },
        email: {
            type: 'string',
        },
        imageUrl: {
            type: 'string',
        },
        type: {
            type: 'string',
        },
    },
} as const;

export const RibbonActionsResponseSchema = {
    type: 'object',
    properties: {
        actions: {
            type: 'array',
            items: {
                $ref: '#/definitions/IRibbonActionItem',
            },
        },
    },
} as const;

export const IRibbonActionItemSchema = {
    type: 'object',
    required: ['enabled'],
    properties: {
        id: {
            type: 'string',
        },
        name: {
            type: 'string',
        },
        enabled: {
            type: 'boolean',
        },
        childActions: {
            type: 'array',
            items: {
                $ref: '#/definitions/IRibbonActionItem',
            },
        },
    },
} as const;

export const RibbonActionsRequestSchema = {
    type: 'object',
    required: ['ids', 'ribbonType', 'entityType'],
    properties: {
        ids: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
        ribbonType: {
            type: 'string',
        },
        entityType: {
            type: 'string',
        },
        mainEntityId: {
            type: 'string',
        },
        parentEntityId: {
            type: 'string',
        },
        queryName: {
            type: 'string',
        },
        relationName: {
            type: 'string',
        },
    },
} as const;

export const ContextMenusResponseSchema = {
    type: 'object',
    required: ['menus'],
    properties: {
        menus: {
            type: 'array',
            items: {
                $ref: '#/definitions/ContextMenu',
            },
        },
    },
} as const;

export const ContextMenuSchema = {
    type: 'object',
    required: ['id', 'name', 'enabled'],
    properties: {
        id: {
            type: 'string',
        },
        name: {
            type: 'string',
        },
        enabled: {
            type: 'boolean',
        },
        subMenus: {
            type: 'array',
            items: {
                $ref: '#/definitions/ContextMenu',
            },
        },
        additionalData: {
            type: 'boolean',
        },
    },
} as const;

export const ContextMenusRequestSchema = {
    type: 'object',
    required: ['selectedRelatedEntityId', 'mainEntityId', 'relationName'],
    properties: {
        selectedLinkId: {
            type: 'string',
        },
        selectedRelatedEntityId: {
            type: 'string',
            minLength: 1,
        },
        mainEntityId: {
            type: 'string',
            minLength: 1,
        },
        relationName: {
            type: 'string',
            minLength: 1,
        },
    },
} as const;

export const DataWarehouseCountRequestSchema = {
    type: 'object',
    required: ['rightBound'],
    properties: {
        leftBound: {
            type: 'string',
            format: 'date-time',
        },
        rightBound: {
            type: 'string',
            format: 'date-time',
        },
    },
} as const;

export const DataWarehouseEntitiesByIdsResponseSchema = {
    type: 'object',
    properties: {
        entities: {
            type: 'array',
            items: {
                type: 'object',
                additionalProperties: {},
            },
        },
    },
} as const;

export const DataWarehouseEntitiesByIdsRequestSchema = {
    type: 'object',
    required: ['ids', 'fields'],
    properties: {
        ids: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
        fields: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
    },
} as const;

export const DataWarehouseGetIdsResponseSchema = {
    type: 'object',
    required: ['ids'],
    properties: {
        ids: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
    },
} as const;

export const DataWarehouseGetIdsRequestSchema = {
    type: 'object',
    required: ['rightBound'],
    properties: {
        leftBound: {
            type: 'string',
            format: 'date-time',
        },
        rightBound: {
            type: 'string',
            format: 'date-time',
        },
    },
} as const;

export const DataWarehouseEntityDetailsResponseOfBIConfigurationSchema = {
    type: 'object',
    required: ['entities'],
    properties: {
        entities: {
            type: 'array',
            items: {
                $ref: '#/definitions/BIConfiguration',
            },
        },
    },
} as const;

export const BIConfigurationSchema = {
    type: 'object',
    properties: {
        configuration: {
            type: 'string',
        },
        id: {
            type: 'string',
        },
        running: {
            type: 'boolean',
        },
        runningPhase: {
            type: 'string',
        },
        runningEntity: {
            type: 'string',
        },
        runningPid: {
            type: 'string',
        },
        lastSyncData: {
            type: 'string',
        },
        lastSyncDate: {
            type: 'string',
        },
        accessToken: {
            type: 'string',
        },
        refreshToken: {
            type: 'string',
        },
        currentSyncDate: {
            type: 'string',
        },
        currentExportDate: {
            type: 'string',
        },
    },
} as const;

export const ConfigurationRequestSchema = {
    type: 'object',
    required: ['typeName', 'fields'],
    properties: {
        typeName: {
            type: 'string',
            minLength: 1,
        },
        fields: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
    },
} as const;

export const UpdateConfigurationRequestSchema = {
    type: 'object',
    required: ['id'],
    properties: {
        id: {
            type: 'string',
            minLength: 1,
        },
        configuration: {
            type: 'string',
        },
        running: {
            type: 'boolean',
        },
        runningPId: {
            type: 'string',
        },
    },
} as const;

export const StorageConnectionResponseSchema = {
    type: 'object',
    required: ['isSuccess'],
    properties: {
        message: {
            type: 'string',
        },
        isSuccess: {
            type: 'boolean',
        },
        error: {
            type: 'string',
        },
    },
} as const;

export const BlobConnectionRequestSchema = {
    type: 'object',
    required: ['blob_connection_string', 'blob_connection_type'],
    properties: {
        blob_connection_string: {
            type: 'string',
            minLength: 1,
        },
        blob_connection_type: {
            type: 'string',
            minLength: 1,
        },
    },
} as const;

export const VerifyConnectRequestSchema = {
    type: 'object',
    properties: {
        url: {
            type: 'string',
        },
        token: {
            type: 'string',
        },
    },
} as const;

export const GetUsersResponseSchema = {
    type: 'object',
    required: ['tenantId', 'users'],
    properties: {
        tenantId: {
            type: 'string',
        },
        users: {
            type: 'array',
            items: {
                $ref: '#/definitions/PlanviewAdminUser',
            },
        },
    },
} as const;

export const PlanviewAdminUserSchema = {
    type: 'object',
    required: ['active'],
    properties: {
        userId: {
            type: 'string',
        },
        login: {
            type: 'string',
        },
        email: {
            type: 'string',
        },
        firstName: {
            type: 'string',
        },
        lastName: {
            type: 'string',
        },
        active: {
            type: 'boolean',
        },
    },
} as const;

export const GetTenantResponseSchema = {
    type: 'object',
    required: ['region', 'supports', 'planviewIdActivated', 'isSandbox'],
    properties: {
        id: {
            type: 'string',
        },
        name: {
            type: 'string',
        },
        url: {
            type: 'string',
        },
        region: {
            $ref: '#/definitions/Region',
        },
        supports: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
        planviewIdActivated: {
            type: 'boolean',
        },
        isSandbox: {
            type: 'boolean',
        },
    },
} as const;

export const RegionSchema = {
    type: 'string',
    description: '',
    'x-enumNames': ['US', 'EU', 'AP'],
    enum: ['US', 'EU', 'AP'],
} as const;

export const RegisterTenantRequestSchema = {
    type: 'object',
    required: ['state'],
    properties: {
        state: {
            type: 'boolean',
        },
    },
} as const;

export const GetTokenResponseSchema = {
    type: 'object',
    required: ['expiresAt'],
    properties: {
        idToken: {
            type: 'string',
        },
        expiresAt: {
            type: 'string',
            format: 'date-time',
        },
    },
} as const;

export const CalculateSentimentResponseSchema = {
    type: 'object',
    required: ['objectId'],
    properties: {
        objectId: {
            type: 'string',
        },
        sentimentScore: {
            type: 'number',
            format: 'double',
        },
        sentimentStatus: {
            $ref: '#/definitions/SentimentStatus',
        },
    },
} as const;

export const SentimentStatusSchema = {
    type: 'string',
    description: '',
    'x-enumNames': ['None', 'Positive', 'Neutral', 'Negative'],
    enum: ['None', 'Positive', 'Neutral', 'Negative'],
} as const;

export const CalculateSentimentRequestSchema = {
    type: 'object',
    required: ['objectId', 'fieldNames'],
    properties: {
        objectId: {
            type: 'string',
            minLength: 1,
        },
        fieldNames: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
    },
} as const;

export const WhiteboardTokenResponseSchema = {
    type: 'object',
    required: ['idToken', 'expiresAt'],
    properties: {
        idToken: {
            type: 'string',
        },
        expiresAt: {
            type: 'string',
            format: 'date-time',
        },
    },
} as const;

export const IdentifierTypeSchema = {
    type: 'string',
    description: '',
    'x-enumNames': ['Entity'],
    enum: ['Entity'],
} as const;

export const WorkloadEntitiesResponseSchema = {
    type: 'object',
    required: ['workloadEntities', 'grandTotal', 'limit', 'offset', 'hasMore'],
    properties: {
        workloadEntities: {
            type: 'array',
            items: {
                $ref: '#/definitions/WorkloadEntity',
            },
        },
        grandTotal: {
            type: 'integer',
            format: 'int32',
        },
        limit: {
            type: 'integer',
            format: 'int64',
        },
        offset: {
            type: 'integer',
            format: 'int64',
        },
        hasMore: {
            type: 'boolean',
        },
    },
} as const;

export const WorkloadEntitySchema = {
    type: 'object',
} as const;

export const ResourceWorkloadRequestSchema = {
    type: 'object',
    required: ['dataFilters', 'workloadSettings', 'limit', 'offset', 'sourceEntity'],
    properties: {
        dataFilters: {
            type: 'array',
            items: {
                $ref: '#/definitions/FilterRequest',
            },
        },
        workloadSettings: {
            $ref: '#/definitions/WorkloadRequest',
        },
        limit: {
            type: 'integer',
            format: 'int32',
        },
        offset: {
            type: 'integer',
            format: 'int32',
        },
        sourceEntity: {
            $ref: '#/definitions/SourceEntity',
        },
    },
} as const;

export const WorkloadRequestSchema = {
    type: 'object',
    required: [
        'loadBaseType',
        'measureType',
        'slicePeriodType',
        'slicesAmount',
        'sliceStartDate',
        'aggregationTypes',
    ],
    properties: {
        loadBaseType: {
            $ref: '#/definitions/LoadBase',
        },
        measureType: {
            $ref: '#/definitions/MeasureType',
        },
        slicePeriodType: {
            $ref: '#/definitions/SlicePeriodType',
        },
        slicesAmount: {
            type: 'integer',
        },
        sliceStartDate: {
            type: 'string',
            format: 'date-time',
        },
        aggregationTypes: {
            $ref: '#/definitions/ResourceManagementAggregationTypes',
        },
    },
} as const;

export const LoadBaseSchema = {
    type: 'string',
    description: '',
    'x-enumNames': ['ProjectAssignment', 'TaskAssignment'],
    enum: ['ProjectAssignment', 'TaskAssignment'],
} as const;

export const MeasureTypeSchema = {
    type: 'string',
    description: '',
    'x-enumNames': ['Hours', 'Units', 'FTE', 'PersonDays'],
    enum: ['Hours', 'Units', 'FTE', 'PersonDays'],
} as const;

export const SlicePeriodTypeSchema = {
    type: 'string',
    description: '',
    'x-enumNames': ['Day', 'Week', 'Month', 'Quarter', 'Year'],
    enum: ['Day', 'Week', 'Month', 'Quarter', 'Year'],
} as const;

export const ResourceManagementAggregationTypesSchema = {
    type: 'string',
    description: '',
    'x-enumFlags': true,
    'x-enumNames': [
        'None',
        'RootObjectLevel',
        'ProjectLevel',
        'ProjectLevelDetailed',
        'UseCapacity',
        'UseProjectPool',
        'UseCurrentPeriodActualAndPlanned',
        'UseProjectsWithNoTaskAssignment',
    ],
    enum: [
        'None',
        'RootObjectLevel',
        'ProjectLevel',
        'ProjectLevelDetailed',
        'UseCapacity',
        'UseProjectPool',
        'UseCurrentPeriodActualAndPlanned',
        'UseProjectsWithNoTaskAssignment',
    ],
} as const;

export const SourceEntitySchema = {
    type: 'object',
    required: ['entityKeys', 'entityType'],
    properties: {
        entityKeys: {
            type: 'array',
            minItems: 1,
            items: {
                $ref: '#/definitions/EntityKey',
            },
        },
        entityType: {
            type: 'string',
        },
    },
} as const;

export const EntityKeySchema = {
    type: 'object',
    required: ['entityId'],
    properties: {
        entityId: {
            type: 'string',
        },
        businessUnitId: {
            type: 'string',
        },
    },
} as const;

export const EntityWorkloadRequestSchema = {
    type: 'object',
    required: ['dataFilters', 'workloadSettings', 'limit', 'offset', 'resourceEntityKey'],
    properties: {
        dataFilters: {
            type: 'array',
            items: {
                $ref: '#/definitions/FilterRequest',
            },
        },
        workloadSettings: {
            $ref: '#/definitions/WorkloadRequest',
        },
        limit: {
            type: 'integer',
            format: 'int32',
        },
        offset: {
            type: 'integer',
            format: 'int32',
        },
        resourceEntityKey: {
            $ref: '#/definitions/EntityKey',
        },
    },
} as const;

export const GetReportableWorkItemsResponseSchema = {
    type: 'object',
    required: ['reportableWorkItems'],
    properties: {
        reportableWorkItems: {
            type: 'array',
            items: {
                $ref: '#/definitions/ReportableWorkItem',
            },
        },
    },
} as const;

export const ReportableWorkItemSchema = {
    type: 'object',
} as const;

export const GetReportableWorkItemsRequestSchema = {
    type: 'object',
    required: ['startDate', 'dueDate', 'fields', 'excludeCrossBUResources'],
    properties: {
        startDate: {
            type: 'string',
            format: 'date-time',
        },
        dueDate: {
            type: 'string',
            format: 'date-time',
        },
        fields: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
        excludeCrossBUResources: {
            type: 'boolean',
        },
    },
} as const;

export const GetReportableTasksByIdsResponseSchema = {
    type: 'object',
    required: ['reportableTasks'],
    properties: {
        reportableTasks: {
            type: 'array',
            items: {
                $ref: '#/definitions/ReportableTask',
            },
        },
    },
} as const;

export const ReportableTaskSchema = {
    type: 'object',
} as const;

export const GetReportableTasksByIdsRequestSchema = {
    type: 'object',
    required: ['identifiers', 'fields'],
    properties: {
        identifiers: {
            type: 'array',
            minItems: 1,
            items: {
                type: 'string',
            },
        },
        fields: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
    },
} as const;

export const GetAssignmentsPerUsersResponseSchema = {
    type: 'object',
    required: ['workItems', 'assignedWork'],
    properties: {
        workItems: {
            type: 'array',
            items: {
                type: 'object',
                additionalProperties: {},
            },
        },
        assignedWork: {
            $ref: '#/definitions/AssignedWork',
        },
    },
} as const;

export const AssignedWorkSchema = {
    type: 'object',
    required: ['workByDay', 'rlTimePhaseDaily'],
    properties: {
        workByDay: {
            type: 'array',
            items: {
                $ref: '#/definitions/WorkByDayAssignment',
            },
        },
        rlTimePhaseDaily: {
            type: 'array',
            items: {
                $ref: '#/definitions/RlTimePhaseDailyAssignment',
            },
        },
    },
} as const;

export const WorkByDayAssignmentSchema = {
    type: 'object',
    required: [
        'work',
        'date',
        'durationInDaysInt',
        'workItemId',
        'resourceId',
        'id',
        'resourceLinkId',
    ],
    properties: {
        work: {
            $ref: '#/definitions/WorkUnit',
        },
        date: {
            type: 'string',
            format: 'date-time',
        },
        durationInDaysInt: {
            type: 'integer',
            format: 'int32',
        },
        workItemId: {
            type: 'string',
        },
        resourceId: {
            type: 'string',
        },
        id: {
            type: 'string',
        },
        resourceLinkId: {
            type: 'string',
        },
    },
} as const;

export const WorkUnitSchema = {
    type: 'object',
    required: ['unit', 'value'],
    properties: {
        unit: {
            type: 'string',
        },
        value: {
            type: 'number',
            format: 'double',
        },
    },
} as const;

export const RlTimePhaseDailyAssignmentSchema = {
    type: 'object',
    required: ['work', 'date', 'durationInDaysInt', 'workItemId', 'resourceId', 'ids'],
    properties: {
        work: {
            $ref: '#/definitions/WorkUnit',
        },
        date: {
            type: 'string',
            format: 'date-time',
        },
        durationInDaysInt: {
            type: 'integer',
            format: 'int32',
        },
        workItemId: {
            type: 'string',
        },
        resourceId: {
            type: 'string',
        },
        ids: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
    },
} as const;

export const GetAssignmentsPerUsersRequestSchema = {
    type: 'object',
    required: ['startDate', 'dueDate', 'resourceIds', 'fields', 'workItemType'],
    properties: {
        startDate: {
            type: 'string',
            format: 'date-time',
        },
        dueDate: {
            type: 'string',
            format: 'date-time',
        },
        resourceIds: {
            type: 'array',
            minItems: 1,
            items: {
                type: 'string',
            },
        },
        fields: {
            type: 'array',
            items: {
                type: 'string',
            },
        },
        workItemType: {
            type: 'string',
            minLength: 1,
        },
        optionalFilter: {
            $ref: '#/definitions/GetAssignmentsPerUsersRequestFilter',
        },
    },
} as const;

export const GetAssignmentsPerUsersRequestFilterSchema = {
    type: 'object',
    properties: {
        workItemIsManagedByMiddleware: {
            type: 'string',
            minLength: 1,
        },
        resourceLinkState: {
            type: 'array',
            minItems: 1,
            items: {
                type: 'string',
            },
        },
        workItemIsStaffingPlan: {
            type: 'string',
            minLength: 1,
        },
        workItemProjectIsStaffingPlan: {
            type: 'string',
            minLength: 1,
        },
    },
} as const;

export const GetUsersWorkingHoursResponseSchema = {
    type: 'object',
    required: ['usersWorkingHours', 'calendarExceptions'],
    properties: {
        usersWorkingHours: {
            type: 'array',
            items: {
                $ref: '#/definitions/UserWorkingHours',
            },
        },
        calendarExceptions: {
            type: 'array',
            items: {
                $ref: '#/definitions/UsersWorkingHoursCalendarExcept',
            },
        },
    },
} as const;

export const UserWorkingHoursSchema = {
    type: 'object',
    required: ['id', 'resourceId', 'date', 'workingHours', 'capacity'],
    properties: {
        id: {
            type: 'string',
        },
        resourceId: {
            type: 'string',
        },
        date: {
            type: 'string',
            format: 'date-time',
        },
        workingHours: {
            $ref: '#/definitions/WorkUnit',
        },
        capacity: {
            $ref: '#/definitions/WorkUnit',
        },
        calendarExceptionId: {
            type: 'string',
        },
    },
} as const;

export const UsersWorkingHoursCalendarExceptSchema = {
    type: 'object',
    required: ['id', 'name', 'resourceId', 'workingDay', 'startDate', 'endDate', 'exceptionType'],
    properties: {
        id: {
            type: 'string',
        },
        name: {
            type: 'string',
        },
        resourceId: {
            type: 'string',
        },
        workingDay: {
            type: 'boolean',
        },
        startDate: {
            type: 'string',
            format: 'date-time',
        },
        endDate: {
            type: 'string',
            format: 'date-time',
        },
        exceptionType: {
            $ref: '#/definitions/UsersWorkingHoursExceptionType',
        },
    },
} as const;

export const UsersWorkingHoursExceptionTypeSchema = {
    type: 'object',
    required: ['id', 'name'],
    properties: {
        id: {
            type: 'string',
        },
        name: {
            type: 'string',
        },
    },
} as const;

export const GetUsersWorkingHoursRequestSchema = {
    type: 'object',
    required: ['startDate', 'dueDate', 'resourceIds'],
    properties: {
        startDate: {
            type: 'string',
            format: 'date-time',
        },
        dueDate: {
            type: 'string',
            format: 'date-time',
        },
        resourceIds: {
            type: 'array',
            minItems: 1,
            items: {
                type: 'string',
            },
        },
    },
} as const;

export const GetGroupMembershipLinksResponseSchema = {
    type: 'object',
    required: ['groupMembershipLinks'],
    properties: {
        groupMembershipLinks: {
            type: 'array',
            items: {
                $ref: '#/definitions/GroupMembershipLink',
            },
        },
    },
} as const;

export const GroupMembershipLinkSchema = {
    type: 'object',
    required: ['id', 'member', 'container'],
    properties: {
        id: {
            type: 'string',
        },
        member: {
            $ref: '#/definitions/ObjectInfo',
        },
        container: {
            $ref: '#/definitions/ObjectInfo',
        },
    },
} as const;

export const ObjectInfoSchema = {
    type: 'object',
    required: ['id', 'name'],
    properties: {
        id: {
            type: 'string',
        },
        name: {
            type: 'string',
        },
    },
} as const;

export const GetGroupMembershipLinksRequestSchema = {
    type: 'object',
    required: ['resourceManagerId'],
    properties: {
        resourceManagerId: {
            type: 'string',
            minLength: 1,
        },
        directManagerId: {
            type: 'string',
        },
    },
} as const;

export const GetResourceProjectsResponseSchema = {
    type: 'object',
    required: ['projects'],
    properties: {
        projects: {
            type: 'array',
            items: {
                type: 'object',
                additionalProperties: {},
            },
        },
    },
} as const;

export const GetResourceProjectsRequestSchema = {
    type: 'object',
    required: ['resourceId', 'fields'],
    properties: {
        resourceId: {
            type: 'string',
            minLength: 1,
        },
        fields: {
            type: 'array',
            minItems: 1,
            items: {
                type: 'string',
            },
        },
        optionalFilter: {
            $ref: '#/definitions/GetResourceProjectsRequestFilter',
        },
    },
} as const;

export const GetResourceProjectsRequestFilterSchema = {
    type: 'object',
    properties: {
        wiIsStaffingPlan: {
            type: 'string',
            minLength: 1,
        },
    },
} as const;
