// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-axios';
import type {
    BugsGetData,
    BugsGetResponse,
    BugsGetGroupedData,
    BugsGetGroupedResponse,
    BugsGetByIdentifierData,
    BugsGetByIdentifierResponse,
    BugsGetByIdsData,
    BugsGetByIdsResponse,
    BugsGetCountData,
    BugsGetCountResponse,
    BugsGetRelationsData,
    BugsGetRelationsResponse,
    BugsGetRelationsCountData,
    BugsGetRelationsCountResponse,
    BugsGetGroupedRelationsData,
    BugsGetGroupedRelationsResponse,
    BugsGetAvatarsData,
    BugsGetAvatarsResponse,
    BugsGetRelationsAvatarsData,
    BugsGetRelationsAvatarsResponse,
    CasesGetData,
    CasesGetResponse,
    CasesGetGroupedData,
    CasesGetGroupedResponse,
    CasesGetByIdentifierData,
    CasesGetByIdentifierResponse,
    CasesGetByIdsData,
    CasesGetByIdsResponse,
    CasesGetCountData,
    CasesGetCountResponse,
    CasesGetRelationsData,
    CasesGetRelationsResponse,
    CasesGetRelationsCountData,
    CasesGetRelationsCountResponse,
    CasesGetGroupedRelationsData,
    CasesGetGroupedRelationsResponse,
    CasesGetAvatarsData,
    CasesGetAvatarsResponse,
    CasesGetRelationsAvatarsData,
    CasesGetRelationsAvatarsResponse,
    IssuesGetData,
    IssuesGetResponse,
    IssuesGetGroupedData,
    IssuesGetGroupedResponse,
    IssuesGetByIdentifierData,
    IssuesGetByIdentifierResponse,
    IssuesGetByIdsData,
    IssuesGetByIdsResponse,
    IssuesGetCountData,
    IssuesGetCountResponse,
    IssuesGetRelationsData,
    IssuesGetRelationsResponse,
    IssuesGetRelationsCountData,
    IssuesGetRelationsCountResponse,
    IssuesGetGroupedRelationsData,
    IssuesGetGroupedRelationsResponse,
    IssuesGetAvatarsData,
    IssuesGetAvatarsResponse,
    IssuesGetRelationsAvatarsData,
    IssuesGetRelationsAvatarsResponse,
    RequestsGetData,
    RequestsGetResponse,
    RequestsGetGroupedData,
    RequestsGetGroupedResponse,
    RequestsGetByIdentifierData,
    RequestsGetByIdentifierResponse,
    RequestsGetByIdsData,
    RequestsGetByIdsResponse,
    RequestsGetCountData,
    RequestsGetCountResponse,
    RequestsGetRelationsData,
    RequestsGetRelationsResponse,
    RequestsGetRelationsCountData,
    RequestsGetRelationsCountResponse,
    RequestsGetGroupedRelationsData,
    RequestsGetGroupedRelationsResponse,
    RequestsGetAvatarsData,
    RequestsGetAvatarsResponse,
    RequestsGetRelationsAvatarsData,
    RequestsGetRelationsAvatarsResponse,
    RisksGetData,
    RisksGetResponse,
    RisksGetGroupedData,
    RisksGetGroupedResponse,
    RisksGetByIdentifierData,
    RisksGetByIdentifierResponse,
    RisksGetByIdsData,
    RisksGetByIdsResponse,
    RisksGetCountData,
    RisksGetCountResponse,
    RisksGetRelationsData,
    RisksGetRelationsResponse,
    RisksGetRelationsCountData,
    RisksGetRelationsCountResponse,
    RisksGetGroupedRelationsData,
    RisksGetGroupedRelationsResponse,
    RisksGetAvatarsData,
    RisksGetAvatarsResponse,
    RisksGetRelationsAvatarsData,
    RisksGetRelationsAvatarsResponse,
    GenericEntityGetData,
    GenericEntityGetResponse,
    GenericEntityGetGroupedData,
    GenericEntityGetGroupedResponse,
    GenericEntityGetByIdentifierData,
    GenericEntityGetByIdentifierResponse,
    GenericEntityGetByIdsData,
    GenericEntityGetByIdsResponse,
    GenericEntityGetCountData,
    GenericEntityGetCountResponse,
    GenericEntityGetRelationsData,
    GenericEntityGetRelationsResponse,
    GenericEntityGetRelationsCountData,
    GenericEntityGetRelationsCountResponse,
    GenericEntityGetGroupedRelationsData,
    GenericEntityGetGroupedRelationsResponse,
    GenericEntityGetEntityPicklistData,
    GenericEntityGetEntityPicklistResponse,
    GenericEntityGetEntityPicklistError,
    GenericEntityGetSwimlanesData,
    GenericEntityGetSwimlanesResponse,
    GenericEntityGetAvatarsData,
    GenericEntityGetAvatarsResponse,
    GenericEntityGetRelationAvatarsData,
    GenericEntityGetRelationAvatarsResponse,
    GenericEntityGetCustomPanelByIdentifierData,
    GenericEntityGetCustomPanelByIdentifierResponse,
    GenericEntityGetSwimlanesByRelationIdentifierData,
    GenericEntityGetSwimlanesByRelationIdentifierResponse,
    GenericEntityGetAvailableEntitiesData,
    GenericEntityGetAvailableEntitiesResponse,
    MetadataGetPicklistData,
    MetadataGetPicklistResponse,
    MetadataGetFieldsData,
    MetadataGetFieldsResponse,
    MetadataGetSystemSettingsData,
    MetadataGetSystemSettingsResponse,
    MetadataGetOrganizationSettingsData,
    MetadataGetOrganizationSettingsResponse,
    MetadataGetEntitiesDescriptionData,
    MetadataGetEntitiesDescriptionResponse,
    MetadataGetAvailableFieldsData,
    MetadataGetAvailableFieldsResponse,
    MetadataGetRelationViewerFieldsData,
    MetadataGetRelationViewerFieldsResponse,
    PortfoliosGetData,
    PortfoliosGetResponse,
    PortfoliosGetGroupedData,
    PortfoliosGetGroupedResponse,
    PortfoliosGetByIdentifierData,
    PortfoliosGetByIdentifierResponse,
    PortfoliosGetByIdsData,
    PortfoliosGetByIdsResponse,
    PortfoliosGetCountData,
    PortfoliosGetCountResponse,
    PortfoliosGetRelationsData,
    PortfoliosGetRelationsResponse,
    PortfoliosGetRelationsCountData,
    PortfoliosGetRelationsCountResponse,
    PortfoliosGetGroupedRelationsData,
    PortfoliosGetGroupedRelationsResponse,
    PortfoliosGetAvatarsData,
    PortfoliosGetAvatarsResponse,
    PortfoliosGetRelationsAvatarsData,
    PortfoliosGetRelationsAvatarsResponse,
    PropertyCardLayoutGetPropertyCardLayoutData,
    PropertyCardLayoutGetPropertyCardLayoutResponse,
    PropertyCardLayoutGetPropertyCardLayoutByEntityIdData,
    PropertyCardLayoutGetPropertyCardLayoutByEntityIdResponse,
    JobTitlesGetCountData,
    JobTitlesGetCountResponse,
    JobTitlesGetRelationsCountData,
    JobTitlesGetRelationsCountResponse,
    JobTitlesGetData,
    JobTitlesGetResponse,
    JobTitlesGetGroupedData,
    JobTitlesGetGroupedResponse,
    JobTitlesGetByIdentifierData,
    JobTitlesGetByIdentifierResponse,
    JobTitlesGetByIdsData,
    JobTitlesGetByIdsResponse,
    JobTitlesGetRelationsData,
    JobTitlesGetRelationsResponse,
    JobTitlesGetGroupedRelationsData,
    JobTitlesGetGroupedRelationsResponse,
    MembersGetAllMembersData,
    MembersGetAllMembersResponse,
    ProfilesGetCountData,
    ProfilesGetCountResponse,
    ProfilesGetData,
    ProfilesGetResponse,
    ProfilesGetByIdentifierData,
    ProfilesGetByIdentifierResponse,
    ProfilesGetByIdsData,
    ProfilesGetByIdsResponse,
    ProfilesGetUserProfilesData,
    ProfilesGetUserProfilesResponse,
    SkillsGetData,
    SkillsGetResponse,
    SkillsGetGroupedData,
    SkillsGetGroupedResponse,
    SkillsGetByIdentifierData,
    SkillsGetByIdentifierResponse,
    SkillsGetByIdsData,
    SkillsGetByIdsResponse,
    SkillsGetCountData,
    SkillsGetCountResponse,
    SkillsGetRelationsData,
    SkillsGetRelationsResponse,
    SkillsGetRelationsCountData,
    SkillsGetRelationsCountResponse,
    SkillsGetGroupedRelationsData,
    SkillsGetGroupedRelationsResponse,
    UserGroupsGetData,
    UserGroupsGetResponse,
    UserGroupsGetGroupedData,
    UserGroupsGetGroupedResponse,
    UserGroupsGetByIdentifierData,
    UserGroupsGetByIdentifierResponse,
    UserGroupsGetByIdsData,
    UserGroupsGetByIdsResponse,
    UserGroupsGetCountData,
    UserGroupsGetCountResponse,
    UserGroupsGetRelationsData,
    UserGroupsGetRelationsResponse,
    UserGroupsGetRelationsCountData,
    UserGroupsGetRelationsCountResponse,
    UserGroupsGetGroupedRelationsData,
    UserGroupsGetGroupedRelationsResponse,
    UserGroupsGetAuthorizationGroupsData,
    UserGroupsGetAuthorizationGroupsResponse,
    UserGroupsGetRelatedGroupsForUserData,
    UserGroupsGetRelatedGroupsForUserResponse,
    UsersGetData,
    UsersGetResponse,
    UsersGetGroupedData,
    UsersGetGroupedResponse,
    UsersGetByIdentifierData,
    UsersGetByIdentifierResponse,
    UsersGetByIdsData,
    UsersGetByIdsResponse,
    UsersGetCountData,
    UsersGetCountResponse,
    UsersGetRelationsData,
    UsersGetRelationsResponse,
    UsersGetRelationsCountData,
    UsersGetRelationsCountResponse,
    UsersGetGroupedRelationsData,
    UsersGetGroupedRelationsResponse,
    RibbonActionsGetRibbonActionsData,
    RibbonActionsGetRibbonActionsResponse,
    RibbonActionsGetContextMenusData,
    RibbonActionsGetContextMenusResponse,
    MilestonesGetData,
    MilestonesGetResponse,
    MilestonesGetGroupedData,
    MilestonesGetGroupedResponse,
    MilestonesGetByIdentifierData,
    MilestonesGetByIdentifierResponse,
    MilestonesGetByIdsData,
    MilestonesGetByIdsResponse,
    MilestonesGetCountData,
    MilestonesGetCountResponse,
    MilestonesGetRelationsData,
    MilestonesGetRelationsResponse,
    MilestonesGetRelationsCountData,
    MilestonesGetRelationsCountResponse,
    MilestonesGetGroupedRelationsData,
    MilestonesGetGroupedRelationsResponse,
    MilestonesGetAvatarsData,
    MilestonesGetAvatarsResponse,
    MilestonesGetRelationsAvatarsData,
    MilestonesGetRelationsAvatarsResponse,
    ProgramsGetData,
    ProgramsGetResponse,
    ProgramsGetGroupedData,
    ProgramsGetGroupedResponse,
    ProgramsGetByIdentifierData,
    ProgramsGetByIdentifierResponse,
    ProgramsGetByIdsData,
    ProgramsGetByIdsResponse,
    ProgramsGetCountData,
    ProgramsGetCountResponse,
    ProgramsGetRelationsData,
    ProgramsGetRelationsResponse,
    ProgramsGetRelationsCountData,
    ProgramsGetRelationsCountResponse,
    ProgramsGetGroupedRelationsData,
    ProgramsGetGroupedRelationsResponse,
    ProgramsGetAvatarsData,
    ProgramsGetAvatarsResponse,
    ProgramsGetRelationsAvatarsData,
    ProgramsGetRelationsAvatarsResponse,
    ProjectsGetData,
    ProjectsGetResponse,
    ProjectsGetGroupedData,
    ProjectsGetGroupedResponse,
    ProjectsGetByIdentifierData,
    ProjectsGetByIdentifierResponse,
    ProjectsGetByIdsData,
    ProjectsGetByIdsResponse,
    ProjectsGetCountData,
    ProjectsGetCountResponse,
    ProjectsGetRelationsData,
    ProjectsGetRelationsResponse,
    ProjectsGetRelationsCountData,
    ProjectsGetRelationsCountResponse,
    ProjectsGetGroupedRelationsData,
    ProjectsGetGroupedRelationsResponse,
    ProjectsGetAvatarsData,
    ProjectsGetAvatarsResponse,
    ProjectsGetRelationsAvatarsData,
    ProjectsGetRelationsAvatarsResponse,
    TasksGetData,
    TasksGetResponse,
    TasksGetGroupedData,
    TasksGetGroupedResponse,
    TasksGetByIdentifierData,
    TasksGetByIdentifierResponse,
    TasksGetByIdsData,
    TasksGetByIdsResponse,
    TasksGetCountData,
    TasksGetCountResponse,
    TasksGetRelationsData,
    TasksGetRelationsResponse,
    TasksGetRelationsCountData,
    TasksGetRelationsCountResponse,
    TasksGetGroupedRelationsData,
    TasksGetGroupedRelationsResponse,
    TasksGetAvatarsData,
    TasksGetAvatarsResponse,
    TasksGetRelationsAvatarsData,
    TasksGetRelationsAvatarsResponse,
    DataWarehouseEntityGetCountData,
    DataWarehouseEntityGetCountResponse,
    DataWarehouseEntityGetByIdsData,
    DataWarehouseEntityGetByIdsResponse,
    DataWarehouseEntityGetIdsData,
    DataWarehouseEntityGetIdsResponse,
    ConfigurationGetConfigurationData,
    ConfigurationGetConfigurationResponse,
    ConfigurationUpdateConfigurationData,
    StorageConnectionsTestAzureBlobConnectionData,
    StorageConnectionsTestAzureBlobConnectionResponse,
    TriggerExportTriggerExportData,
    PlanviewAdminVerifyConnectData,
    PlanviewAdminGetUsersData,
    PlanviewAdminGetUsersResponse,
    PlanviewAdminGetData,
    PlanviewAdminGetResponse,
    PlanviewAdminRegisterData,
    PlanviewTokenServiceGetPtsTokenForCoPilotData,
    PlanviewTokenServiceGetPtsTokenForCoPilotResponse,
    PlanviewTokenServiceGetPtsTokenInternalData,
    PlanviewTokenServiceGetPtsTokenInternalResponse,
    SentimentAnalysisServiceCalculateSentimentData,
    SentimentAnalysisServiceCalculateSentimentResponse,
    WhiteboardPtsTokenForWhiteboardData,
    WhiteboardPtsTokenForWhiteboardResponse,
    WorkloadGetWorkloadResourcesData,
    WorkloadGetWorkloadResourcesResponse,
    WorkloadGetWorkloadProjectsData,
    WorkloadGetWorkloadProjectsResponse,
    WorkloadGetWorkloadTasksData,
    WorkloadGetWorkloadTasksResponse,
    PublicisGetReportableWorkItemsPerUserData,
    PublicisGetReportableWorkItemsPerUserResponse,
    PublicisGetReportableTasksByIdsData,
    PublicisGetReportableTasksByIdsResponse,
    PublicisGetReportableTasksByIds2Data,
    PublicisGetReportableTasksByIds2Response,
    PublicisGetAssignmentsPerUsersData,
    PublicisGetAssignmentsPerUsersResponse,
    PublicisGetUsersWorkingHoursData,
    PublicisGetUsersWorkingHoursResponse,
    PublicisGetGroupMembershipLinksData,
    PublicisGetGroupMembershipLinksResponse,
    PublicisGetResourceProjectsData,
    PublicisGetResourceProjectsResponse,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
    TData extends TDataShape = TDataShape,
    ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Returns a list of Bugs.
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Bug",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "title",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const bugsGet = <ThrowOnError extends boolean = false>(
    options: Options<BugsGetData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<BugsGetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/bugs',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of Bugs.
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Bug",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "title",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Submitted"
 * }
 */
export const bugsGetGrouped = <ThrowOnError extends boolean = false>(
    options: Options<BugsGetGroupedData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<BugsGetGroupedResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/bugs/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a Bug by its identifier.
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "excludePermissions": true
 * }
 */
export const bugsGetByIdentifier = <ThrowOnError extends boolean = false>(
    options: Options<BugsGetByIdentifierData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        BugsGetByIdentifierResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/bugs/{identifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Bugs by their identifiers.
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Bug",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "title",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "ids": ["11.222.333", "44.555.66"]
 * }
 */
export const bugsGetByIds = <ThrowOnError extends boolean = false>(
    options: Options<BugsGetByIdsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<BugsGetByIdsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/bugs/ids',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the number of Bugs.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Bug",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const bugsGetCount = <ThrowOnError extends boolean = false>(
    options: Options<BugsGetCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<BugsGetCountResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/bugs/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of items related to a Bug.
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "WorkItem",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "title",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const bugsGetRelations = <ThrowOnError extends boolean = false>(
    options: Options<BugsGetRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<BugsGetRelationsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/bugs/{entityId}/relations/{relationName}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the number of items related to a Bug.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "WorkItem",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const bugsGetRelationsCount = <ThrowOnError extends boolean = false>(
    options: Options<BugsGetRelationsCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        BugsGetRelationsCountResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/bugs/{entityId}/relations/{relationName}/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of items related to a Bug.
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "WorkItem",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "title",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Active"
 * }
 */
export const bugsGetGroupedRelations = <ThrowOnError extends boolean = false>(
    options: Options<BugsGetGroupedRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        BugsGetGroupedRelationsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/bugs/{entityId}/relations/{relationName}/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Unique Users and groups.
 * Sample request:
 *
 * {
 * "fieldName": "Owner",
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Bug",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const bugsGetAvatars = <ThrowOnError extends boolean = false>(
    options: Options<BugsGetAvatarsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<BugsGetAvatarsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/bugs/avatars',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Unique Users and groups.
 * Sample request:
 *
 * {
 * "relation": {
 * "name": "ResourcesAndPlaceholders",
 * "filteredEntityType": "User"
 * },
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "case",
 * "fieldName": "title"
 * },
 * "operator": "Contains",
 * "filterValueType": "Text",
 * "values": [
 * {
 * "value": "111111"
 * }
 * ]
 * }
 * ]
 * }
 */
export const bugsGetRelationsAvatars = <ThrowOnError extends boolean = false>(
    options: Options<BugsGetRelationsAvatarsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        BugsGetRelationsAvatarsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/bugs/{entityId}/relations/{relationName}/avatars',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Cases.
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Case",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "title",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const casesGet = <ThrowOnError extends boolean = false>(
    options: Options<CasesGetData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<CasesGetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/cases',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of Cases.
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Case",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "title",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Submitted"
 * }
 */
export const casesGetGrouped = <ThrowOnError extends boolean = false>(
    options: Options<CasesGetGroupedData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<CasesGetGroupedResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/cases/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a Case by its identifier.
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Case",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "title",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const casesGetByIdentifier = <ThrowOnError extends boolean = false>(
    options: Options<CasesGetByIdentifierData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        CasesGetByIdentifierResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/cases/{identifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Cases by their identifiers.
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Case",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "title",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "ids": ["11.222.333", "44.555.66"]
 * }
 */
export const casesGetByIds = <ThrowOnError extends boolean = false>(
    options: Options<CasesGetByIdsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<CasesGetByIdsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/cases/ids',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the number of Cases.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Case",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const casesGetCount = <ThrowOnError extends boolean = false>(
    options: Options<CasesGetCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<CasesGetCountResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/cases/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of items related to a Case.
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "WorkItem",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "title",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const casesGetRelations = <ThrowOnError extends boolean = false>(
    options: Options<CasesGetRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<CasesGetRelationsResponse, unknown, ThrowOnError>(
        {
            security: [
                {
                    name: 'Authorization',
                    type: 'apiKey',
                },
            ],
            url: '/cases/{entityId}/relations/{relationName}',
            ...options,
            headers: {
                'Content-Type': 'application/json-patch+json',
                ...options?.headers,
            },
        },
    );
};

/**
 * Returns the number of items related to a Case.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "WorkItem",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const casesGetRelationsCount = <ThrowOnError extends boolean = false>(
    options: Options<CasesGetRelationsCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        CasesGetRelationsCountResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/cases/{entityId}/relations/{relationName}/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of items related to a Case.
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "WorkItem",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "title",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Active"
 * }
 */
export const casesGetGroupedRelations = <ThrowOnError extends boolean = false>(
    options: Options<CasesGetGroupedRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        CasesGetGroupedRelationsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/cases/{entityId}/relations/{relationName}/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Unique Users and groups.
 * Sample request:
 *
 * {
 * "fieldName": "Owner",
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Case",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const casesGetAvatars = <ThrowOnError extends boolean = false>(
    options: Options<CasesGetAvatarsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<CasesGetAvatarsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/cases/avatars',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Unique Users and groups.
 * Sample request:
 *
 * {
 * "relation": {
 * "name": "ResourcesAndPlaceholders",
 * "filteredEntityType": "User"
 * },
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "case",
 * "fieldName": "title"
 * },
 * "operator": "Contains",
 * "filterValueType": "Text",
 * "values": [
 * {
 * "value": "111111"
 * }
 * ]
 * }
 * ]
 * }
 */
export const casesGetRelationsAvatars = <ThrowOnError extends boolean = false>(
    options: Options<CasesGetRelationsAvatarsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        CasesGetRelationsAvatarsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/cases/{entityId}/relations/{relationName}/avatars',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Issues.
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Issue",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "title",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const issuesGet = <ThrowOnError extends boolean = false>(
    options: Options<IssuesGetData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<IssuesGetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/issues',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of Issues.
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Issue",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "title",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Submitted"
 * }
 */
export const issuesGetGrouped = <ThrowOnError extends boolean = false>(
    options: Options<IssuesGetGroupedData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<IssuesGetGroupedResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/issues/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns an Issue by its identifier.
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "excludePermissions": true
 * }
 */
export const issuesGetByIdentifier = <ThrowOnError extends boolean = false>(
    options: Options<IssuesGetByIdentifierData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        IssuesGetByIdentifierResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/issues/{identifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Issues by their identifiers.
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Issue",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "title",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "ids": ["11.222.333", "44.555.66"]
 * }
 */
export const issuesGetByIds = <ThrowOnError extends boolean = false>(
    options: Options<IssuesGetByIdsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<IssuesGetByIdsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/issues/ids',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the number of Issues.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Issue",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const issuesGetCount = <ThrowOnError extends boolean = false>(
    options: Options<IssuesGetCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<IssuesGetCountResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/issues/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of items related to an Issue.
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "WorkItem",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "title",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const issuesGetRelations = <ThrowOnError extends boolean = false>(
    options: Options<IssuesGetRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        IssuesGetRelationsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/issues/{entityId}/relations/{relationName}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the number of items related to an Issue.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "WorkItem",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const issuesGetRelationsCount = <ThrowOnError extends boolean = false>(
    options: Options<IssuesGetRelationsCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        IssuesGetRelationsCountResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/issues/{entityId}/relations/{relationName}/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of items related to an Issue.
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "WorkItem",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "title",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Active"
 * }
 */
export const issuesGetGroupedRelations = <ThrowOnError extends boolean = false>(
    options: Options<IssuesGetGroupedRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        IssuesGetGroupedRelationsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/issues/{entityId}/relations/{relationName}/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Unique Users and groups.
 * Sample request:
 *
 * {
 * "fieldName": "Owner",
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Issue",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const issuesGetAvatars = <ThrowOnError extends boolean = false>(
    options: Options<IssuesGetAvatarsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<IssuesGetAvatarsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/issues/avatars',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Unique Users and groups.
 * Sample request:
 *
 * {
 * "relation": {
 * "name": "ResourcesAndPlaceholders",
 * "filteredEntityType": "User"
 * },
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "case",
 * "fieldName": "title"
 * },
 * "operator": "Contains",
 * "filterValueType": "Text",
 * "values": [
 * {
 * "value": "111111"
 * }
 * ]
 * }
 * ]
 * }
 */
export const issuesGetRelationsAvatars = <ThrowOnError extends boolean = false>(
    options: Options<IssuesGetRelationsAvatarsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        IssuesGetRelationsAvatarsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/issues/{entityId}/relations/{relationName}/avatars',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Requests (EnhancementRequest).
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "EnhancementRequest",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "itemType": "Numeric",
 * "value": 10
 * },
 * {
 * "itemType": "Numeric",
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "title",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const requestsGet = <ThrowOnError extends boolean = false>(
    options: Options<RequestsGetData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<RequestsGetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/requests',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of Requests (EnhancementRequest).
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "EnhancementRequest",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "title",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Submitted"
 * }
 */
export const requestsGetGrouped = <ThrowOnError extends boolean = false>(
    options: Options<RequestsGetGroupedData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        RequestsGetGroupedResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/requests/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a Request (EnhancementRequest) by its identifier.
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "excludePermissions": true
 * }
 */
export const requestsGetByIdentifier = <ThrowOnError extends boolean = false>(
    options: Options<RequestsGetByIdentifierData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        RequestsGetByIdentifierResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/requests/{identifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Requests (EnhancementRequest) by their identifiers.
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "EnhancementRequest",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "title",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "ids": ["11.222.333", "44.555.66"]
 * }
 */
export const requestsGetByIds = <ThrowOnError extends boolean = false>(
    options: Options<RequestsGetByIdsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<RequestsGetByIdsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/requests/ids',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the number of Requests (EnhancementRequest).
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "EnhancementRequest",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const requestsGetCount = <ThrowOnError extends boolean = false>(
    options: Options<RequestsGetCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<RequestsGetCountResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/requests/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of items related to a Request (EnhancementRequest).
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "WorkItem",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "title",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const requestsGetRelations = <ThrowOnError extends boolean = false>(
    options: Options<RequestsGetRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        RequestsGetRelationsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/requests/{entityId}/relations/{relationName}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the number of items related to a Request (EnhancementRequest).
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "WorkItem",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const requestsGetRelationsCount = <ThrowOnError extends boolean = false>(
    options: Options<RequestsGetRelationsCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        RequestsGetRelationsCountResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/requests/{entityId}/relations/{relationName}/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of items related to a Request (EnhancementRequest).
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "WorkItem",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "title",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Active"
 * }
 */
export const requestsGetGroupedRelations = <ThrowOnError extends boolean = false>(
    options: Options<RequestsGetGroupedRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        RequestsGetGroupedRelationsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/requests/{entityId}/relations/{relationName}/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Unique Users and groups.
 * Sample request:
 *
 * {
 * "fieldName": "Owner",
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "EnhancementRequest",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const requestsGetAvatars = <ThrowOnError extends boolean = false>(
    options: Options<RequestsGetAvatarsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        RequestsGetAvatarsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/requests/avatars',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Unique Users and groups.
 * Sample request:
 *
 * {
 * "relation": {
 * "name": "ResourcesAndPlaceholders",
 * "filteredEntityType": "User"
 * },
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "case",
 * "fieldName": "title"
 * },
 * "operator": "Contains",
 * "filterValueType": "Text",
 * "values": [
 * {
 * "value": "111111"
 * }
 * ]
 * }
 * ]
 * }
 */
export const requestsGetRelationsAvatars = <ThrowOnError extends boolean = false>(
    options: Options<RequestsGetRelationsAvatarsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        RequestsGetRelationsAvatarsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/requests/{entityId}/relations/{relationName}/avatars',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Risks.
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Risk",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "title",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const risksGet = <ThrowOnError extends boolean = false>(
    options: Options<RisksGetData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<RisksGetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/risks',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of Risks.
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Risk",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "title",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Submitted"
 * }
 */
export const risksGetGrouped = <ThrowOnError extends boolean = false>(
    options: Options<RisksGetGroupedData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<RisksGetGroupedResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/risks/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a Risk by its identifier.
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "excludePermissions": true
 * }
 */
export const risksGetByIdentifier = <ThrowOnError extends boolean = false>(
    options: Options<RisksGetByIdentifierData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        RisksGetByIdentifierResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/risks/{identifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Risks by their identifiers.
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Risk",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "title",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "ids": ["11.222.333", "44.555.66"]
 * }
 */
export const risksGetByIds = <ThrowOnError extends boolean = false>(
    options: Options<RisksGetByIdsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<RisksGetByIdsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/risks/ids',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the number of Risks.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Risk",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const risksGetCount = <ThrowOnError extends boolean = false>(
    options: Options<RisksGetCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<RisksGetCountResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/risks/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of items related to a Risk.
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "WorkItem",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "title",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const risksGetRelations = <ThrowOnError extends boolean = false>(
    options: Options<RisksGetRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<RisksGetRelationsResponse, unknown, ThrowOnError>(
        {
            security: [
                {
                    name: 'Authorization',
                    type: 'apiKey',
                },
            ],
            url: '/risks/{entityId}/relations/{relationName}',
            ...options,
            headers: {
                'Content-Type': 'application/json-patch+json',
                ...options?.headers,
            },
        },
    );
};

/**
 * Returns the number of items related to a Risk.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "WorkItem",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const risksGetRelationsCount = <ThrowOnError extends boolean = false>(
    options: Options<RisksGetRelationsCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        RisksGetRelationsCountResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/risks/{entityId}/relations/{relationName}/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of items related to a Risk.
 * Sample request:
 *
 * {
 * "fields": [
 * "title",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "WorkItem",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "title",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Active"
 * }
 */
export const risksGetGroupedRelations = <ThrowOnError extends boolean = false>(
    options: Options<RisksGetGroupedRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        RisksGetGroupedRelationsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/risks/{entityId}/relations/{relationName}/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Unique Users and groups.
 * Sample request:
 *
 * {
 * "fieldName": "Onwer",
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Risk",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const risksGetAvatars = <ThrowOnError extends boolean = false>(
    options: Options<RisksGetAvatarsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<RisksGetAvatarsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/risks/avatars',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Unique Users and groups.
 * Sample request:
 *
 * {
 * "relation": {
 * "name": "ResourcesAndPlaceholders",
 * "filteredEntityType": "User"
 * },
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "case",
 * "fieldName": "title"
 * },
 * "operator": "Contains",
 * "filterValueType": "Text",
 * "values": [
 * {
 * "value": "111111"
 * }
 * ]
 * }
 * ]
 * }
 */
export const risksGetRelationsAvatars = <ThrowOnError extends boolean = false>(
    options: Options<RisksGetRelationsAvatarsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        RisksGetRelationsAvatarsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/risks/{entityId}/relations/{relationName}/avatars',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of entities.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "entityType"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "WorkItem",
 * "fieldName": "Name"
 * },
 * "operator": "Contains",
 * "filterValueType": "Text",
 * "values": [
 * {
 * "value": "ABC"
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const genericEntityGet = <ThrowOnError extends boolean = false>(
    options: Options<GenericEntityGetData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<GenericEntityGetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/entity/{entityType}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of entities.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "entityType"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Portfolio",
 * "fieldName": "InvestmentYear"
 * },
 * "operator": "GreaterThan",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 2000
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "entityType",
 * "groupName": "Active"
 * }
 */
export const genericEntityGetGrouped = <ThrowOnError extends boolean = false>(
    options: Options<GenericEntityGetGroupedData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        GenericEntityGetGroupedResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/entity/{entityType}/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns an entity by its identifier.
 * Sample request:
 *
 * {
 * "fields": [
 * "fieldName1",
 * "fieldName2",
 * ],
 * "relations": [
 * "relationName
 * ],
 * "excludePermissions": true
 * }
 */
export const genericEntityGetByIdentifier = <ThrowOnError extends boolean = false>(
    options: Options<GenericEntityGetByIdentifierData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        GenericEntityGetByIdentifierResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/entity/{entityType}/{identifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of entities by their identifiers.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "PortfolioState"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Portfolio",
 * "fieldName": "InvestmentYear"
 * },
 * "operator": "GreaterThan",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 2000
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "ids": ["11.222.333", "44.555.66"]
 * }
 */
export const genericEntityGetByIds = <ThrowOnError extends boolean = false>(
    options: Options<GenericEntityGetByIdsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        GenericEntityGetByIdsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/entity/{entityType}/ids',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the number of entities.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Portfolio",
 * "fieldName": "InvestmentYear"
 * },
 * "operator": "GreaterThan",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 2000
 * }
 * ]
 * }
 * ]
 * }
 */
export const genericEntityGetCount = <ThrowOnError extends boolean = false>(
    options: Options<GenericEntityGetCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        GenericEntityGetCountResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/entity/{entityType}/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of items related to the entity.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Project",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const genericEntityGetRelations = <ThrowOnError extends boolean = false>(
    options: Options<GenericEntityGetRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        GenericEntityGetRelationsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/entity/{entityType}/{entityId}/relations/{relationName}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the number of items related to the entity.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Project",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const genericEntityGetRelationsCount = <ThrowOnError extends boolean = false>(
    options: Options<GenericEntityGetRelationsCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        GenericEntityGetRelationsCountResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/entity/{entityType}/{entityId}/relations/{relationName}/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of items related to the entity.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Project",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Active"
 * }
 */
export const genericEntityGetGroupedRelations = <ThrowOnError extends boolean = false>(
    options: Options<GenericEntityGetGroupedRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        GenericEntityGetGroupedRelationsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/entity/{entityType}/{entityId}/relations/{relationName}/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns picklist options honoring dependent field value.
 */
export const genericEntityGetEntityPicklist = <ThrowOnError extends boolean = false>(
    options: Options<GenericEntityGetEntityPicklistData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        GenericEntityGetEntityPicklistResponse,
        GenericEntityGetEntityPicklistError,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/entity/{entityId}/picklist/{fieldName}',
        ...options,
    });
};

/**
 * Returns distinct list of related items with global aggregate for group by field.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "entityType"
 * ],
 * "dataFilters": [],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "entityType",
 * "groupName": "Active"
 * }
 */
export const genericEntityGetSwimlanes = <ThrowOnError extends boolean = false>(
    options: Options<GenericEntityGetSwimlanesData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        GenericEntityGetSwimlanesResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/entity/{entityType}/swimlanes/{swimlaneRelationName}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Unique Users and groups.
 * Sample request:
 *
 * {
 * "fieldName": "ProjectManager",
 * "dataFilters": []
 * }
 */
export const genericEntityGetAvatars = <ThrowOnError extends boolean = false>(
    options: Options<GenericEntityGetAvatarsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        GenericEntityGetAvatarsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/entity/{entityType}/avatars',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Unique Users and groups.
 * Sample request:
 *
 * {
 * "relation": {
 * "name": "ResourcesAndPlaceholders",
 * "filteredEntityType": "User"
 * },
 * "dataFilters": []
 * }
 */
export const genericEntityGetRelationAvatars = <ThrowOnError extends boolean = false>(
    options: Options<GenericEntityGetRelationAvatarsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        GenericEntityGetRelationAvatarsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/entity/{entityType}/{entityId}/relations/{relationName}/avatars',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Retrieves list of custom panel associated with Entity
 */
export const genericEntityGetCustomPanelByIdentifier = <ThrowOnError extends boolean = false>(
    options: Options<GenericEntityGetCustomPanelByIdentifierData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        GenericEntityGetCustomPanelByIdentifierResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/entity/{entityType}/{entityId}/custom-panels',
        ...options,
    });
};

export const genericEntityGetSwimlanesByRelationIdentifier = <ThrowOnError extends boolean = false>(
    options: Options<GenericEntityGetSwimlanesByRelationIdentifierData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        GenericEntityGetSwimlanesByRelationIdentifierResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/entity/{entityType}/{entityId}/relations/{relationName}/swimlanes/{swimlaneRelationName}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

export const genericEntityGetAvailableEntities = <ThrowOnError extends boolean = false>(
    options: Options<GenericEntityGetAvailableEntitiesData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        GenericEntityGetAvailableEntitiesResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/entity/{entityType}/{entityId}/available/{linkableRelationName}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns picklist options for specific entity type.
 * Sample request:
 *
 * {
 * "entityType": "Task",
 * "propertyNames": [
 * "State",
 * "Phase"
 * ]
 * }
 */
export const metadataGetPicklist = <ThrowOnError extends boolean = false>(
    options: Options<MetadataGetPicklistData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        MetadataGetPicklistResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/metadata/picklists',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns fields and relations details for specific entity.
 * Sample request:
 *
 * {
 * "entityType": "Task",
 * "propertyNames": [
 * "State",
 * "Phase"
 * ],
 * "relationNames": [
 * "RelatedRisks"
 * ],
 * "includeFields": true,
 * "includeRelations": true
 * }
 */
export const metadataGetFields = <ThrowOnError extends boolean = false>(
    options: Options<MetadataGetFieldsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<MetadataGetFieldsResponse, unknown, ThrowOnError>(
        {
            security: [
                {
                    name: 'Authorization',
                    type: 'apiKey',
                },
            ],
            url: '/metadata/fields',
            ...options,
            headers: {
                'Content-Type': 'application/json-patch+json',
                ...options?.headers,
            },
        },
    );
};

/**
 * Returns basic system settings.
 */
export const metadataGetSystemSettings = <ThrowOnError extends boolean = false>(
    options?: Options<MetadataGetSystemSettingsData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        MetadataGetSystemSettingsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/metadata/systemsettings',
        ...options,
    });
};

/**
 * Returns general organization settings.
 */
export const metadataGetOrganizationSettings = <ThrowOnError extends boolean = false>(
    options?: Options<MetadataGetOrganizationSettingsData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        MetadataGetOrganizationSettingsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/metadata/organizationsettings',
        ...options,
    });
};

/**
 * Returns information about the entity types in your organization.
 */
export const metadataGetEntitiesDescription = <ThrowOnError extends boolean = false>(
    options: Options<MetadataGetEntitiesDescriptionData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        MetadataGetEntitiesDescriptionResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/metadata/describeEntities',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns available fields for a specific entity and it's children.
 */
export const metadataGetAvailableFields = <ThrowOnError extends boolean = false>(
    options: Options<MetadataGetAvailableFieldsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        MetadataGetAvailableFieldsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/metadata/availablefields',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns available fields for a specific realtion.
 */
export const metadataGetRelationViewerFields = <ThrowOnError extends boolean = false>(
    options: Options<MetadataGetRelationViewerFieldsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        MetadataGetRelationViewerFieldsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/metadata/relationfields',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Portfolios.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "PortfolioState"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Portfolio",
 * "fieldName": "InvestmentYear"
 * },
 * "operator": "GreaterThan",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 2000
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const portfoliosGet = <ThrowOnError extends boolean = false>(
    options: Options<PortfoliosGetData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<PortfoliosGetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/portfolio',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of Portfolios.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "PortfolioState"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Portfolio",
 * "fieldName": "InvestmentYear"
 * },
 * "operator": "GreaterThan",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 2000
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "PortfolioState",
 * "groupName": "Active"
 * }
 */
export const portfoliosGetGrouped = <ThrowOnError extends boolean = false>(
    options: Options<PortfoliosGetGroupedData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        PortfoliosGetGroupedResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/portfolio/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a Portfolio by its identifier.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "PortfolioState"
 * ],
 * "excludePermissions": true
 * }
 */
export const portfoliosGetByIdentifier = <ThrowOnError extends boolean = false>(
    options: Options<PortfoliosGetByIdentifierData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        PortfoliosGetByIdentifierResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/portfolio/{identifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Portfolios by their identifiers.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "PortfolioState"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Portfolio",
 * "fieldName": "InvestmentYear"
 * },
 * "operator": "GreaterThan",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 2000
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "ids": ["11.222.333", "44.555.66"]
 * }
 */
export const portfoliosGetByIds = <ThrowOnError extends boolean = false>(
    options: Options<PortfoliosGetByIdsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        PortfoliosGetByIdsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/portfolio/ids',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the number of Portfolios.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Portfolio",
 * "fieldName": "InvestmentYear"
 * },
 * "operator": "GreaterThan",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 2000
 * }
 * ]
 * }
 * ]
 * }
 */
export const portfoliosGetCount = <ThrowOnError extends boolean = false>(
    options: Options<PortfoliosGetCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        PortfoliosGetCountResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/portfolio/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of items related to a Portfolio.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Project",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const portfoliosGetRelations = <ThrowOnError extends boolean = false>(
    options: Options<PortfoliosGetRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        PortfoliosGetRelationsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/portfolio/{entityId}/relations/{relationName}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the number of items related to a Portfolio.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Project",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const portfoliosGetRelationsCount = <ThrowOnError extends boolean = false>(
    options: Options<PortfoliosGetRelationsCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        PortfoliosGetRelationsCountResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/portfolio/{entityId}/relations/{relationName}/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of items related to a Portfolio.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Project",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Active"
 * }
 */
export const portfoliosGetGroupedRelations = <ThrowOnError extends boolean = false>(
    options: Options<PortfoliosGetGroupedRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        PortfoliosGetGroupedRelationsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/portfolio/{entityId}/relations/{relationName}/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Unique Users and groups.
 * Sample request:
 *
 * {
 * "fieldName": "Owner",
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Portfolio",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const portfoliosGetAvatars = <ThrowOnError extends boolean = false>(
    options: Options<PortfoliosGetAvatarsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        PortfoliosGetAvatarsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/portfolio/avatars',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Unique Users and groups.
 * Sample request:
 *
 * {
 * "relation": {
 * "name": "ResourcesAndPlaceholders",
 * "filteredEntityType": "User"
 * },
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Portfolio",
 * "fieldName": "name"
 * },
 * "operator": "Contains",
 * "filterValueType": "Text",
 * "values": [
 * {
 * "value": "111111"
 * }
 * ]
 * }
 * ]
 * }
 */
export const portfoliosGetRelationsAvatars = <ThrowOnError extends boolean = false>(
    options: Options<PortfoliosGetRelationsAvatarsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        PortfoliosGetRelationsAvatarsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/portfolio/{entityId}/relations/{relationName}/avatars',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a Property Card layout for the specific entity type.
 */
export const propertyCardLayoutGetPropertyCardLayout = <ThrowOnError extends boolean = false>(
    options: Options<PropertyCardLayoutGetPropertyCardLayoutData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        PropertyCardLayoutGetPropertyCardLayoutResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/propertycardlayout/{entityType}',
        ...options,
    });
};

/**
 * Returns a Property Card layout for the specific internal id of the entity.
 */
export const propertyCardLayoutGetPropertyCardLayoutByEntityId = <
    ThrowOnError extends boolean = false,
>(
    options: Options<PropertyCardLayoutGetPropertyCardLayoutByEntityIdData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        PropertyCardLayoutGetPropertyCardLayoutByEntityIdResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/propertycardlayout/entity/{entityId}',
        ...options,
    });
};

/**
 * Returns the number of Job Titles.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "JobTitle",
 * "fieldName": "RevenueRegularRate"
 * },
 * "operator": "GreaterThan",
 * "filterValueType": "NumericWithUnit",
 * "values": [
 * {
 * "value":{
 * "amount": 5,
 * "unit": "USD"
 * }
 * }
 * ]
 * }
 * ]
 * }
 */
export const jobTitlesGetCount = <ThrowOnError extends boolean = false>(
    options: Options<JobTitlesGetCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<JobTitlesGetCountResponse, unknown, ThrowOnError>(
        {
            security: [
                {
                    name: 'Authorization',
                    type: 'apiKey',
                },
            ],
            url: '/jobtitles/count',
            ...options,
            headers: {
                'Content-Type': 'application/json-patch+json',
                ...options?.headers,
            },
        },
    );
};

/**
 * Returns the number of items related to a Job Title.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Project",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const jobTitlesGetRelationsCount = <ThrowOnError extends boolean = false>(
    options: Options<JobTitlesGetRelationsCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        JobTitlesGetRelationsCountResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/jobtitles/{entityId}/relations/{relationName}/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Job Titles.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "JobTitle",
 * "fieldName": "RevenueRegularRate"
 * },
 * "operator": "GreaterThan",
 * "filterValueType": "NumericWithUnit",
 * "values": [
 * {
 * "value":{
 * "amount": 5,
 * "unit": "USD"
 * }
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const jobTitlesGet = <ThrowOnError extends boolean = false>(
    options: Options<JobTitlesGetData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<JobTitlesGetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/jobtitles',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of Job Titles.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "JobTitle",
 * "fieldName": "RevenueRegularRate"
 * },
 * "operator": "GreaterThan",
 * "filterValueType": "NumericWithUnit",
 * "values": [
 * {
 * "value":{
 * "amount": 5,
 * "unit": "USD"
 * }
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Active"
 * }
 */
export const jobTitlesGetGrouped = <ThrowOnError extends boolean = false>(
    options: Options<JobTitlesGetGroupedData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        JobTitlesGetGroupedResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/jobtitles/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a Job Title by its identifier.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "state"
 * ],
 * "excludePermissions": true
 * }
 */
export const jobTitlesGetByIdentifier = <ThrowOnError extends boolean = false>(
    options: Options<JobTitlesGetByIdentifierData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        JobTitlesGetByIdentifierResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/jobtitles/{identifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Job Titles by their identifiers.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "JobTitle",
 * "fieldName": "RevenueRegularRate"
 * },
 * "operator": "GreaterThan",
 * "filterValueType": "NumericWithUnit",
 * "values": [
 * {
 * "value":{
 * "amount": 5,
 * "unit": "USD"
 * }
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "ids": ["11.222.333", "44.555.66"]
 * }
 */
export const jobTitlesGetByIds = <ThrowOnError extends boolean = false>(
    options: Options<JobTitlesGetByIdsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<JobTitlesGetByIdsResponse, unknown, ThrowOnError>(
        {
            security: [
                {
                    name: 'Authorization',
                    type: 'apiKey',
                },
            ],
            url: '/jobtitles/ids',
            ...options,
            headers: {
                'Content-Type': 'application/json-patch+json',
                ...options?.headers,
            },
        },
    );
};

/**
 * Returns a list of items related to a Job Title.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Project",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const jobTitlesGetRelations = <ThrowOnError extends boolean = false>(
    options: Options<JobTitlesGetRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        JobTitlesGetRelationsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/jobtitles/{entityId}/relations/{relationName}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of items related to a Job Title.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Project",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Active"
 * }
 */
export const jobTitlesGetGroupedRelations = <ThrowOnError extends boolean = false>(
    options: Options<JobTitlesGetGroupedRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        JobTitlesGetGroupedRelationsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/jobtitles/{entityId}/relations/{relationName}/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Members(AuthorizationGroups, UserGroups, ProfileGroups, Users).
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "fieldName": "name"
 * },
 * "operator": "Contains",
 * "filterValueType": "Text",
 * "values": [
 * {
 * "value": "user",
 * "itemType": "Text"
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const membersGetAllMembers = <ThrowOnError extends boolean = false>(
    options: Options<MembersGetAllMembersData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        MembersGetAllMembersResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/members',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the number of Profiles.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Profile",
 * "fieldName": "Name"
 * },
 * "operator": "Equals",
 * "filterValueType": "Text",
 * "values": [
 * {
 * "value": "Test"
 * }
 * ]
 * }
 * ]
 * }
 */
export const profilesGetCount = <ThrowOnError extends boolean = false>(
    options: Options<ProfilesGetCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<ProfilesGetCountResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/profiles/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Profiles.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Profile",
 * "fieldName": "Name"
 * },
 * "operator": "Equals",
 * "filterValueType": "Text",
 * "values": [
 * {
 * "value": "Test"
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const profilesGet = <ThrowOnError extends boolean = false>(
    options: Options<ProfilesGetData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<ProfilesGetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/profiles',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a Profile by its identifier.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "state"
 * ],
 * "excludePermissions": true
 * }
 */
export const profilesGetByIdentifier = <ThrowOnError extends boolean = false>(
    options: Options<ProfilesGetByIdentifierData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        ProfilesGetByIdentifierResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/profiles/{identifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Profiles by their identifiers.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Profile",
 * "fieldName": "Name"
 * },
 * "operator": "Equals",
 * "filterValueType": "Text",
 * "values": [
 * {
 * "value": "Test"
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "ids": ["11.222.333", "44.555.66"]
 * }
 */
export const profilesGetByIds = <ThrowOnError extends boolean = false>(
    options: Options<ProfilesGetByIdsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<ProfilesGetByIdsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/profiles/ids',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Profiles which are assigned to User.
 */
export const profilesGetUserProfiles = <ThrowOnError extends boolean = false>(
    options: Options<ProfilesGetUserProfilesData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        ProfilesGetUserProfilesResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/profiles/user/{userId}',
        ...options,
    });
};

/**
 * Returns a list of Skills.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Skill",
 * "fieldName": "NLRCategory"
 * },
 * "operator": "In",
 * "filterValueType": "PickList",
 * "values": [
 * {
 * "value": "Labor"
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const skillsGet = <ThrowOnError extends boolean = false>(
    options: Options<SkillsGetData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<SkillsGetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/skills',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of Skills.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Skill",
 * "fieldName": "NLRCategory"
 * },
 * "operator": "In",
 * "filterValueType": "PickList",
 * "values": [
 * {
 * "value": "Labor"
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Active"
 * }
 */
export const skillsGetGrouped = <ThrowOnError extends boolean = false>(
    options: Options<SkillsGetGroupedData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<SkillsGetGroupedResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/skills/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a Skill by its identifier.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "state"
 * ],
 * "excludePermissions": true
 * }
 */
export const skillsGetByIdentifier = <ThrowOnError extends boolean = false>(
    options: Options<SkillsGetByIdentifierData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        SkillsGetByIdentifierResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/skills/{identifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Skills by their identifiers.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Skill",
 * "fieldName": "NLRCategory"
 * },
 * "operator": "In",
 * "filterValueType": "PickList",
 * "values": [
 * {
 * "value": "Labor"
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "ids": ["11.222.333", "44.555.66"]
 * }
 */
export const skillsGetByIds = <ThrowOnError extends boolean = false>(
    options: Options<SkillsGetByIdsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<SkillsGetByIdsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/skills/ids',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the number of Skills.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Skill",
 * "fieldName": "NLRCategory"
 * },
 * "operator": "In",
 * "filterValueType": "PickList",
 * "values": [
 * {
 * "value": "Labor"
 * }
 * ]
 * }
 * ]
 * }
 */
export const skillsGetCount = <ThrowOnError extends boolean = false>(
    options: Options<SkillsGetCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<SkillsGetCountResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/skills/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of items related to a Skill.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "ResourceEntity",
 * "fieldName": "Name"
 * },
 * "operator": "Equals",
 * "filterValueType": "Text",
 * "values": [
 * {
 * "value": "User1"
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const skillsGetRelations = <ThrowOnError extends boolean = false>(
    options: Options<SkillsGetRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        SkillsGetRelationsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/skills/{entityId}/relations/{relationName}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the number of items related to a Skill.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "ResourceEntity",
 * "fieldName": "Name"
 * },
 * "operator": "Equals",
 * "filterValueType": "Text",
 * "values": [
 * {
 * "value": "User1"
 * }
 * ]
 * }
 * ]
 * }
 */
export const skillsGetRelationsCount = <ThrowOnError extends boolean = false>(
    options: Options<SkillsGetRelationsCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        SkillsGetRelationsCountResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/skills/{entityId}/relations/{relationName}/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of items related to a Skill.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "ResourceEntity",
 * "fieldName": "Name"
 * },
 * "operator": "Equals",
 * "filterValueType": "Text",
 * "values": [
 * {
 * "value": "User1"
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Active"
 * }
 */
export const skillsGetGroupedRelations = <ThrowOnError extends boolean = false>(
    options: Options<SkillsGetGroupedRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        SkillsGetGroupedRelationsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/skills/{entityId}/relations/{relationName}/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of User Groups.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "UserGroup",
 * "fieldName": "RevenueRegularRate"
 * },
 * "operator": "GreaterThan",
 * "filterValueType": "NumericWithUnit",
 * "values": [
 * {
 * "value":{
 * "amount": 5,
 * "unit": "USD"
 * }
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const userGroupsGet = <ThrowOnError extends boolean = false>(
    options: Options<UserGroupsGetData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<UserGroupsGetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/usergroups',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of User Groups.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "UserGroup",
 * "fieldName": "RevenueRegularRate"
 * },
 * "operator": "GreaterThan",
 * "filterValueType": "NumericWithUnit",
 * "values": [
 * {
 * "value":{
 * "amount": 5,
 * "unit": "USD"
 * }
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Active"
 * }
 */
export const userGroupsGetGrouped = <ThrowOnError extends boolean = false>(
    options: Options<UserGroupsGetGroupedData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        UserGroupsGetGroupedResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/usergroups/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a User Group by its identifier.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "state"
 * ],
 * "excludePermissions": true
 * }
 */
export const userGroupsGetByIdentifier = <ThrowOnError extends boolean = false>(
    options: Options<UserGroupsGetByIdentifierData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        UserGroupsGetByIdentifierResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/usergroups/{identifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of User Groups by their identifiers.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "UserGroup",
 * "fieldName": "RevenueRegularRate"
 * },
 * "operator": "GreaterThan",
 * "filterValueType": "NumericWithUnit",
 * "values": [
 * {
 * "value":{
 * "amount": 5,
 * "unit": "USD"
 * }
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "ids": ["11.222.333", "44.555.66"]
 * }
 */
export const userGroupsGetByIds = <ThrowOnError extends boolean = false>(
    options: Options<UserGroupsGetByIdsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        UserGroupsGetByIdsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/usergroups/ids',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the number of User Groups.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "UserGroup",
 * "fieldName": "RevenueRegularRate"
 * },
 * "operator": "GreaterThan",
 * "filterValueType": "NumericWithUnit",
 * "values": [
 * {
 * "value":{
 * "amount": 5,
 * "unit": "USD"
 * }
 * }
 * ]
 * }
 * ]
 * }
 */
export const userGroupsGetCount = <ThrowOnError extends boolean = false>(
    options: Options<UserGroupsGetCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        UserGroupsGetCountResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/usergroups/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of items related to a User Group.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Project",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const userGroupsGetRelations = <ThrowOnError extends boolean = false>(
    options: Options<UserGroupsGetRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        UserGroupsGetRelationsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/usergroups/{entityId}/relations/{relationName}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the number of items related to a User Group.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Project",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const userGroupsGetRelationsCount = <ThrowOnError extends boolean = false>(
    options: Options<UserGroupsGetRelationsCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        UserGroupsGetRelationsCountResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/usergroups/{entityId}/relations/{relationName}/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of items related to a User Group.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Project",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Active"
 * }
 */
export const userGroupsGetGroupedRelations = <ThrowOnError extends boolean = false>(
    options: Options<UserGroupsGetGroupedRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        UserGroupsGetGroupedRelationsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/usergroups/{entityId}/relations/{relationName}/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Authorization Groups.
 */
export const userGroupsGetAuthorizationGroups = <ThrowOnError extends boolean = false>(
    options?: Options<UserGroupsGetAuthorizationGroupsData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        UserGroupsGetAuthorizationGroupsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/usergroups/authorizationgroups',
        ...options,
    });
};

/**
 * Returns a list of Groups which the User is a member of.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "UserGroup",
 * "fieldName": "RevenueRegularRate"
 * },
 * "operator": "GreaterThan",
 * "filterValueType": "NumericWithUnit",
 * "values": [
 * {
 * "value":{
 * "amount": 5,
 * "unit": "USD"
 * }
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const userGroupsGetRelatedGroupsForUser = <ThrowOnError extends boolean = false>(
    options: Options<UserGroupsGetRelatedGroupsForUserData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        UserGroupsGetRelatedGroupsForUserResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/usergroups/user/{userId}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Users.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "User",
 * "fieldName": "RevenueRegularRate"
 * },
 * "operator": "GreaterThan",
 * "filterValueType": "NumericWithUnit",
 * "values": [
 * {
 * "value":{
 * "amount": 5,
 * "unit": "USD"
 * }
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const usersGet = <ThrowOnError extends boolean = false>(
    options: Options<UsersGetData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<UsersGetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of Users.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "User",
 * "fieldName": "RevenueRegularRate"
 * },
 * "operator": "GreaterThan",
 * "filterValueType": "NumericWithUnit",
 * "values": [
 * {
 * "value":{
 * "amount": 5,
 * "unit": "USD"
 * }
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Active"
 * }
 */
export const usersGetGrouped = <ThrowOnError extends boolean = false>(
    options: Options<UsersGetGroupedData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<UsersGetGroupedResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/users/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a User by its identifier.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "state"
 * ],
 * "excludePermissions": true
 * }
 */
export const usersGetByIdentifier = <ThrowOnError extends boolean = false>(
    options: Options<UsersGetByIdentifierData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        UsersGetByIdentifierResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/users/{identifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Users by their identifiers.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "User",
 * "fieldName": "RevenueRegularRate"
 * },
 * "operator": "GreaterThan",
 * "filterValueType": "NumericWithUnit",
 * "values": [
 * {
 * "value":{
 * "amount": 5,
 * "unit": "USD"
 * }
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "ids": ["11.222.333", "44.555.66"]
 * }
 */
export const usersGetByIds = <ThrowOnError extends boolean = false>(
    options: Options<UsersGetByIdsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<UsersGetByIdsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/users/ids',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the number of Users.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "User",
 * "fieldName": "RevenueRegularRate"
 * },
 * "operator": "GreaterThan",
 * "filterValueType": "NumericWithUnit",
 * "values": [
 * {
 * "value":{
 * "amount": 5,
 * "unit": "USD"
 * }
 * }
 * ]
 * }
 * ]
 * }
 */
export const usersGetCount = <ThrowOnError extends boolean = false>(
    options: Options<UsersGetCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<UsersGetCountResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/users/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of items related to a User.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "WorkItem",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const usersGetRelations = <ThrowOnError extends boolean = false>(
    options: Options<UsersGetRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<UsersGetRelationsResponse, unknown, ThrowOnError>(
        {
            security: [
                {
                    name: 'Authorization',
                    type: 'apiKey',
                },
            ],
            url: '/users/{entityId}/relations/{relationName}',
            ...options,
            headers: {
                'Content-Type': 'application/json-patch+json',
                ...options?.headers,
            },
        },
    );
};

/**
 * Returns the number of items related to a User.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "WorkItem",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const usersGetRelationsCount = <ThrowOnError extends boolean = false>(
    options: Options<UsersGetRelationsCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        UsersGetRelationsCountResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/users/{entityId}/relations/{relationName}/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of items related to a User.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "WorkItem",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Active"
 * }
 */
export const usersGetGroupedRelations = <ThrowOnError extends boolean = false>(
    options: Options<UsersGetGroupedRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        UsersGetGroupedRelationsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/users/{entityId}/relations/{relationName}/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Ribbon Actions
 * Sample request:
 *
 * {
 * "Ids": [],
 * "RibbonType": "Subsystem",
 * "EntityType": "Project",
 * "MainEntityId": "",
 * "ParentEntityId": ""
 * }
 */
export const ribbonActionsGetRibbonActions = <ThrowOnError extends boolean = false>(
    options: Options<RibbonActionsGetRibbonActionsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        RibbonActionsGetRibbonActionsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/ribbonactions',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Return context menus for a related entity
 */
export const ribbonActionsGetContextMenus = <ThrowOnError extends boolean = false>(
    options: Options<RibbonActionsGetContextMenusData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        RibbonActionsGetContextMenusResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/ribbonactions/contextmenus',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Milestones.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Milestone",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const milestonesGet = <ThrowOnError extends boolean = false>(
    options: Options<MilestonesGetData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<MilestonesGetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/milestones',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of Milestones.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Milestone",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Active"
 * }
 */
export const milestonesGetGrouped = <ThrowOnError extends boolean = false>(
    options: Options<MilestonesGetGroupedData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        MilestonesGetGroupedResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/milestones/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a Milestone by its identifier.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "excludePermissions": true
 * }
 */
export const milestonesGetByIdentifier = <ThrowOnError extends boolean = false>(
    options: Options<MilestonesGetByIdentifierData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        MilestonesGetByIdentifierResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/milestones/{identifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Milestones by their identifiers.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Milestone",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "ids": ["11.222.333", "44.555.66"]
 * }
 */
export const milestonesGetByIds = <ThrowOnError extends boolean = false>(
    options: Options<MilestonesGetByIdsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        MilestonesGetByIdsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/milestones/ids',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the number of Milestones.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Milestone",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const milestonesGetCount = <ThrowOnError extends boolean = false>(
    options: Options<MilestonesGetCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        MilestonesGetCountResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/milestones/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of items related to a Milestone.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Risk",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const milestonesGetRelations = <ThrowOnError extends boolean = false>(
    options: Options<MilestonesGetRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        MilestonesGetRelationsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/milestones/{entityId}/relations/{relationName}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the number of items related to a Milestone.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Risk",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const milestonesGetRelationsCount = <ThrowOnError extends boolean = false>(
    options: Options<MilestonesGetRelationsCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        MilestonesGetRelationsCountResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/milestones/{entityId}/relations/{relationName}/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of items related to a Milestone.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Risk",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Submitted"
 * }
 */
export const milestonesGetGroupedRelations = <ThrowOnError extends boolean = false>(
    options: Options<MilestonesGetGroupedRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        MilestonesGetGroupedRelationsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/milestones/{entityId}/relations/{relationName}/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Unique Users and groups.
 * Sample request:
 *
 * {
 * "fieldName": "Owner",
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Milestone",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const milestonesGetAvatars = <ThrowOnError extends boolean = false>(
    options: Options<MilestonesGetAvatarsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        MilestonesGetAvatarsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/milestones/avatars',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Unique Users and groups.
 * Sample request:
 *
 * {
 * "relation": {
 * "name": "ResourcesAndPlaceholders",
 * "filteredEntityType": "User"
 * },
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "workitem",
 * "fieldName": "name"
 * },
 * "operator": "Contains",
 * "filterValueType": "Text",
 * "values": [
 * {
 * "value": "111111"
 * }
 * ]
 * }
 * ]
 * }
 */
export const milestonesGetRelationsAvatars = <ThrowOnError extends boolean = false>(
    options: Options<MilestonesGetRelationsAvatarsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        MilestonesGetRelationsAvatarsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/milestones/{entityId}/relations/{relationName}/avatars',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Programs.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Program",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const programsGet = <ThrowOnError extends boolean = false>(
    options: Options<ProgramsGetData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<ProgramsGetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/programs',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of Programs.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Program",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Active"
 * }
 */
export const programsGetGrouped = <ThrowOnError extends boolean = false>(
    options: Options<ProgramsGetGroupedData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        ProgramsGetGroupedResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/programs/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a Program by its identifier.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "excludePermissions": true
 * }
 */
export const programsGetByIdentifier = <ThrowOnError extends boolean = false>(
    options: Options<ProgramsGetByIdentifierData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        ProgramsGetByIdentifierResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/programs/{identifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Programs by their identifiers.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Program",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "ids": ["11.222.333", "44.555.66"]
 * }
 */
export const programsGetByIds = <ThrowOnError extends boolean = false>(
    options: Options<ProgramsGetByIdsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<ProgramsGetByIdsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/programs/ids',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the number of Programs.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Program",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const programsGetCount = <ThrowOnError extends boolean = false>(
    options: Options<ProgramsGetCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<ProgramsGetCountResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/programs/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of items related to a Program.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Risk",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const programsGetRelations = <ThrowOnError extends boolean = false>(
    options: Options<ProgramsGetRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        ProgramsGetRelationsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/programs/{entityId}/relations/{relationName}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the number of items related to a Program.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Risk",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const programsGetRelationsCount = <ThrowOnError extends boolean = false>(
    options: Options<ProgramsGetRelationsCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        ProgramsGetRelationsCountResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/programs/{entityId}/relations/{relationName}/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of items related to a Program.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Risk",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Submitted"
 * }
 */
export const programsGetGroupedRelations = <ThrowOnError extends boolean = false>(
    options: Options<ProgramsGetGroupedRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        ProgramsGetGroupedRelationsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/programs/{entityId}/relations/{relationName}/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Unique Users and groups.
 * Sample request:
 *
 * {
 * "fieldName": "Owner",
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Program",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const programsGetAvatars = <ThrowOnError extends boolean = false>(
    options: Options<ProgramsGetAvatarsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        ProgramsGetAvatarsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/programs/avatars',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Unique Users and groups.
 * Sample request:
 *
 * {
 * "relation": {
 * "name": "ResourcesAndPlaceholders",
 * "filteredEntityType": "User"
 * },
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "workitem",
 * "fieldName": "name"
 * },
 * "operator": "Contains",
 * "filterValueType": "Text",
 * "values": [
 * {
 * "value": "111111"
 * }
 * ]
 * }
 * ]
 * }
 */
export const programsGetRelationsAvatars = <ThrowOnError extends boolean = false>(
    options: Options<ProgramsGetRelationsAvatarsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        ProgramsGetRelationsAvatarsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/programs/{entityId}/relations/{relationName}/avatars',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Projects.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Project",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const projectsGet = <ThrowOnError extends boolean = false>(
    options: Options<ProjectsGetData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<ProjectsGetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/projects',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of Projects.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Project",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Active"
 * }
 */
export const projectsGetGrouped = <ThrowOnError extends boolean = false>(
    options: Options<ProjectsGetGroupedData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        ProjectsGetGroupedResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/projects/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a Project by its identifier.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "excludePermissions": true
 * }
 */
export const projectsGetByIdentifier = <ThrowOnError extends boolean = false>(
    options: Options<ProjectsGetByIdentifierData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        ProjectsGetByIdentifierResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/projects/{identifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Projects by their identifiers.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Project",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "ids": ["11.222.333", "44.555.66"]
 * }
 */
export const projectsGetByIds = <ThrowOnError extends boolean = false>(
    options: Options<ProjectsGetByIdsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<ProjectsGetByIdsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/projects/ids',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the number of Projects.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Project",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const projectsGetCount = <ThrowOnError extends boolean = false>(
    options: Options<ProjectsGetCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<ProjectsGetCountResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/projects/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of items related to a Project.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Risk",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const projectsGetRelations = <ThrowOnError extends boolean = false>(
    options: Options<ProjectsGetRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        ProjectsGetRelationsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/projects/{entityId}/relations/{relationName}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the number of items related to a Project.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Risk",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const projectsGetRelationsCount = <ThrowOnError extends boolean = false>(
    options: Options<ProjectsGetRelationsCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        ProjectsGetRelationsCountResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/projects/{entityId}/relations/{relationName}/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of items related to a Project.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Risk",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Submitted"
 * }
 */
export const projectsGetGroupedRelations = <ThrowOnError extends boolean = false>(
    options: Options<ProjectsGetGroupedRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        ProjectsGetGroupedRelationsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/projects/{entityId}/relations/{relationName}/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Unique Users and groups.
 * Sample request:
 *
 * {
 * "fieldName": "ProjectManager",
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Project",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const projectsGetAvatars = <ThrowOnError extends boolean = false>(
    options: Options<ProjectsGetAvatarsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        ProjectsGetAvatarsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/projects/avatars',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Unique Users and groups.
 * Sample request:
 *
 * {
 * "relation": {
 * "name": "ResourcesAndPlaceholders",
 * "filteredEntityType": "User"
 * },
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "workitem",
 * "fieldName": "name"
 * },
 * "operator": "Contains",
 * "filterValueType": "Text",
 * "values": [
 * {
 * "value": "111111"
 * }
 * ]
 * }
 * ]
 * }
 */
export const projectsGetRelationsAvatars = <ThrowOnError extends boolean = false>(
    options: Options<ProjectsGetRelationsAvatarsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        ProjectsGetRelationsAvatarsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/projects/{entityId}/relations/{relationName}/avatars',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Tasks.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Task",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const tasksGet = <ThrowOnError extends boolean = false>(
    options: Options<TasksGetData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<TasksGetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/tasks',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of Tasks.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Task",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Active"
 * }
 */
export const tasksGetGrouped = <ThrowOnError extends boolean = false>(
    options: Options<TasksGetGroupedData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<TasksGetGroupedResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/tasks/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a Task by its identifier.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "excludePermissions": true
 * }
 */
export const tasksGetByIdentifier = <ThrowOnError extends boolean = false>(
    options: Options<TasksGetByIdentifierData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        TasksGetByIdentifierResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/tasks/{identifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Tasks by their identifiers.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Task",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "ids": ["11.222.333", "44.555.66"]
 * }
 */
export const tasksGetByIds = <ThrowOnError extends boolean = false>(
    options: Options<TasksGetByIdsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<TasksGetByIdsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/tasks/ids',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the number of Tasks.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Task",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const tasksGetCount = <ThrowOnError extends boolean = false>(
    options: Options<TasksGetCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<TasksGetCountResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/tasks/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of items related to a Task.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Risk",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true
 * }
 */
export const tasksGetRelations = <ThrowOnError extends boolean = false>(
    options: Options<TasksGetRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<TasksGetRelationsResponse, unknown, ThrowOnError>(
        {
            security: [
                {
                    name: 'Authorization',
                    type: 'apiKey',
                },
            ],
            url: '/tasks/{entityId}/relations/{relationName}',
            ...options,
            headers: {
                'Content-Type': 'application/json-patch+json',
                ...options?.headers,
            },
        },
    );
};

/**
 * Returns the number of items related to a Task.
 * Sample request:
 *
 * {
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Risk",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const tasksGetRelationsCount = <ThrowOnError extends boolean = false>(
    options: Options<TasksGetRelationsCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        TasksGetRelationsCountResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/tasks/{entityId}/relations/{relationName}/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a grouped list of items related to a Task.
 * Sample request:
 *
 * {
 * "fields": [
 * "name",
 * "createdOn",
 * "state"
 * ],
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Risk",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ],
 * "offset": 0,
 * "limit": 25,
 * "sortBy": "name",
 * "sortStrategy": "Asc",
 * "excludePermissions": true,
 * "groupBy": "state",
 * "groupName": "Submitted"
 * }
 */
export const tasksGetGroupedRelations = <ThrowOnError extends boolean = false>(
    options: Options<TasksGetGroupedRelationsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        TasksGetGroupedRelationsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/tasks/{entityId}/relations/{relationName}/grouped',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Unique Users and groups.
 * Sample request:
 *
 * {
 * "fieldName": "Owner",
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "Task",
 * "fieldName": "percentCompleted"
 * },
 * "operator": "Between",
 * "filterValueType": "Numeric",
 * "values": [
 * {
 * "value": 10
 * },
 * {
 * "value": 20
 * }
 * ]
 * }
 * ]
 * }
 */
export const tasksGetAvatars = <ThrowOnError extends boolean = false>(
    options: Options<TasksGetAvatarsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<TasksGetAvatarsResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/tasks/avatars',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns a list of Unique Users and groups.
 * Sample request:
 *
 * {
 * "relation": {
 * "name": "ResourcesAndPlaceholders",
 * "filteredEntityType": "User"
 * },
 * "dataFilters": [
 * {
 * "field": {
 * "entityType": "workitem",
 * "fieldName": "name"
 * },
 * "operator": "Contains",
 * "filterValueType": "Text",
 * "values": [
 * {
 * "value": "111111"
 * }
 * ]
 * }
 * ]
 * }
 */
export const tasksGetRelationsAvatars = <ThrowOnError extends boolean = false>(
    options: Options<TasksGetRelationsAvatarsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        TasksGetRelationsAvatarsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/tasks/{entityId}/relations/{relationName}/avatars',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

export const dataWarehouseEntityGetCount = <ThrowOnError extends boolean = false>(
    options: Options<DataWarehouseEntityGetCountData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        DataWarehouseEntityGetCountResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/dwhentity/{entityType}/count',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

export const dataWarehouseEntityGetByIds = <ThrowOnError extends boolean = false>(
    options: Options<DataWarehouseEntityGetByIdsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        DataWarehouseEntityGetByIdsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/dwhentity/{entityType}/ids',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

export const dataWarehouseEntityGetIds = <ThrowOnError extends boolean = false>(
    options: Options<DataWarehouseEntityGetIdsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        DataWarehouseEntityGetIdsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/dwhentity/{entityType}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

export const configurationGetConfiguration = <ThrowOnError extends boolean = false>(
    options: Options<ConfigurationGetConfigurationData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        ConfigurationGetConfigurationResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/dwhcoordinator/configuration',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

export const configurationUpdateConfiguration = <ThrowOnError extends boolean = false>(
    options: Options<ConfigurationUpdateConfigurationData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/dwhcoordinator/configuration',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

export const storageConnectionsTestAzureBlobConnection = <ThrowOnError extends boolean = false>(
    options: Options<StorageConnectionsTestAzureBlobConnectionData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        StorageConnectionsTestAzureBlobConnectionResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/dwhcoordinator/storageconnection/blob',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

export const triggerExportTriggerExport = <ThrowOnError extends boolean = false>(
    options?: Options<TriggerExportTriggerExportData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/dwhcoordinator/triggerexport',
        ...options,
    });
};

export const planviewAdminVerifyConnect = <ThrowOnError extends boolean = false>(
    options: Options<PlanviewAdminVerifyConnectData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/pvadmin/tenant/verifyconnect',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

export const planviewAdminGetUsers = <ThrowOnError extends boolean = false>(
    options?: Options<PlanviewAdminGetUsersData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        PlanviewAdminGetUsersResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/pvadmin/tenant/user',
        ...options,
    });
};

export const planviewAdminGet = <ThrowOnError extends boolean = false>(
    options?: Options<PlanviewAdminGetData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<PlanviewAdminGetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/pvadmin/tenant',
        ...options,
    });
};

export const planviewAdminRegister = <ThrowOnError extends boolean = false>(
    options: Options<PlanviewAdminRegisterData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/pvadmin/tenant/register',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

export const planviewTokenServiceGetPtsTokenForCoPilot = <ThrowOnError extends boolean = false>(
    options?: Options<PlanviewTokenServiceGetPtsTokenForCoPilotData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        PlanviewTokenServiceGetPtsTokenForCoPilotResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/planviewtokenservice/token/copilot',
        ...options,
    });
};

export const planviewTokenServiceGetPtsTokenInternal = <ThrowOnError extends boolean = false>(
    options?: Options<PlanviewTokenServiceGetPtsTokenInternalData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).get<
        PlanviewTokenServiceGetPtsTokenInternalResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/planviewtokenservice/token/ModernizationAuthorization',
        ...options,
    });
};

export const sentimentAnalysisServiceCalculateSentiment = <ThrowOnError extends boolean = false>(
    options: Options<SentimentAnalysisServiceCalculateSentimentData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        SentimentAnalysisServiceCalculateSentimentResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/PlatformaApps/SentimentAnalysis/CalculateSentiment',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

export const whiteboardPtsTokenForWhiteboard = <ThrowOnError extends boolean = false>(
    options: Options<WhiteboardPtsTokenForWhiteboardData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).get<
        WhiteboardPtsTokenForWhiteboardResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/whiteboard/pts-token/{type}/{identifier}',
        ...options,
    });
};

/**
 * Returns the Resources with planning data.
 * Sample request:
 *
 * {
 * "workloadSettings": {
 * "aggregationTypes": "None",
 * "loadBaseType": "ProjectAssignment",
 * "measureType": "Hours",
 * "slicePeriodType": "Day",
 * "slicesAmount": 5,
 * "sliceStartDate": "2024-04-16T10:00:00.000Z",
 * "workloadRootEntityType": "Resources"
 * },
 * "sourceEntity": {
 * "entityType": "ResourceEntity",
 * "entityKeys": [
 * {
 * "businessUnitId": "2.2.2",
 * "entityId": "1.1.1"
 * },
 * {
 * "businessUnitId": "2.2.2",
 * "entityId": "1.2.1"
 * }
 * ]
 * },
 * "offset": 0,
 * "limit": 25
 * }
 */
export const workloadGetWorkloadResources = <ThrowOnError extends boolean = false>(
    options: Options<WorkloadGetWorkloadResourcesData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        WorkloadGetWorkloadResourcesResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/workload/resources',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the Projects for a particular resource with planning data
 * Sample request:
 *
 * {
 * "workloadSettings": {
 * "aggregationTypes": "None",
 * "loadBaseType": "ProjectAssignment",
 * "measureType": "Hours",
 * "slicePeriodType": "Day",
 * "slicesAmount": 5,
 * "sliceStartDate": "2024-04-16T10:57:02.635Z",
 * "workloadRootEntityType": "Resources"
 * },
 * "resourceEntityKey": {
 * "businessUnitId": "2.2.2",
 * "entityId": "1.1.1"
 * },
 * "offset": 0,
 * "limit": 25
 * }
 */
export const workloadGetWorkloadProjects = <ThrowOnError extends boolean = false>(
    options: Options<WorkloadGetWorkloadProjectsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        WorkloadGetWorkloadProjectsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/workload/projects',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

/**
 * Returns the Tasks for a particular project with planning data
 * Sample request:
 *
 * {
 * "workloadSettings": {
 * "aggregationTypes": "None",
 * "businessUnitId": 0,
 * "loadBaseType": "ProjectAssignment",
 * "measureType": "Hours",
 * "slicePeriodType": "Day",
 * "slicesAmount": 5,
 * "sliceStartDate": "2024-04-16T10:57:02.635Z",
 * "workloadRootEntityType": "Resources"
 * },
 * "resourceEntityKey": {
 * "businessUnitId": "2.2.2",
 * "entityId": "1.1.1"
 * },
 * "offset": 0,
 * "limit": 25,
 * }
 */
export const workloadGetWorkloadTasks = <ThrowOnError extends boolean = false>(
    options: Options<WorkloadGetWorkloadTasksData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        WorkloadGetWorkloadTasksResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/workload/project/{projectIdentifier}/tasks',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

export const publicisGetReportableWorkItemsPerUser = <ThrowOnError extends boolean = false>(
    options: Options<PublicisGetReportableWorkItemsPerUserData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        PublicisGetReportableWorkItemsPerUserResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/publicis/reportableWorkItemsPerUser/{identifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

export const publicisGetReportableTasksByIds = <ThrowOnError extends boolean = false>(
    options: Options<PublicisGetReportableTasksByIdsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        PublicisGetReportableTasksByIdsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/publicis/reportableTasksByIds/{businessUnitIdentifier}',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

export const publicisGetReportableTasksByIds2 = <ThrowOnError extends boolean = false>(
    options: Options<PublicisGetReportableTasksByIds2Data, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        PublicisGetReportableTasksByIds2Response,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/publicis/reportableTasksByIds',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

export const publicisGetAssignmentsPerUsers = <ThrowOnError extends boolean = false>(
    options: Options<PublicisGetAssignmentsPerUsersData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        PublicisGetAssignmentsPerUsersResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/publicis/assignmentsPerUsers',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

export const publicisGetUsersWorkingHours = <ThrowOnError extends boolean = false>(
    options: Options<PublicisGetUsersWorkingHoursData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        PublicisGetUsersWorkingHoursResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/publicis/usersWorkingHours',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

export const publicisGetGroupMembershipLinks = <ThrowOnError extends boolean = false>(
    options: Options<PublicisGetGroupMembershipLinksData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        PublicisGetGroupMembershipLinksResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/publicis/resourceManager/groupMembershipLinks',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};

export const publicisGetResourceProjects = <ThrowOnError extends boolean = false>(
    options: Options<PublicisGetResourceProjectsData, ThrowOnError>,
) => {
    return (options.client ?? _heyApiClient).post<
        PublicisGetResourceProjectsResponse,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey',
            },
        ],
        url: '/publicis/resourceProjects',
        ...options,
        headers: {
            'Content-Type': 'application/json-patch+json',
            ...options?.headers,
        },
    });
};
