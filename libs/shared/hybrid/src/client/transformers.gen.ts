/* eslint-disable @typescript-eslint/no-explicit-any */
// This file is auto-generated by @hey-api/openapi-ts

import type {
    BugsGetResponse,
    BugsGetGroupedResponse,
    BugsGetByIdsResponse,
    BugsGetRelationsResponse,
    BugsGetGroupedRelationsResponse,
    CasesGetResponse,
    CasesGetGroupedResponse,
    CasesGetByIdsResponse,
    CasesGetRelationsResponse,
    CasesGetGroupedRelationsResponse,
    IssuesGetResponse,
    IssuesGetGroupedResponse,
    IssuesGetByIdsResponse,
    IssuesGetRelationsResponse,
    IssuesGetGroupedRelationsResponse,
    RequestsGetResponse,
    RequestsGetGroupedResponse,
    RequestsGetByIdsResponse,
    RequestsGetRelationsResponse,
    RequestsGetGroupedRelationsResponse,
    RisksGetResponse,
    RisksGetGroupedResponse,
    RisksGetByIdsResponse,
    RisksGetRelationsResponse,
    RisksGetGroupedRelationsResponse,
    GenericEntityGetResponse,
    GenericEntityGetGroupedResponse,
    GenericEntityGetByIdsResponse,
    GenericEntityGetRelationsResponse,
    GenericEntityGetGroupedRelationsResponse,
    GenericEntityGetSwimlanesResponse,
    GenericEntityGetSwimlanesByRelationIdentifierResponse,
    GenericEntityGetAvailableEntitiesResponse,
    PortfoliosGetResponse,
    PortfoliosGetGroupedResponse,
    PortfoliosGetByIdsResponse,
    PortfoliosGetRelationsResponse,
    PortfoliosGetGroupedRelationsResponse,
    JobTitlesGetResponse,
    JobTitlesGetGroupedResponse,
    JobTitlesGetByIdsResponse,
    JobTitlesGetRelationsResponse,
    JobTitlesGetGroupedRelationsResponse,
    MembersGetAllMembersResponse,
    ProfilesGetResponse,
    ProfilesGetByIdsResponse,
    SkillsGetResponse,
    SkillsGetGroupedResponse,
    SkillsGetByIdsResponse,
    SkillsGetRelationsResponse,
    SkillsGetGroupedRelationsResponse,
    UserGroupsGetResponse,
    UserGroupsGetGroupedResponse,
    UserGroupsGetByIdsResponse,
    UserGroupsGetRelationsResponse,
    UserGroupsGetGroupedRelationsResponse,
    UserGroupsGetRelatedGroupsForUserResponse,
    UsersGetResponse,
    UsersGetGroupedResponse,
    UsersGetByIdsResponse,
    UsersGetRelationsResponse,
    UsersGetGroupedRelationsResponse,
    RibbonActionsGetRibbonActionsResponse,
    RibbonActionsGetContextMenusResponse,
    MilestonesGetResponse,
    MilestonesGetGroupedResponse,
    MilestonesGetByIdsResponse,
    MilestonesGetRelationsResponse,
    MilestonesGetGroupedRelationsResponse,
    ProgramsGetResponse,
    ProgramsGetGroupedResponse,
    ProgramsGetByIdsResponse,
    ProgramsGetRelationsResponse,
    ProgramsGetGroupedRelationsResponse,
    ProjectsGetResponse,
    ProjectsGetGroupedResponse,
    ProjectsGetByIdsResponse,
    ProjectsGetRelationsResponse,
    ProjectsGetGroupedRelationsResponse,
    TasksGetResponse,
    TasksGetGroupedResponse,
    TasksGetByIdsResponse,
    TasksGetRelationsResponse,
    TasksGetGroupedRelationsResponse,
    PlanviewTokenServiceGetPtsTokenForCoPilotResponse,
    PlanviewTokenServiceGetPtsTokenInternalResponse,
    WhiteboardPtsTokenForWhiteboardResponse,
    WorkloadGetWorkloadResourcesResponse,
    WorkloadGetWorkloadProjectsResponse,
    WorkloadGetWorkloadTasksResponse,
    PublicisGetAssignmentsPerUsersResponse,
    PublicisGetUsersWorkingHoursResponse,
} from './types.gen';

const entitiesResponseSchemaResponseTransformer = (data: any) => {
    data.limit = BigInt(data.limit.toString());
    data.offset = BigInt(data.offset.toString());
    return data;
};

export const bugsGetResponseTransformer = async (data: any): Promise<BugsGetResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

const groupedEntityListOfEntityModelSchemaResponseTransformer = (data: any) => {
    data.limit = BigInt(data.limit.toString());
    data.offset = BigInt(data.offset.toString());
    data.totalRecords = BigInt(data.totalRecords.toString());
    return data;
};

const groupedEntitiesResponseSchemaResponseTransformer = (data: any) => {
    data.groupedEntities = data.groupedEntities.map((item: any) => {
        return groupedEntityListOfEntityModelSchemaResponseTransformer(item);
    });
    return data;
};

export const bugsGetGroupedResponseTransformer = async (
    data: any,
): Promise<BugsGetGroupedResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const bugsGetByIdsResponseTransformer = async (data: any): Promise<BugsGetByIdsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const bugsGetRelationsResponseTransformer = async (
    data: any,
): Promise<BugsGetRelationsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const bugsGetGroupedRelationsResponseTransformer = async (
    data: any,
): Promise<BugsGetGroupedRelationsResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const casesGetResponseTransformer = async (data: any): Promise<CasesGetResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const casesGetGroupedResponseTransformer = async (
    data: any,
): Promise<CasesGetGroupedResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const casesGetByIdsResponseTransformer = async (
    data: any,
): Promise<CasesGetByIdsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const casesGetRelationsResponseTransformer = async (
    data: any,
): Promise<CasesGetRelationsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const casesGetGroupedRelationsResponseTransformer = async (
    data: any,
): Promise<CasesGetGroupedRelationsResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const issuesGetResponseTransformer = async (data: any): Promise<IssuesGetResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const issuesGetGroupedResponseTransformer = async (
    data: any,
): Promise<IssuesGetGroupedResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const issuesGetByIdsResponseTransformer = async (
    data: any,
): Promise<IssuesGetByIdsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const issuesGetRelationsResponseTransformer = async (
    data: any,
): Promise<IssuesGetRelationsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const issuesGetGroupedRelationsResponseTransformer = async (
    data: any,
): Promise<IssuesGetGroupedRelationsResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const requestsGetResponseTransformer = async (data: any): Promise<RequestsGetResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const requestsGetGroupedResponseTransformer = async (
    data: any,
): Promise<RequestsGetGroupedResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const requestsGetByIdsResponseTransformer = async (
    data: any,
): Promise<RequestsGetByIdsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const requestsGetRelationsResponseTransformer = async (
    data: any,
): Promise<RequestsGetRelationsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const requestsGetGroupedRelationsResponseTransformer = async (
    data: any,
): Promise<RequestsGetGroupedRelationsResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const risksGetResponseTransformer = async (data: any): Promise<RisksGetResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const risksGetGroupedResponseTransformer = async (
    data: any,
): Promise<RisksGetGroupedResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const risksGetByIdsResponseTransformer = async (
    data: any,
): Promise<RisksGetByIdsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const risksGetRelationsResponseTransformer = async (
    data: any,
): Promise<RisksGetRelationsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const risksGetGroupedRelationsResponseTransformer = async (
    data: any,
): Promise<RisksGetGroupedRelationsResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const genericEntityGetResponseTransformer = async (
    data: any,
): Promise<GenericEntityGetResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const genericEntityGetGroupedResponseTransformer = async (
    data: any,
): Promise<GenericEntityGetGroupedResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const genericEntityGetByIdsResponseTransformer = async (
    data: any,
): Promise<GenericEntityGetByIdsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const genericEntityGetRelationsResponseTransformer = async (
    data: any,
): Promise<GenericEntityGetRelationsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const genericEntityGetGroupedRelationsResponseTransformer = async (
    data: any,
): Promise<GenericEntityGetGroupedRelationsResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

const swimlaneGroupedEntitiesCountSchemaResponseTransformer = (data: any) => {
    data.totalRecords = BigInt(data.totalRecords.toString());
    return data;
};

const swimlaneResponseSchemaResponseTransformer = (data: any) => {
    data.groupedEntitiesCount = data.groupedEntitiesCount.map((item: any) => {
        return swimlaneGroupedEntitiesCountSchemaResponseTransformer(item);
    });
    return data;
};

export const genericEntityGetSwimlanesResponseTransformer = async (
    data: any,
): Promise<GenericEntityGetSwimlanesResponse> => {
    data = swimlaneResponseSchemaResponseTransformer(data);
    return data;
};

export const genericEntityGetSwimlanesByRelationIdentifierResponseTransformer = async (
    data: any,
): Promise<GenericEntityGetSwimlanesByRelationIdentifierResponse> => {
    data = swimlaneResponseSchemaResponseTransformer(data);
    return data;
};

export const genericEntityGetAvailableEntitiesResponseTransformer = async (
    data: any,
): Promise<GenericEntityGetAvailableEntitiesResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const portfoliosGetResponseTransformer = async (
    data: any,
): Promise<PortfoliosGetResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const portfoliosGetGroupedResponseTransformer = async (
    data: any,
): Promise<PortfoliosGetGroupedResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const portfoliosGetByIdsResponseTransformer = async (
    data: any,
): Promise<PortfoliosGetByIdsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const portfoliosGetRelationsResponseTransformer = async (
    data: any,
): Promise<PortfoliosGetRelationsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const portfoliosGetGroupedRelationsResponseTransformer = async (
    data: any,
): Promise<PortfoliosGetGroupedRelationsResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const jobTitlesGetResponseTransformer = async (data: any): Promise<JobTitlesGetResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const jobTitlesGetGroupedResponseTransformer = async (
    data: any,
): Promise<JobTitlesGetGroupedResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const jobTitlesGetByIdsResponseTransformer = async (
    data: any,
): Promise<JobTitlesGetByIdsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const jobTitlesGetRelationsResponseTransformer = async (
    data: any,
): Promise<JobTitlesGetRelationsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const jobTitlesGetGroupedRelationsResponseTransformer = async (
    data: any,
): Promise<JobTitlesGetGroupedRelationsResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const membersGetAllMembersResponseTransformer = async (
    data: any,
): Promise<MembersGetAllMembersResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const profilesGetResponseTransformer = async (data: any): Promise<ProfilesGetResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const profilesGetByIdsResponseTransformer = async (
    data: any,
): Promise<ProfilesGetByIdsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const skillsGetResponseTransformer = async (data: any): Promise<SkillsGetResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const skillsGetGroupedResponseTransformer = async (
    data: any,
): Promise<SkillsGetGroupedResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const skillsGetByIdsResponseTransformer = async (
    data: any,
): Promise<SkillsGetByIdsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const skillsGetRelationsResponseTransformer = async (
    data: any,
): Promise<SkillsGetRelationsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const skillsGetGroupedRelationsResponseTransformer = async (
    data: any,
): Promise<SkillsGetGroupedRelationsResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const userGroupsGetResponseTransformer = async (
    data: any,
): Promise<UserGroupsGetResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const userGroupsGetGroupedResponseTransformer = async (
    data: any,
): Promise<UserGroupsGetGroupedResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const userGroupsGetByIdsResponseTransformer = async (
    data: any,
): Promise<UserGroupsGetByIdsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const userGroupsGetRelationsResponseTransformer = async (
    data: any,
): Promise<UserGroupsGetRelationsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const userGroupsGetGroupedRelationsResponseTransformer = async (
    data: any,
): Promise<UserGroupsGetGroupedRelationsResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const userGroupsGetRelatedGroupsForUserResponseTransformer = async (
    data: any,
): Promise<UserGroupsGetRelatedGroupsForUserResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const usersGetResponseTransformer = async (data: any): Promise<UsersGetResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const usersGetGroupedResponseTransformer = async (
    data: any,
): Promise<UsersGetGroupedResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const usersGetByIdsResponseTransformer = async (
    data: any,
): Promise<UsersGetByIdsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const usersGetRelationsResponseTransformer = async (
    data: any,
): Promise<UsersGetRelationsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const usersGetGroupedRelationsResponseTransformer = async (
    data: any,
): Promise<UsersGetGroupedRelationsResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

const iRibbonActionItemSchemaResponseTransformer = (data: any) => {
    if (data.childActions) {
        data.childActions = data.childActions.map((item: any) => {
            return iRibbonActionItemSchemaResponseTransformer(item);
        });
    }
    return data;
};

const ribbonActionsResponseSchemaResponseTransformer = (data: any) => {
    if (data.actions) {
        data.actions = data.actions.map((item: any) => {
            return iRibbonActionItemSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const ribbonActionsGetRibbonActionsResponseTransformer = async (
    data: any,
): Promise<RibbonActionsGetRibbonActionsResponse> => {
    data = ribbonActionsResponseSchemaResponseTransformer(data);
    return data;
};

const contextMenuSchemaResponseTransformer = (data: any) => {
    if (data.subMenus) {
        data.subMenus = data.subMenus.map((item: any) => {
            return contextMenuSchemaResponseTransformer(item);
        });
    }
    return data;
};

const contextMenusResponseSchemaResponseTransformer = (data: any) => {
    data.menus = data.menus.map((item: any) => {
        return contextMenuSchemaResponseTransformer(item);
    });
    return data;
};

export const ribbonActionsGetContextMenusResponseTransformer = async (
    data: any,
): Promise<RibbonActionsGetContextMenusResponse> => {
    data = contextMenusResponseSchemaResponseTransformer(data);
    return data;
};

export const milestonesGetResponseTransformer = async (
    data: any,
): Promise<MilestonesGetResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const milestonesGetGroupedResponseTransformer = async (
    data: any,
): Promise<MilestonesGetGroupedResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const milestonesGetByIdsResponseTransformer = async (
    data: any,
): Promise<MilestonesGetByIdsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const milestonesGetRelationsResponseTransformer = async (
    data: any,
): Promise<MilestonesGetRelationsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const milestonesGetGroupedRelationsResponseTransformer = async (
    data: any,
): Promise<MilestonesGetGroupedRelationsResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const programsGetResponseTransformer = async (data: any): Promise<ProgramsGetResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const programsGetGroupedResponseTransformer = async (
    data: any,
): Promise<ProgramsGetGroupedResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const programsGetByIdsResponseTransformer = async (
    data: any,
): Promise<ProgramsGetByIdsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const programsGetRelationsResponseTransformer = async (
    data: any,
): Promise<ProgramsGetRelationsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const programsGetGroupedRelationsResponseTransformer = async (
    data: any,
): Promise<ProgramsGetGroupedRelationsResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const projectsGetResponseTransformer = async (data: any): Promise<ProjectsGetResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const projectsGetGroupedResponseTransformer = async (
    data: any,
): Promise<ProjectsGetGroupedResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const projectsGetByIdsResponseTransformer = async (
    data: any,
): Promise<ProjectsGetByIdsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const projectsGetRelationsResponseTransformer = async (
    data: any,
): Promise<ProjectsGetRelationsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const projectsGetGroupedRelationsResponseTransformer = async (
    data: any,
): Promise<ProjectsGetGroupedRelationsResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const tasksGetResponseTransformer = async (data: any): Promise<TasksGetResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const tasksGetGroupedResponseTransformer = async (
    data: any,
): Promise<TasksGetGroupedResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const tasksGetByIdsResponseTransformer = async (
    data: any,
): Promise<TasksGetByIdsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const tasksGetRelationsResponseTransformer = async (
    data: any,
): Promise<TasksGetRelationsResponse> => {
    data = entitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const tasksGetGroupedRelationsResponseTransformer = async (
    data: any,
): Promise<TasksGetGroupedRelationsResponse> => {
    data = groupedEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

const getTokenResponseSchemaResponseTransformer = (data: any) => {
    data.expiresAt = new Date(data.expiresAt);
    return data;
};

export const planviewTokenServiceGetPtsTokenForCoPilotResponseTransformer = async (
    data: any,
): Promise<PlanviewTokenServiceGetPtsTokenForCoPilotResponse> => {
    data = getTokenResponseSchemaResponseTransformer(data);
    return data;
};

export const planviewTokenServiceGetPtsTokenInternalResponseTransformer = async (
    data: any,
): Promise<PlanviewTokenServiceGetPtsTokenInternalResponse> => {
    data = getTokenResponseSchemaResponseTransformer(data);
    return data;
};

const whiteboardTokenResponseSchemaResponseTransformer = (data: any) => {
    data.expiresAt = new Date(data.expiresAt);
    return data;
};

export const whiteboardPtsTokenForWhiteboardResponseTransformer = async (
    data: any,
): Promise<WhiteboardPtsTokenForWhiteboardResponse> => {
    data = whiteboardTokenResponseSchemaResponseTransformer(data);
    return data;
};

const workloadEntitiesResponseSchemaResponseTransformer = (data: any) => {
    data.limit = BigInt(data.limit.toString());
    data.offset = BigInt(data.offset.toString());
    return data;
};

export const workloadGetWorkloadResourcesResponseTransformer = async (
    data: any,
): Promise<WorkloadGetWorkloadResourcesResponse> => {
    data = workloadEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const workloadGetWorkloadProjectsResponseTransformer = async (
    data: any,
): Promise<WorkloadGetWorkloadProjectsResponse> => {
    data = workloadEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

export const workloadGetWorkloadTasksResponseTransformer = async (
    data: any,
): Promise<WorkloadGetWorkloadTasksResponse> => {
    data = workloadEntitiesResponseSchemaResponseTransformer(data);
    return data;
};

const workByDayAssignmentSchemaResponseTransformer = (data: any) => {
    data.date = new Date(data.date);
    return data;
};

const rlTimePhaseDailyAssignmentSchemaResponseTransformer = (data: any) => {
    data.date = new Date(data.date);
    return data;
};

const assignedWorkSchemaResponseTransformer = (data: any) => {
    data.workByDay = data.workByDay.map((item: any) => {
        return workByDayAssignmentSchemaResponseTransformer(item);
    });
    data.rlTimePhaseDaily = data.rlTimePhaseDaily.map((item: any) => {
        return rlTimePhaseDailyAssignmentSchemaResponseTransformer(item);
    });
    return data;
};

const getAssignmentsPerUsersResponseSchemaResponseTransformer = (data: any) => {
    data.assignedWork = assignedWorkSchemaResponseTransformer(data.assignedWork);
    return data;
};

export const publicisGetAssignmentsPerUsersResponseTransformer = async (
    data: any,
): Promise<PublicisGetAssignmentsPerUsersResponse> => {
    data = getAssignmentsPerUsersResponseSchemaResponseTransformer(data);
    return data;
};

const userWorkingHoursSchemaResponseTransformer = (data: any) => {
    data.date = new Date(data.date);
    return data;
};

const usersWorkingHoursCalendarExceptSchemaResponseTransformer = (data: any) => {
    data.startDate = new Date(data.startDate);
    data.endDate = new Date(data.endDate);
    return data;
};

const getUsersWorkingHoursResponseSchemaResponseTransformer = (data: any) => {
    data.usersWorkingHours = data.usersWorkingHours.map((item: any) => {
        return userWorkingHoursSchemaResponseTransformer(item);
    });
    data.calendarExceptions = data.calendarExceptions.map((item: any) => {
        return usersWorkingHoursCalendarExceptSchemaResponseTransformer(item);
    });
    return data;
};

export const publicisGetUsersWorkingHoursResponseTransformer = async (
    data: any,
): Promise<PublicisGetUsersWorkingHoursResponse> => {
    data = getUsersWorkingHoursResponseSchemaResponseTransformer(data);
    return data;
};
