{
    "x-generator": "NSwag v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))",
    "swagger": "2.0",
    "info": {
        "title": "Clarizen.HybridSolutions.Host API",
        "version": "1.0.0"
    },
    "host": "qaapp1.clarizen.com",
    "basePath": "/HybridSolutions",
    "schemes": ["https"],
    "paths": {
        "/bugs": {
            "post": {
                "tags": ["Bugs"],
                "summary": "Returns a list of Bugs.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Bug\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"title\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "Bugs_Get",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/bugs/grouped": {
            "post": {
                "tags": ["Bugs"],
                "summary": "Returns a grouped list of Bugs.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Bug\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"title\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Submitted\"\n    }",
                "operationId": "Bugs_GetGrouped",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/bugs/{identifier}": {
            "post": {
                "tags": ["Bugs"],
                "summary": "Returns a Bug by its identifier.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"excludePermissions\": true\n    }",
                "operationId": "Bugs_GetByIdentifier",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "identifier",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/bugs/ids": {
            "post": {
                "tags": ["Bugs"],
                "summary": "Returns a list of Bugs by their identifiers.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Bug\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"title\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"ids\": [\"11.222.333\", \"44.555.66\"]\n    }",
                "operationId": "Bugs_GetByIds",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesByIdsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/bugs/count": {
            "post": {
                "tags": ["Bugs"],
                "summary": "Returns the number of Bugs.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Bug\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Bugs_GetCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/bugs/{entityId}/relations/{relationName}": {
            "post": {
                "tags": ["Bugs"],
                "summary": "Returns a list of items related to a Bug.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"WorkItem\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"title\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "Bugs_GetRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RelatedEntitiesRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/bugs/{entityId}/relations/{relationName}/count": {
            "post": {
                "tags": ["Bugs"],
                "summary": "Returns the number of items related to a Bug.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"WorkItem\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Bugs_GetRelationsCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/bugs/{entityId}/relations/{relationName}/grouped": {
            "post": {
                "tags": ["Bugs"],
                "summary": "Returns a grouped list of items related to a Bug.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"WorkItem\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"title\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Active\"\n    }",
                "operationId": "Bugs_GetGroupedRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedRelationsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/bugs/avatars": {
            "post": {
                "tags": ["Bugs"],
                "summary": "Returns a list of Unique Users and groups.",
                "description": "Sample request:\n            \n    {\n        \"fieldName\": \"Owner\",\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Bug\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Bugs_GetAvatars",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AvatarsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/AvatarsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/bugs/{entityId}/relations/{relationName}/avatars": {
            "post": {
                "tags": ["Bugs"],
                "summary": "Returns a list of Unique Users and groups.",
                "description": "Sample request:\n            \n    {\n    \"relation\": {\n        \"name\": \"ResourcesAndPlaceholders\",\n        \"filteredEntityType\": \"User\"\n    },\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"case\",\n                    \"fieldName\": \"title\"\n                },\n                \"operator\": \"Contains\",\n                \"filterValueType\": \"Text\",\n                \"values\": [\n                    {\n                        \"value\": \"111111\"\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Bugs_GetRelationsAvatars",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AvatarsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/AvatarsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/cases": {
            "post": {
                "tags": ["Cases"],
                "summary": "Returns a list of Cases.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Case\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"title\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "Cases_Get",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/cases/grouped": {
            "post": {
                "tags": ["Cases"],
                "summary": "Returns a grouped list of Cases.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Case\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"title\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Submitted\"\n    }",
                "operationId": "Cases_GetGrouped",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/cases/{identifier}": {
            "post": {
                "tags": ["Cases"],
                "summary": "Returns a Case by its identifier.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Case\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"title\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "Cases_GetByIdentifier",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "identifier",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/cases/ids": {
            "post": {
                "tags": ["Cases"],
                "summary": "Returns a list of Cases by their identifiers.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Case\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"title\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"ids\": [\"11.222.333\", \"44.555.66\"]\n    }",
                "operationId": "Cases_GetByIds",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesByIdsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/cases/count": {
            "post": {
                "tags": ["Cases"],
                "summary": "Returns the number of Cases.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Case\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Cases_GetCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/cases/{entityId}/relations/{relationName}": {
            "post": {
                "tags": ["Cases"],
                "summary": "Returns a list of items related to a Case.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"WorkItem\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"title\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "Cases_GetRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RelatedEntitiesRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/cases/{entityId}/relations/{relationName}/count": {
            "post": {
                "tags": ["Cases"],
                "summary": "Returns the number of items related to a Case.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"WorkItem\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Cases_GetRelationsCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/cases/{entityId}/relations/{relationName}/grouped": {
            "post": {
                "tags": ["Cases"],
                "summary": "Returns a grouped list of items related to a Case.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"WorkItem\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"title\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Active\"\n    }",
                "operationId": "Cases_GetGroupedRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedRelationsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/cases/avatars": {
            "post": {
                "tags": ["Cases"],
                "summary": "Returns a list of Unique Users and groups.",
                "description": "Sample request:\n            \n    {\n        \"fieldName\": \"Owner\",\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Case\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Cases_GetAvatars",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AvatarsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/AvatarsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/cases/{entityId}/relations/{relationName}/avatars": {
            "post": {
                "tags": ["Cases"],
                "summary": "Returns a list of Unique Users and groups.",
                "description": "Sample request:\n            \n    {\n    \"relation\": {\n        \"name\": \"ResourcesAndPlaceholders\",\n        \"filteredEntityType\": \"User\"\n    },\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"case\",\n                    \"fieldName\": \"title\"\n                },\n                \"operator\": \"Contains\",\n                \"filterValueType\": \"Text\",\n                \"values\": [\n                    {\n                        \"value\": \"111111\"\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Cases_GetRelationsAvatars",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AvatarsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/AvatarsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/issues": {
            "post": {
                "tags": ["Issues"],
                "summary": "Returns a list of Issues.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Issue\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"title\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "Issues_Get",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/issues/grouped": {
            "post": {
                "tags": ["Issues"],
                "summary": "Returns a grouped list of Issues.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Issue\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"title\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Submitted\"\n    }",
                "operationId": "Issues_GetGrouped",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/issues/{identifier}": {
            "post": {
                "tags": ["Issues"],
                "summary": "Returns an Issue by its identifier.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"excludePermissions\": true\n    }",
                "operationId": "Issues_GetByIdentifier",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "identifier",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/issues/ids": {
            "post": {
                "tags": ["Issues"],
                "summary": "Returns a list of Issues by their identifiers.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Issue\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"title\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"ids\": [\"11.222.333\", \"44.555.66\"]\n    }",
                "operationId": "Issues_GetByIds",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesByIdsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/issues/count": {
            "post": {
                "tags": ["Issues"],
                "summary": "Returns the number of Issues.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Issue\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Issues_GetCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/issues/{entityId}/relations/{relationName}": {
            "post": {
                "tags": ["Issues"],
                "summary": "Returns a list of items related to an Issue.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"WorkItem\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"title\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "Issues_GetRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RelatedEntitiesRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/issues/{entityId}/relations/{relationName}/count": {
            "post": {
                "tags": ["Issues"],
                "summary": "Returns the number of items related to an Issue.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"WorkItem\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Issues_GetRelationsCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/issues/{entityId}/relations/{relationName}/grouped": {
            "post": {
                "tags": ["Issues"],
                "summary": "Returns a grouped list of items related to an Issue.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"WorkItem\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"title\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Active\"\n    }",
                "operationId": "Issues_GetGroupedRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedRelationsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/issues/avatars": {
            "post": {
                "tags": ["Issues"],
                "summary": "Returns a list of Unique Users and groups.",
                "description": "Sample request:\n            \n    {\n        \"fieldName\": \"Owner\",\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Issue\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Issues_GetAvatars",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AvatarsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/AvatarsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/issues/{entityId}/relations/{relationName}/avatars": {
            "post": {
                "tags": ["Issues"],
                "summary": "Returns a list of Unique Users and groups.",
                "description": "Sample request:\n            \n    {\n    \"relation\": {\n        \"name\": \"ResourcesAndPlaceholders\",\n        \"filteredEntityType\": \"User\"\n    },\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"case\",\n                    \"fieldName\": \"title\"\n                },\n                \"operator\": \"Contains\",\n                \"filterValueType\": \"Text\",\n                \"values\": [\n                    {\n                        \"value\": \"111111\"\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Issues_GetRelationsAvatars",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AvatarsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/AvatarsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/requests": {
            "post": {
                "tags": ["Requests"],
                "summary": "Returns a list of Requests (EnhancementRequest).",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"EnhancementRequest\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"itemType\": \"Numeric\",\n                        \"value\": 10\n                    },\n                    {\n                        \"itemType\": \"Numeric\",\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"title\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "Requests_Get",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/requests/grouped": {
            "post": {
                "tags": ["Requests"],
                "summary": "Returns a grouped list of Requests (EnhancementRequest).",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"EnhancementRequest\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"title\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Submitted\"\n    }",
                "operationId": "Requests_GetGrouped",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/requests/{identifier}": {
            "post": {
                "tags": ["Requests"],
                "summary": "Returns a Request (EnhancementRequest) by its identifier.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"excludePermissions\": true\n    }",
                "operationId": "Requests_GetByIdentifier",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "identifier",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/requests/ids": {
            "post": {
                "tags": ["Requests"],
                "summary": "Returns a list of Requests (EnhancementRequest) by their identifiers.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"EnhancementRequest\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"title\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"ids\": [\"11.222.333\", \"44.555.66\"]\n    }",
                "operationId": "Requests_GetByIds",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesByIdsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/requests/count": {
            "post": {
                "tags": ["Requests"],
                "summary": "Returns the number of Requests (EnhancementRequest).",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"EnhancementRequest\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Requests_GetCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/requests/{entityId}/relations/{relationName}": {
            "post": {
                "tags": ["Requests"],
                "summary": "Returns a list of items related to a Request (EnhancementRequest).",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"WorkItem\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"title\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "Requests_GetRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RelatedEntitiesRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/requests/{entityId}/relations/{relationName}/count": {
            "post": {
                "tags": ["Requests"],
                "summary": "Returns the number of items related to a Request (EnhancementRequest).",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"WorkItem\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Requests_GetRelationsCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/requests/{entityId}/relations/{relationName}/grouped": {
            "post": {
                "tags": ["Requests"],
                "summary": "Returns a grouped list of items related to a Request (EnhancementRequest).",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"WorkItem\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"title\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Active\"\n    }",
                "operationId": "Requests_GetGroupedRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedRelationsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/requests/avatars": {
            "post": {
                "tags": ["Requests"],
                "summary": "Returns a list of Unique Users and groups.",
                "description": "Sample request:\n            \n    {\n        \"fieldName\": \"Owner\",\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"EnhancementRequest\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Requests_GetAvatars",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AvatarsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/AvatarsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/requests/{entityId}/relations/{relationName}/avatars": {
            "post": {
                "tags": ["Requests"],
                "summary": "Returns a list of Unique Users and groups.",
                "description": "Sample request:\n            \n    {\n    \"relation\": {\n        \"name\": \"ResourcesAndPlaceholders\",\n        \"filteredEntityType\": \"User\"\n    },\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"case\",\n                    \"fieldName\": \"title\"\n                },\n                \"operator\": \"Contains\",\n                \"filterValueType\": \"Text\",\n                \"values\": [\n                    {\n                        \"value\": \"111111\"\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Requests_GetRelationsAvatars",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AvatarsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/AvatarsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/risks": {
            "post": {
                "tags": ["Risks"],
                "summary": "Returns a list of Risks.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Risk\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"title\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "Risks_Get",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/risks/grouped": {
            "post": {
                "tags": ["Risks"],
                "summary": "Returns a grouped list of Risks.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Risk\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"title\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Submitted\"\n    }",
                "operationId": "Risks_GetGrouped",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/risks/{identifier}": {
            "post": {
                "tags": ["Risks"],
                "summary": "Returns a Risk by its identifier.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"excludePermissions\": true\n    }",
                "operationId": "Risks_GetByIdentifier",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "identifier",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/risks/ids": {
            "post": {
                "tags": ["Risks"],
                "summary": "Returns a list of Risks by their identifiers.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Risk\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"title\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"ids\": [\"11.222.333\", \"44.555.66\"]\n    }",
                "operationId": "Risks_GetByIds",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesByIdsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/risks/count": {
            "post": {
                "tags": ["Risks"],
                "summary": "Returns the number of Risks.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Risk\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Risks_GetCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/risks/{entityId}/relations/{relationName}": {
            "post": {
                "tags": ["Risks"],
                "summary": "Returns a list of items related to a Risk.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"WorkItem\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"title\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "Risks_GetRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RelatedEntitiesRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/risks/{entityId}/relations/{relationName}/count": {
            "post": {
                "tags": ["Risks"],
                "summary": "Returns the number of items related to a Risk.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"WorkItem\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Risks_GetRelationsCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/risks/{entityId}/relations/{relationName}/grouped": {
            "post": {
                "tags": ["Risks"],
                "summary": "Returns a grouped list of items related to a Risk.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"title\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"WorkItem\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"title\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Active\"\n    }",
                "operationId": "Risks_GetGroupedRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedRelationsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/risks/avatars": {
            "post": {
                "tags": ["Risks"],
                "summary": "Returns a list of Unique Users and groups.",
                "description": "Sample request:\n            \n    {\n        \"fieldName\": \"Onwer\",\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Risk\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Risks_GetAvatars",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AvatarsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/AvatarsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/risks/{entityId}/relations/{relationName}/avatars": {
            "post": {
                "tags": ["Risks"],
                "summary": "Returns a list of Unique Users and groups.",
                "description": "Sample request:\n            \n    {\n    \"relation\": {\n        \"name\": \"ResourcesAndPlaceholders\",\n        \"filteredEntityType\": \"User\"\n    },\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"case\",\n                    \"fieldName\": \"title\"\n                },\n                \"operator\": \"Contains\",\n                \"filterValueType\": \"Text\",\n                \"values\": [\n                    {\n                        \"value\": \"111111\"\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Risks_GetRelationsAvatars",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AvatarsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/AvatarsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/entity/{entityType}": {
            "post": {
                "tags": ["GenericEntity"],
                "summary": "Returns a list of entities.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"entityType\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"WorkItem\",\n                    \"fieldName\": \"Name\"\n                },\n                \"operator\": \"Contains\",\n                \"filterValueType\": \"Text\",\n                \"values\": [\n                    {\n                        \"value\": \"ABC\"\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "GenericEntity_Get",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "type": "string",
                        "name": "entityType",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/entity/{entityType}/grouped": {
            "post": {
                "tags": ["GenericEntity"],
                "summary": "Returns a grouped list of entities.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"entityType\"\n        ],\n        \"dataFilters\": [\n             {\n                \"field\": {\n                    \"entityType\": \"Portfolio\",\n                    \"fieldName\": \"InvestmentYear\"\n                },\n                \"operator\": \"GreaterThan\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 2000\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"entityType\",\n        \"groupName\": \"Active\"\n    }",
                "operationId": "GenericEntity_GetGrouped",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "type": "string",
                        "name": "entityType",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/entity/{entityType}/{identifier}": {
            "post": {
                "tags": ["GenericEntity"],
                "summary": "Returns an entity by its identifier.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"fieldName1\",\n            \"fieldName2\",\n        ],\n        \"relations\": [\n            \"relationName\n        ],\n        \"excludePermissions\": true\n    }",
                "operationId": "GenericEntity_GetByIdentifier",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "type": "string",
                        "name": "entityType",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "identifier",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/entity/{entityType}/ids": {
            "post": {
                "tags": ["GenericEntity"],
                "summary": "Returns a list of entities by their identifiers.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"PortfolioState\"\n        ],\n        \"dataFilters\": [\n             {\n                \"field\": {\n                    \"entityType\": \"Portfolio\",\n                    \"fieldName\": \"InvestmentYear\"\n                },\n                \"operator\": \"GreaterThan\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 2000\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"ids\": [\"11.222.333\", \"44.555.66\"]\n    }",
                "operationId": "GenericEntity_GetByIds",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "type": "string",
                        "name": "entityType",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesByIdsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/entity/{entityType}/count": {
            "post": {
                "tags": ["GenericEntity"],
                "summary": "Returns the number of entities.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n             {\n                \"field\": {\n                    \"entityType\": \"Portfolio\",\n                    \"fieldName\": \"InvestmentYear\"\n                },\n                \"operator\": \"GreaterThan\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 2000\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "GenericEntity_GetCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "type": "string",
                        "name": "entityType",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/entity/{entityType}/{entityId}/relations/{relationName}": {
            "post": {
                "tags": ["GenericEntity"],
                "summary": "Returns a list of items related to the entity.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Project\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "GenericEntity_GetRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "type": "string",
                        "name": "entityType",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RelatedEntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/entity/{entityType}/{entityId}/relations/{relationName}/count": {
            "post": {
                "tags": ["GenericEntity"],
                "summary": "Returns the number of items related to the entity.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Project\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "GenericEntity_GetRelationsCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "type": "string",
                        "name": "entityType",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/entity/{entityType}/{entityId}/relations/{relationName}/grouped": {
            "post": {
                "tags": ["GenericEntity"],
                "summary": "Returns a grouped list of items related to the entity.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Project\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Active\"\n    }",
                "operationId": "GenericEntity_GetGroupedRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "type": "string",
                        "name": "entityType",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedRelationsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/entity/{entityId}/picklist/{fieldName}": {
            "get": {
                "tags": ["GenericEntity"],
                "summary": "Returns picklist options honoring dependent field value.",
                "operationId": "GenericEntity_GetEntityPicklist",
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "description": "InternalId reference for which picklist is needed. Passing ExternalId will respond with 400 bad request.",
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "fieldName",
                        "in": "path",
                        "required": true,
                        "description": "Name of the field on given entity.",
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/PicklistData"
                        }
                    },
                    "400": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ProblemDetails"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/entity/{entityType}/swimlanes/{swimlaneRelationName}": {
            "post": {
                "tags": ["GenericEntity"],
                "summary": "Returns distinct list of related items with global aggregate for group by field.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"entityType\"\n        ],\n        \"dataFilters\": [],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"entityType\",\n        \"groupName\": \"Active\"\n    }",
                "operationId": "GenericEntity_GetSwimlanes",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "type": "string",
                        "name": "entityType",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "swimlaneRelationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/SwimlaneResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/entity/{entityType}/avatars": {
            "post": {
                "tags": ["GenericEntity"],
                "summary": "Returns a list of Unique Users and groups.",
                "description": "Sample request:\n            \n    {\n        \"fieldName\": \"ProjectManager\",\n        \"dataFilters\": []\n    }",
                "operationId": "GenericEntity_GetAvatars",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "type": "string",
                        "name": "entityType",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AvatarsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/AvatarsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/entity/{entityType}/{entityId}/relations/{relationName}/avatars": {
            "post": {
                "tags": ["GenericEntity"],
                "summary": "Returns a list of Unique Users and groups.",
                "description": "Sample request:\n            \n    {\n    \"relation\": {\n        \"name\": \"ResourcesAndPlaceholders\",\n        \"filteredEntityType\": \"User\"\n    },\n        \"dataFilters\": []\n    }",
                "operationId": "GenericEntity_GetRelationAvatars",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "type": "string",
                        "name": "entityType",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AvatarsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/AvatarsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/entity/{entityType}/{entityId}/custom-panels": {
            "get": {
                "tags": ["GenericEntity"],
                "summary": "Retrieves list of custom panel associated with Entity",
                "operationId": "GenericEntity_GetCustomPanelByIdentifier",
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "type": "string",
                        "name": "entityType",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CustomPanel"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/entity/{entityType}/{entityId}/relations/{relationName}/swimlanes/{swimlaneRelationName}": {
            "post": {
                "tags": ["GenericEntity"],
                "operationId": "GenericEntity_GetSwimlanesByRelationIdentifier",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "type": "string",
                        "name": "entityType",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "swimlaneRelationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedRelationsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/SwimlaneResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/entity/{entityType}/{entityId}/available/{linkableRelationName}": {
            "post": {
                "tags": ["GenericEntity"],
                "operationId": "GenericEntity_GetAvailableEntities",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityType",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "linkableRelationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/metadata/picklists": {
            "post": {
                "tags": ["Metadata"],
                "summary": "Returns picklist options for specific entity type.",
                "description": "Sample request:\n            \n    {\n        \"entityType\": \"Task\",\n        \"propertyNames\": [\n            \"State\", \n            \"Phase\"\n        ]\n    }",
                "operationId": "Metadata_GetPicklist",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MetadataRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PicklistData"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/metadata/fields": {
            "post": {
                "tags": ["Metadata"],
                "summary": "Returns fields and relations details for specific entity.",
                "description": "Sample request:\n            \n    {\n        \"entityType\": \"Task\",\n        \"propertyNames\": [\n            \"State\", \n            \"Phase\"\n        ],\n        \"relationNames\": [\n            \"RelatedRisks\"\n        ],\n        \"includeFields\": true,\n        \"includeRelations\": true\n    }",
                "operationId": "Metadata_GetFields",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MetadataEntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FieldsResponse"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/metadata/systemsettings": {
            "get": {
                "tags": ["Metadata"],
                "summary": "Returns basic system settings.",
                "operationId": "Metadata_GetSystemSettings",
                "produces": ["application/json", "text/json"],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/SystemSettingsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/metadata/organizationsettings": {
            "get": {
                "tags": ["Metadata"],
                "summary": "Returns general organization settings.",
                "operationId": "Metadata_GetOrganizationSettings",
                "produces": ["application/json", "text/json"],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/OrganizationSettingsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/metadata/describeEntities": {
            "post": {
                "tags": ["Metadata"],
                "summary": "Returns information about the entity types in your organization.",
                "operationId": "Metadata_GetEntitiesDescription",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DescribeEntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/DescribeEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/metadata/availablefields": {
            "post": {
                "tags": ["Metadata"],
                "summary": "Returns available fields for a specific entity and it's children.",
                "operationId": "Metadata_GetAvailableFields",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AvailableFieldsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FieldsResponse"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/metadata/relationfields": {
            "post": {
                "tags": ["Metadata"],
                "summary": "Returns available fields for a specific realtion.",
                "operationId": "Metadata_GetRelationViewerFields",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "relationFieldsRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RelationFieldsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RelationFieldsResponse"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/portfolio": {
            "post": {
                "tags": ["Portfolios"],
                "summary": "Returns a list of Portfolios.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"PortfolioState\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Portfolio\",\n                    \"fieldName\": \"InvestmentYear\"\n                },\n                \"operator\": \"GreaterThan\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 2000\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "Portfolios_Get",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/portfolio/grouped": {
            "post": {
                "tags": ["Portfolios"],
                "summary": "Returns a grouped list of Portfolios.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"PortfolioState\"\n        ],\n        \"dataFilters\": [\n             {\n                \"field\": {\n                    \"entityType\": \"Portfolio\",\n                    \"fieldName\": \"InvestmentYear\"\n                },\n                \"operator\": \"GreaterThan\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 2000\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"PortfolioState\",\n        \"groupName\": \"Active\"\n    }",
                "operationId": "Portfolios_GetGrouped",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/portfolio/{identifier}": {
            "post": {
                "tags": ["Portfolios"],
                "summary": "Returns a Portfolio by its identifier.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"PortfolioState\"\n        ],\n        \"excludePermissions\": true\n    }",
                "operationId": "Portfolios_GetByIdentifier",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "identifier",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/portfolio/ids": {
            "post": {
                "tags": ["Portfolios"],
                "summary": "Returns a list of Portfolios by their identifiers.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"PortfolioState\"\n        ],\n        \"dataFilters\": [\n             {\n                \"field\": {\n                    \"entityType\": \"Portfolio\",\n                    \"fieldName\": \"InvestmentYear\"\n                },\n                \"operator\": \"GreaterThan\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 2000\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"ids\": [\"11.222.333\", \"44.555.66\"]\n    }",
                "operationId": "Portfolios_GetByIds",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesByIdsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/portfolio/count": {
            "post": {
                "tags": ["Portfolios"],
                "summary": "Returns the number of Portfolios.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n             {\n                \"field\": {\n                    \"entityType\": \"Portfolio\",\n                    \"fieldName\": \"InvestmentYear\"\n                },\n                \"operator\": \"GreaterThan\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 2000\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Portfolios_GetCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/portfolio/{entityId}/relations/{relationName}": {
            "post": {
                "tags": ["Portfolios"],
                "summary": "Returns a list of items related to a Portfolio.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Project\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "Portfolios_GetRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RelatedEntitiesRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/portfolio/{entityId}/relations/{relationName}/count": {
            "post": {
                "tags": ["Portfolios"],
                "summary": "Returns the number of items related to a Portfolio.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Project\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Portfolios_GetRelationsCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/portfolio/{entityId}/relations/{relationName}/grouped": {
            "post": {
                "tags": ["Portfolios"],
                "summary": "Returns a grouped list of items related to a Portfolio.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Project\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Active\"\n    }",
                "operationId": "Portfolios_GetGroupedRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedRelationsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/portfolio/avatars": {
            "post": {
                "tags": ["Portfolios"],
                "summary": "Returns a list of Unique Users and groups.",
                "description": "Sample request:\n            \n    {\n        \"fieldName\": \"Owner\",\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Portfolio\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Portfolios_GetAvatars",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AvatarsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/AvatarsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/portfolio/{entityId}/relations/{relationName}/avatars": {
            "post": {
                "tags": ["Portfolios"],
                "summary": "Returns a list of Unique Users and groups.",
                "description": "Sample request:\n            \n    {\n    \"relation\": {\n        \"name\": \"ResourcesAndPlaceholders\",\n        \"filteredEntityType\": \"User\"\n    },\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Portfolio\",\n                    \"fieldName\": \"name\"\n                },\n                \"operator\": \"Contains\",\n                \"filterValueType\": \"Text\",\n                \"values\": [\n                    {\n                        \"value\": \"111111\"\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Portfolios_GetRelationsAvatars",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AvatarsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/AvatarsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/propertycardlayout/{entityType}": {
            "get": {
                "tags": ["PropertyCardLayout"],
                "summary": "Returns a Property Card layout for the specific entity type.",
                "operationId": "PropertyCardLayout_GetPropertyCardLayout",
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "type": "string",
                        "name": "entityType",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/PropertyCardLayoutResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/propertycardlayout/entity/{entityId}": {
            "get": {
                "tags": ["PropertyCardLayout"],
                "summary": "Returns a Property Card layout for the specific internal id of the entity.",
                "operationId": "PropertyCardLayout_GetPropertyCardLayoutByEntityId",
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/PropertyCardLayoutResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/jobtitles/count": {
            "post": {
                "tags": ["JobTitles"],
                "summary": "Returns the number of Job Titles.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"JobTitle\",\n                    \"fieldName\": \"RevenueRegularRate\"\n                },\n                \"operator\": \"GreaterThan\",\n                \"filterValueType\": \"NumericWithUnit\",\n                \"values\": [\n                    {\n                        \"value\":{\n                            \"amount\": 5,\n                            \"unit\": \"USD\"\n                        }\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "JobTitles_GetCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/jobtitles/{entityId}/relations/{relationName}/count": {
            "post": {
                "tags": ["JobTitles"],
                "summary": "Returns the number of items related to a Job Title.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Project\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "JobTitles_GetRelationsCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/jobtitles": {
            "post": {
                "tags": ["JobTitles"],
                "summary": "Returns a list of Job Titles.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"JobTitle\",\n                    \"fieldName\": \"RevenueRegularRate\"\n                },\n                \"operator\": \"GreaterThan\",\n                \"filterValueType\": \"NumericWithUnit\",\n                \"values\": [\n                    {\n                        \"value\":{\n                            \"amount\": 5,\n                            \"unit\": \"USD\"\n                        }\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "JobTitles_Get",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/jobtitles/grouped": {
            "post": {
                "tags": ["JobTitles"],
                "summary": "Returns a grouped list of Job Titles.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"JobTitle\",\n                    \"fieldName\": \"RevenueRegularRate\"\n                },\n                \"operator\": \"GreaterThan\",\n                \"filterValueType\": \"NumericWithUnit\",\n                \"values\": [\n                    {\n                        \"value\":{\n                            \"amount\": 5,\n                            \"unit\": \"USD\"\n                        }\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Active\"\n    }",
                "operationId": "JobTitles_GetGrouped",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/jobtitles/{identifier}": {
            "post": {
                "tags": ["JobTitles"],
                "summary": "Returns a Job Title by its identifier.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"state\"\n        ],\n        \"excludePermissions\": true\n    }",
                "operationId": "JobTitles_GetByIdentifier",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "identifier",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/jobtitles/ids": {
            "post": {
                "tags": ["JobTitles"],
                "summary": "Returns a list of Job Titles by their identifiers.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"JobTitle\",\n                    \"fieldName\": \"RevenueRegularRate\"\n                },\n                \"operator\": \"GreaterThan\",\n                \"filterValueType\": \"NumericWithUnit\",\n                \"values\": [\n                    {\n                        \"value\":{\n                            \"amount\": 5,\n                            \"unit\": \"USD\"\n                        }\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"ids\": [\"11.222.333\", \"44.555.66\"]\n    }",
                "operationId": "JobTitles_GetByIds",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesByIdsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/jobtitles/{entityId}/relations/{relationName}": {
            "post": {
                "tags": ["JobTitles"],
                "summary": "Returns a list of items related to a Job Title.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Project\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "JobTitles_GetRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RelatedEntitiesRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/jobtitles/{entityId}/relations/{relationName}/grouped": {
            "post": {
                "tags": ["JobTitles"],
                "summary": "Returns a grouped list of items related to a Job Title.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Project\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Active\"\n    }",
                "operationId": "JobTitles_GetGroupedRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedRelationsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/members": {
            "post": {
                "tags": ["Members"],
                "summary": "Returns a list of Members(AuthorizationGroups, UserGroups, ProfileGroups, Users).",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"fieldName\": \"name\"\n                },\n                \"operator\": \"Contains\",\n                \"filterValueType\": \"Text\",\n                \"values\": [\n                    {\n                        \"value\": \"user\",\n                        \"itemType\": \"Text\"\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "Members_GetAllMembers",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/profiles/count": {
            "post": {
                "tags": ["Profiles"],
                "summary": "Returns the number of Profiles.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Profile\",\n                    \"fieldName\": \"Name\"\n                },\n                \"operator\": \"Equals\",\n                \"filterValueType\": \"Text\",\n                \"values\": [\n                    {\n                        \"value\": \"Test\"\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Profiles_GetCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/profiles": {
            "post": {
                "tags": ["Profiles"],
                "summary": "Returns a list of Profiles.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Profile\",\n                    \"fieldName\": \"Name\"\n                },\n                \"operator\": \"Equals\",\n                \"filterValueType\": \"Text\",\n                \"values\": [\n                    {\n                        \"value\": \"Test\"\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "Profiles_Get",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/profiles/{identifier}": {
            "post": {
                "tags": ["Profiles"],
                "summary": "Returns a Profile by its identifier.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"state\"\n        ],\n        \"excludePermissions\": true\n    }",
                "operationId": "Profiles_GetByIdentifier",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "identifier",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/profiles/ids": {
            "post": {
                "tags": ["Profiles"],
                "summary": "Returns a list of Profiles by their identifiers.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n           {\n                \"field\": {\n                    \"entityType\": \"Profile\",\n                    \"fieldName\": \"Name\"\n                },\n                \"operator\": \"Equals\",\n                \"filterValueType\": \"Text\",\n                \"values\": [\n                    {\n                        \"value\": \"Test\"\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"ids\": [\"11.222.333\", \"44.555.66\"]\n    }",
                "operationId": "Profiles_GetByIds",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesByIdsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/profiles/user/{userId}": {
            "get": {
                "tags": ["Profiles"],
                "summary": "Returns a list of Profiles which are assigned to User.",
                "operationId": "Profiles_GetUserProfiles",
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "type": "string",
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ProfilesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/skills": {
            "post": {
                "tags": ["Skills"],
                "summary": "Returns a list of Skills.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Skill\",\n                    \"fieldName\": \"NLRCategory\"\n                },\n                \"operator\": \"In\",\n                \"filterValueType\": \"PickList\",\n                \"values\": [\n                    {\n                        \"value\": \"Labor\"\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "Skills_Get",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/skills/grouped": {
            "post": {
                "tags": ["Skills"],
                "summary": "Returns a grouped list of Skills.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Skill\",\n                    \"fieldName\": \"NLRCategory\"\n                },\n                \"operator\": \"In\",\n                \"filterValueType\": \"PickList\",\n                \"values\": [\n                    {\n                        \"value\": \"Labor\"\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Active\"\n    }",
                "operationId": "Skills_GetGrouped",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/skills/{identifier}": {
            "post": {
                "tags": ["Skills"],
                "summary": "Returns a Skill by its identifier.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"state\"\n        ],\n        \"excludePermissions\": true\n    }",
                "operationId": "Skills_GetByIdentifier",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "identifier",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/skills/ids": {
            "post": {
                "tags": ["Skills"],
                "summary": "Returns a list of Skills by their identifiers.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Skill\",\n                    \"fieldName\": \"NLRCategory\"\n                },\n                \"operator\": \"In\",\n                \"filterValueType\": \"PickList\",\n                \"values\": [\n                    {\n                        \"value\": \"Labor\"\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"ids\": [\"11.222.333\", \"44.555.66\"]\n    }",
                "operationId": "Skills_GetByIds",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesByIdsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/skills/count": {
            "post": {
                "tags": ["Skills"],
                "summary": "Returns the number of Skills.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Skill\",\n                    \"fieldName\": \"NLRCategory\"\n                },\n                \"operator\": \"In\",\n                \"filterValueType\": \"PickList\",\n                \"values\": [\n                    {\n                        \"value\": \"Labor\"\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Skills_GetCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/skills/{entityId}/relations/{relationName}": {
            "post": {
                "tags": ["Skills"],
                "summary": "Returns a list of items related to a Skill.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"ResourceEntity\",\n                    \"fieldName\": \"Name\"\n                },\n                \"operator\": \"Equals\",\n                \"filterValueType\": \"Text\",\n                \"values\": [\n                    {\n                        \"value\": \"User1\"\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "Skills_GetRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RelatedEntitiesRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/skills/{entityId}/relations/{relationName}/count": {
            "post": {
                "tags": ["Skills"],
                "summary": "Returns the number of items related to a Skill.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n           {\n                \"field\": {\n                    \"entityType\": \"ResourceEntity\",\n                    \"fieldName\": \"Name\"\n                },\n                \"operator\": \"Equals\",\n                \"filterValueType\": \"Text\",\n                \"values\": [\n                    {\n                        \"value\": \"User1\"\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Skills_GetRelationsCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/skills/{entityId}/relations/{relationName}/grouped": {
            "post": {
                "tags": ["Skills"],
                "summary": "Returns a grouped list of items related to a Skill.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"ResourceEntity\",\n                    \"fieldName\": \"Name\"\n                },\n                \"operator\": \"Equals\",\n                \"filterValueType\": \"Text\",\n                \"values\": [\n                    {\n                        \"value\": \"User1\"\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Active\"\n    }",
                "operationId": "Skills_GetGroupedRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedRelationsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/usergroups": {
            "post": {
                "tags": ["UserGroups"],
                "summary": "Returns a list of User Groups.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"UserGroup\",\n                    \"fieldName\": \"RevenueRegularRate\"\n                },\n                \"operator\": \"GreaterThan\",\n                \"filterValueType\": \"NumericWithUnit\",\n                \"values\": [\n                    {\n                        \"value\":{\n                            \"amount\": 5,\n                            \"unit\": \"USD\"\n                        }\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "UserGroups_Get",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/usergroups/grouped": {
            "post": {
                "tags": ["UserGroups"],
                "summary": "Returns a grouped list of User Groups.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"UserGroup\",\n                    \"fieldName\": \"RevenueRegularRate\"\n                },\n                \"operator\": \"GreaterThan\",\n                \"filterValueType\": \"NumericWithUnit\",\n                \"values\": [\n                    {\n                        \"value\":{\n                            \"amount\": 5,\n                            \"unit\": \"USD\"\n                        }\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Active\"\n    }",
                "operationId": "UserGroups_GetGrouped",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/usergroups/{identifier}": {
            "post": {
                "tags": ["UserGroups"],
                "summary": "Returns a User Group by its identifier.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"state\"\n        ],\n        \"excludePermissions\": true\n    }",
                "operationId": "UserGroups_GetByIdentifier",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "identifier",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/usergroups/ids": {
            "post": {
                "tags": ["UserGroups"],
                "summary": "Returns a list of User Groups by their identifiers.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"UserGroup\",\n                    \"fieldName\": \"RevenueRegularRate\"\n                },\n                \"operator\": \"GreaterThan\",\n                \"filterValueType\": \"NumericWithUnit\",\n                \"values\": [\n                    {\n                        \"value\":{\n                            \"amount\": 5,\n                            \"unit\": \"USD\"\n                        }\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"ids\": [\"11.222.333\", \"44.555.66\"]\n    }",
                "operationId": "UserGroups_GetByIds",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesByIdsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/usergroups/count": {
            "post": {
                "tags": ["UserGroups"],
                "summary": "Returns the number of User Groups.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"UserGroup\",\n                    \"fieldName\": \"RevenueRegularRate\"\n                },\n                \"operator\": \"GreaterThan\",\n                \"filterValueType\": \"NumericWithUnit\",\n                \"values\": [\n                    {\n                        \"value\":{\n                            \"amount\": 5,\n                            \"unit\": \"USD\"\n                        }\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "UserGroups_GetCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/usergroups/{entityId}/relations/{relationName}": {
            "post": {
                "tags": ["UserGroups"],
                "summary": "Returns a list of items related to a User Group.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Project\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "UserGroups_GetRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RelatedEntitiesRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/usergroups/{entityId}/relations/{relationName}/count": {
            "post": {
                "tags": ["UserGroups"],
                "summary": "Returns the number of items related to a User Group.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Project\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "UserGroups_GetRelationsCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/usergroups/{entityId}/relations/{relationName}/grouped": {
            "post": {
                "tags": ["UserGroups"],
                "summary": "Returns a grouped list of items related to a User Group.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Project\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Active\"\n    }",
                "operationId": "UserGroups_GetGroupedRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedRelationsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/usergroups/authorizationgroups": {
            "get": {
                "tags": ["UserGroups"],
                "summary": "Returns a list of Authorization Groups.",
                "operationId": "UserGroups_GetAuthorizationGroups",
                "produces": ["application/json", "text/json"],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/AuthorizationGroupsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/usergroups/user/{userId}": {
            "post": {
                "tags": ["UserGroups"],
                "summary": "Returns a list of Groups which the User is a member of.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"UserGroup\",\n                    \"fieldName\": \"RevenueRegularRate\"\n                },\n                \"operator\": \"GreaterThan\",\n                \"filterValueType\": \"NumericWithUnit\",\n                \"values\": [\n                    {\n                        \"value\":{\n                            \"amount\": 5,\n                            \"unit\": \"USD\"\n                        }\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "UserGroups_GetRelatedGroupsForUser",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/users": {
            "post": {
                "tags": ["Users"],
                "summary": "Returns a list of Users.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"User\",\n                    \"fieldName\": \"RevenueRegularRate\"\n                },\n                \"operator\": \"GreaterThan\",\n                \"filterValueType\": \"NumericWithUnit\",\n                \"values\": [\n                    {\n                        \"value\":{\n                            \"amount\": 5,\n                            \"unit\": \"USD\"\n                        }\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "Users_Get",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/users/grouped": {
            "post": {
                "tags": ["Users"],
                "summary": "Returns a grouped list of Users.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"User\",\n                    \"fieldName\": \"RevenueRegularRate\"\n                },\n                \"operator\": \"GreaterThan\",\n                \"filterValueType\": \"NumericWithUnit\",\n                \"values\": [\n                    {\n                        \"value\":{\n                            \"amount\": 5,\n                            \"unit\": \"USD\"\n                        }\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Active\"\n    }",
                "operationId": "Users_GetGrouped",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/users/{identifier}": {
            "post": {
                "tags": ["Users"],
                "summary": "Returns a User by its identifier.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"state\"\n        ],\n        \"excludePermissions\": true\n    }",
                "operationId": "Users_GetByIdentifier",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "identifier",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/users/ids": {
            "post": {
                "tags": ["Users"],
                "summary": "Returns a list of Users by their identifiers.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"User\",\n                    \"fieldName\": \"RevenueRegularRate\"\n                },\n                \"operator\": \"GreaterThan\",\n                \"filterValueType\": \"NumericWithUnit\",\n                \"values\": [\n                    {\n                        \"value\":{\n                            \"amount\": 5,\n                            \"unit\": \"USD\"\n                        }\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"ids\": [\"11.222.333\", \"44.555.66\"]\n    }",
                "operationId": "Users_GetByIds",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesByIdsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/users/count": {
            "post": {
                "tags": ["Users"],
                "summary": "Returns the number of Users.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"User\",\n                    \"fieldName\": \"RevenueRegularRate\"\n                },\n                \"operator\": \"GreaterThan\",\n                \"filterValueType\": \"NumericWithUnit\",\n                \"values\": [\n                    {\n                        \"value\":{\n                            \"amount\": 5,\n                            \"unit\": \"USD\"\n                        }\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Users_GetCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/users/{entityId}/relations/{relationName}": {
            "post": {
                "tags": ["Users"],
                "summary": "Returns a list of items related to a User.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"WorkItem\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "Users_GetRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RelatedEntitiesRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/users/{entityId}/relations/{relationName}/count": {
            "post": {
                "tags": ["Users"],
                "summary": "Returns the number of items related to a User.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"WorkItem\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Users_GetRelationsCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/users/{entityId}/relations/{relationName}/grouped": {
            "post": {
                "tags": ["Users"],
                "summary": "Returns a grouped list of items related to a User.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"WorkItem\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Active\"\n    }",
                "operationId": "Users_GetGroupedRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedRelationsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/ribbonactions": {
            "post": {
                "tags": ["RibbonActions"],
                "summary": "Returns a list of Ribbon Actions",
                "description": "Sample request:\n\n    {\n        \"Ids\": [],\n        \"RibbonType\": \"Subsystem\",\n        \"EntityType\": \"Project\",\n        \"MainEntityId\": \"\",\n        \"ParentEntityId\": \"\"\n    }",
                "operationId": "RibbonActions_GetRibbonActions",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RibbonActionsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/RibbonActionsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/ribbonactions/contextmenus": {
            "post": {
                "tags": ["RibbonActions"],
                "summary": "Return context menus for a related entity",
                "operationId": "RibbonActions_GetContextMenus",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContextMenusRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ContextMenusResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/milestones": {
            "post": {
                "tags": ["Milestones"],
                "summary": "Returns a list of Milestones.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Milestone\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "Milestones_Get",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/milestones/grouped": {
            "post": {
                "tags": ["Milestones"],
                "summary": "Returns a grouped list of Milestones.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Milestone\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Active\"\n    }",
                "operationId": "Milestones_GetGrouped",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/milestones/{identifier}": {
            "post": {
                "tags": ["Milestones"],
                "summary": "Returns a Milestone by its identifier.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"excludePermissions\": true\n    }",
                "operationId": "Milestones_GetByIdentifier",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "identifier",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/milestones/ids": {
            "post": {
                "tags": ["Milestones"],
                "summary": "Returns a list of Milestones by their identifiers.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Milestone\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"ids\": [\"11.222.333\", \"44.555.66\"]\n    }",
                "operationId": "Milestones_GetByIds",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesByIdsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/milestones/count": {
            "post": {
                "tags": ["Milestones"],
                "summary": "Returns the number of Milestones.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Milestone\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Milestones_GetCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/milestones/{entityId}/relations/{relationName}": {
            "post": {
                "tags": ["Milestones"],
                "summary": "Returns a list of items related to a Milestone.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Risk\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "Milestones_GetRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RelatedEntitiesRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/milestones/{entityId}/relations/{relationName}/count": {
            "post": {
                "tags": ["Milestones"],
                "summary": "Returns the number of items related to a Milestone.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Risk\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Milestones_GetRelationsCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/milestones/{entityId}/relations/{relationName}/grouped": {
            "post": {
                "tags": ["Milestones"],
                "summary": "Returns a grouped list of items related to a Milestone.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Risk\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Submitted\"\n    }",
                "operationId": "Milestones_GetGroupedRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedRelationsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/milestones/avatars": {
            "post": {
                "tags": ["Milestones"],
                "summary": "Returns a list of Unique Users and groups.",
                "description": "Sample request:\n            \n    {\n        \"fieldName\": \"Owner\",\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Milestone\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Milestones_GetAvatars",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AvatarsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/AvatarsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/milestones/{entityId}/relations/{relationName}/avatars": {
            "post": {
                "tags": ["Milestones"],
                "summary": "Returns a list of Unique Users and groups.",
                "description": "Sample request:\n            \n    {\n    \"relation\": {\n        \"name\": \"ResourcesAndPlaceholders\",\n        \"filteredEntityType\": \"User\"\n    },\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"workitem\",\n                    \"fieldName\": \"name\"\n                },\n                \"operator\": \"Contains\",\n                \"filterValueType\": \"Text\",\n                \"values\": [\n                    {\n                        \"value\": \"111111\"\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Milestones_GetRelationsAvatars",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AvatarsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/AvatarsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/programs": {
            "post": {
                "tags": ["Programs"],
                "summary": "Returns a list of Programs.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Program\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "Programs_Get",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/programs/grouped": {
            "post": {
                "tags": ["Programs"],
                "summary": "Returns a grouped list of Programs.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Program\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Active\"\n    }",
                "operationId": "Programs_GetGrouped",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/programs/{identifier}": {
            "post": {
                "tags": ["Programs"],
                "summary": "Returns a Program by its identifier.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"excludePermissions\": true\n    }",
                "operationId": "Programs_GetByIdentifier",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "identifier",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/programs/ids": {
            "post": {
                "tags": ["Programs"],
                "summary": "Returns a list of Programs by their identifiers.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Program\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"ids\": [\"11.222.333\", \"44.555.66\"]\n    }",
                "operationId": "Programs_GetByIds",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesByIdsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/programs/count": {
            "post": {
                "tags": ["Programs"],
                "summary": "Returns the number of Programs.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Program\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Programs_GetCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/programs/{entityId}/relations/{relationName}": {
            "post": {
                "tags": ["Programs"],
                "summary": "Returns a list of items related to a Program.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Risk\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "Programs_GetRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RelatedEntitiesRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/programs/{entityId}/relations/{relationName}/count": {
            "post": {
                "tags": ["Programs"],
                "summary": "Returns the number of items related to a Program.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Risk\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Programs_GetRelationsCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/programs/{entityId}/relations/{relationName}/grouped": {
            "post": {
                "tags": ["Programs"],
                "summary": "Returns a grouped list of items related to a Program.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Risk\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Submitted\"\n    }",
                "operationId": "Programs_GetGroupedRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedRelationsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/programs/avatars": {
            "post": {
                "tags": ["Programs"],
                "summary": "Returns a list of Unique Users and groups.",
                "description": "Sample request:\n            \n    {\n        \"fieldName\": \"Owner\",\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Program\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Programs_GetAvatars",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AvatarsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/AvatarsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/programs/{entityId}/relations/{relationName}/avatars": {
            "post": {
                "tags": ["Programs"],
                "summary": "Returns a list of Unique Users and groups.",
                "description": "Sample request:\n            \n    {\n    \"relation\": {\n        \"name\": \"ResourcesAndPlaceholders\",\n        \"filteredEntityType\": \"User\"\n    },\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"workitem\",\n                    \"fieldName\": \"name\"\n                },\n                \"operator\": \"Contains\",\n                \"filterValueType\": \"Text\",\n                \"values\": [\n                    {\n                        \"value\": \"111111\"\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Programs_GetRelationsAvatars",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AvatarsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/AvatarsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/projects": {
            "post": {
                "tags": ["Projects"],
                "summary": "Returns a list of Projects.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Project\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "Projects_Get",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/projects/grouped": {
            "post": {
                "tags": ["Projects"],
                "summary": "Returns a grouped list of Projects.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Project\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Active\"\n    }",
                "operationId": "Projects_GetGrouped",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/projects/{identifier}": {
            "post": {
                "tags": ["Projects"],
                "summary": "Returns a Project by its identifier.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"excludePermissions\": true\n    }",
                "operationId": "Projects_GetByIdentifier",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "identifier",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/projects/ids": {
            "post": {
                "tags": ["Projects"],
                "summary": "Returns a list of Projects by their identifiers.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Project\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"ids\": [\"11.222.333\", \"44.555.66\"]\n    }",
                "operationId": "Projects_GetByIds",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesByIdsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/projects/count": {
            "post": {
                "tags": ["Projects"],
                "summary": "Returns the number of Projects.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Project\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Projects_GetCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/projects/{entityId}/relations/{relationName}": {
            "post": {
                "tags": ["Projects"],
                "summary": "Returns a list of items related to a Project.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Risk\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "Projects_GetRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RelatedEntitiesRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/projects/{entityId}/relations/{relationName}/count": {
            "post": {
                "tags": ["Projects"],
                "summary": "Returns the number of items related to a Project.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Risk\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Projects_GetRelationsCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/projects/{entityId}/relations/{relationName}/grouped": {
            "post": {
                "tags": ["Projects"],
                "summary": "Returns a grouped list of items related to a Project.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Risk\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Submitted\"\n    }",
                "operationId": "Projects_GetGroupedRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedRelationsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/projects/avatars": {
            "post": {
                "tags": ["Projects"],
                "summary": "Returns a list of Unique Users and groups.",
                "description": "Sample request:\n            \n    {\n        \"fieldName\": \"ProjectManager\",\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Project\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Projects_GetAvatars",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AvatarsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/AvatarsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/projects/{entityId}/relations/{relationName}/avatars": {
            "post": {
                "tags": ["Projects"],
                "summary": "Returns a list of Unique Users and groups.",
                "description": "Sample request:\n            \n    {\n    \"relation\": {\n        \"name\": \"ResourcesAndPlaceholders\",\n        \"filteredEntityType\": \"User\"\n    },\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"workitem\",\n                    \"fieldName\": \"name\"\n                },\n                \"operator\": \"Contains\",\n                \"filterValueType\": \"Text\",\n                \"values\": [\n                    {\n                        \"value\": \"111111\"\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Projects_GetRelationsAvatars",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AvatarsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/AvatarsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/tasks": {
            "post": {
                "tags": ["Tasks"],
                "summary": "Returns a list of Tasks.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Task\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "Tasks_Get",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/tasks/grouped": {
            "post": {
                "tags": ["Tasks"],
                "summary": "Returns a grouped list of Tasks.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Task\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Active\"\n    }",
                "operationId": "Tasks_GetGrouped",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/tasks/{identifier}": {
            "post": {
                "tags": ["Tasks"],
                "summary": "Returns a Task by its identifier.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"excludePermissions\": true\n    }",
                "operationId": "Tasks_GetByIdentifier",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "identifier",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntityDetailsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/tasks/ids": {
            "post": {
                "tags": ["Tasks"],
                "summary": "Returns a list of Tasks by their identifiers.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Task\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"ids\": [\"11.222.333\", \"44.555.66\"]\n    }",
                "operationId": "Tasks_GetByIds",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntitiesByIdsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/tasks/count": {
            "post": {
                "tags": ["Tasks"],
                "summary": "Returns the number of Tasks.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Task\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Tasks_GetCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/tasks/{entityId}/relations/{relationName}": {
            "post": {
                "tags": ["Tasks"],
                "summary": "Returns a list of items related to a Task.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Risk\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true\n    }",
                "operationId": "Tasks_GetRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RelatedEntitiesRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/EntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/tasks/{entityId}/relations/{relationName}/count": {
            "post": {
                "tags": ["Tasks"],
                "summary": "Returns the number of items related to a Task.",
                "description": "Sample request:\n            \n    {\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Risk\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Tasks_GetRelationsCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CountRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/tasks/{entityId}/relations/{relationName}/grouped": {
            "post": {
                "tags": ["Tasks"],
                "summary": "Returns a grouped list of items related to a Task.",
                "description": "Sample request:\n            \n    {\n        \"fields\": [\n            \"name\",\n            \"createdOn\",\n            \"state\"\n        ],\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Risk\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ],\n        \"offset\": 0,\n        \"limit\": 25,\n        \"sortBy\": \"name\",\n        \"sortStrategy\": \"Asc\",\n        \"excludePermissions\": true,\n        \"groupBy\": \"state\",\n        \"groupName\": \"Submitted\"\n    }",
                "operationId": "Tasks_GetGroupedRelations",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupedRelationsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GroupedEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/tasks/avatars": {
            "post": {
                "tags": ["Tasks"],
                "summary": "Returns a list of Unique Users and groups.",
                "description": "Sample request:\n            \n    {\n        \"fieldName\": \"Owner\",\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"Task\",\n                    \"fieldName\": \"percentCompleted\"\n                },\n                \"operator\": \"Between\",\n                \"filterValueType\": \"Numeric\",\n                \"values\": [\n                    {\n                        \"value\": 10\n                    },\n                    {\n                        \"value\": 20\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Tasks_GetAvatars",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AvatarsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/AvatarsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/tasks/{entityId}/relations/{relationName}/avatars": {
            "post": {
                "tags": ["Tasks"],
                "summary": "Returns a list of Unique Users and groups.",
                "description": "Sample request:\n            \n    {\n    \"relation\": {\n        \"name\": \"ResourcesAndPlaceholders\",\n        \"filteredEntityType\": \"User\"\n    },\n        \"dataFilters\": [\n            {\n                \"field\": {\n                    \"entityType\": \"workitem\",\n                    \"fieldName\": \"name\"\n                },\n                \"operator\": \"Contains\",\n                \"filterValueType\": \"Text\",\n                \"values\": [\n                    {\n                        \"value\": \"111111\"\n                    }\n                ]\n            }\n        ]\n    }",
                "operationId": "Tasks_GetRelationsAvatars",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AvatarsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "entityId",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "relationName",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/AvatarsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/dwhentity/{entityType}/count": {
            "post": {
                "tags": ["DataWarehouseEntity"],
                "operationId": "DataWarehouseEntity_GetCount",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "type": "string",
                        "name": "entityType",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DataWarehouseCountRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CountResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/dwhentity/{entityType}/ids": {
            "post": {
                "tags": ["DataWarehouseEntity"],
                "operationId": "DataWarehouseEntity_GetByIds",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "type": "string",
                        "name": "entityType",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DataWarehouseEntitiesByIdsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/DataWarehouseEntitiesByIdsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/dwhentity/{entityType}": {
            "post": {
                "tags": ["DataWarehouseEntity"],
                "operationId": "DataWarehouseEntity_GetIds",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "type": "string",
                        "name": "entityType",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DataWarehouseGetIdsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/DataWarehouseGetIdsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/dwhcoordinator/configuration": {
            "post": {
                "tags": ["Configuration"],
                "operationId": "Configuration_GetConfiguration",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "configurationRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConfigurationRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/DataWarehouseEntityDetailsResponseOfBIConfiguration"
                        }
                    },
                    "400": {
                        "description": ""
                    },
                    "401": {
                        "description": ""
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            },
            "put": {
                "tags": ["Configuration"],
                "operationId": "Configuration_UpdateConfiguration",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "parameters": [
                    {
                        "name": "configurationRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateConfigurationRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": ""
                    },
                    "401": {
                        "description": ""
                    },
                    "404": {
                        "description": ""
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/dwhcoordinator/storageconnection/blob": {
            "post": {
                "tags": ["StorageConnections"],
                "operationId": "StorageConnections_TestAzureBlobConnection",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "blobConnectionRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BlobConnectionRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/StorageConnectionResponse"
                        }
                    },
                    "400": {
                        "description": ""
                    },
                    "401": {
                        "description": ""
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/dwhcoordinator/triggerexport": {
            "post": {
                "tags": ["TriggerExport"],
                "operationId": "TriggerExport_TriggerExport",
                "responses": {
                    "200": {
                        "x-nullable": true,
                        "description": "",
                        "schema": {
                            "type": "file"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/pvadmin/tenant/verifyconnect": {
            "post": {
                "tags": ["PlanviewAdmin"],
                "operationId": "PlanviewAdmin_VerifyConnect",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VerifyConnectRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": true,
                        "description": "",
                        "schema": {
                            "type": "file"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/pvadmin/tenant/user": {
            "get": {
                "tags": ["PlanviewAdmin"],
                "operationId": "PlanviewAdmin_GetUsers",
                "produces": ["application/json", "text/json"],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GetUsersResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/pvadmin/tenant": {
            "get": {
                "tags": ["PlanviewAdmin"],
                "operationId": "PlanviewAdmin_Get",
                "produces": ["application/json", "text/json"],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GetTenantResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/pvadmin/tenant/register": {
            "post": {
                "tags": ["PlanviewAdmin"],
                "operationId": "PlanviewAdmin_Register",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RegisterTenantRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": true,
                        "description": "",
                        "schema": {
                            "type": "file"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/planviewtokenservice/token/copilot": {
            "get": {
                "tags": ["PlanviewTokenService"],
                "operationId": "PlanviewTokenService_GetPtsTokenForCoPilot",
                "produces": ["application/json", "text/json"],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GetTokenResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/planviewtokenservice/token/ModernizationAuthorization": {
            "get": {
                "tags": ["PlanviewTokenService"],
                "operationId": "PlanviewTokenService_GetPtsTokenInternal",
                "produces": ["application/json", "text/json"],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GetTokenResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/PlatformaApps/SentimentAnalysis/CalculateSentiment": {
            "post": {
                "tags": ["SentimentAnalysisService"],
                "operationId": "SentimentAnalysisService_CalculateSentiment",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "calculateSentimentRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CalculateSentimentRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/CalculateSentimentResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/whiteboard/pts-token/{type}/{identifier}": {
            "get": {
                "tags": ["Whiteboard"],
                "operationId": "Whiteboard_PtsTokenForWhiteboard",
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "type": "string",
                        "name": "type",
                        "in": "path",
                        "required": true,
                        "x-schema": {
                            "$ref": "#/definitions/IdentifierType"
                        },
                        "x-nullable": false,
                        "enum": ["Entity"]
                    },
                    {
                        "type": "string",
                        "name": "identifier",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/WhiteboardTokenResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/workload/resources": {
            "post": {
                "tags": ["Workload"],
                "summary": "Returns the Resources with planning data.",
                "description": "Sample request:\n            \n    {\n        \"workloadSettings\": {\n                 \"aggregationTypes\": \"None\",\n                 \"loadBaseType\": \"ProjectAssignment\",\n                 \"measureType\": \"Hours\",\n                 \"slicePeriodType\": \"Day\",\n                 \"slicesAmount\": 5,\n                 \"sliceStartDate\": \"2024-04-16T10:00:00.000Z\",\n                 \"workloadRootEntityType\": \"Resources\"\n        },\n        \"sourceEntity\": {\n            \"entityType\": \"ResourceEntity\",\n            \"entityKeys\": [\n                {\n                    \"businessUnitId\": \"2.2.2\",\n                    \"entityId\": \"1.1.1\"\n                },\n                {\n                    \"businessUnitId\": \"2.2.2\",\n                    \"entityId\": \"1.2.1\"\n                }\n            ]\n        },\n        \"offset\": 0,\n        \"limit\": 25\n    }",
                "operationId": "Workload_GetWorkloadResources",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResourceWorkloadRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/WorkloadEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/workload/projects": {
            "post": {
                "tags": ["Workload"],
                "summary": "Returns the Projects for a particular resource with planning data",
                "description": "Sample request:\n            \n    {\n        \"workloadSettings\": {\n                 \"aggregationTypes\": \"None\",\n                 \"loadBaseType\": \"ProjectAssignment\",\n                 \"measureType\": \"Hours\",\n                 \"slicePeriodType\": \"Day\",\n                 \"slicesAmount\": 5,\n                 \"sliceStartDate\": \"2024-04-16T10:57:02.635Z\",\n                 \"workloadRootEntityType\": \"Resources\"\n        },\n        \"resourceEntityKey\": {\n            \"businessUnitId\": \"2.2.2\",\n            \"entityId\": \"1.1.1\"\n        },\n        \"offset\": 0,\n        \"limit\": 25\n    }",
                "operationId": "Workload_GetWorkloadProjects",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntityWorkloadRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/WorkloadEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/workload/project/{projectIdentifier}/tasks": {
            "post": {
                "tags": ["Workload"],
                "summary": "Returns the Tasks for a particular project with planning data",
                "description": "Sample request:\n            \n    {\n        \"workloadSettings\": {\n                 \"aggregationTypes\": \"None\",\n                 \"businessUnitId\": 0,\n                 \"loadBaseType\": \"ProjectAssignment\",\n                 \"measureType\": \"Hours\",\n                 \"slicePeriodType\": \"Day\",\n                 \"slicesAmount\": 5,\n                 \"sliceStartDate\": \"2024-04-16T10:57:02.635Z\",\n                 \"workloadRootEntityType\": \"Resources\"\n        },\n        \"resourceEntityKey\": {\n            \"businessUnitId\": \"2.2.2\",\n            \"entityId\": \"1.1.1\"\n        },\n        \"offset\": 0,\n        \"limit\": 25,\n    }",
                "operationId": "Workload_GetWorkloadTasks",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EntityWorkloadRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "projectIdentifier",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/WorkloadEntitiesResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/publicis/reportableWorkItemsPerUser/{identifier}": {
            "post": {
                "tags": ["Publicis"],
                "operationId": "Publicis_GetReportableWorkItemsPerUser",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GetReportableWorkItemsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "identifier",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GetReportableWorkItemsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/publicis/reportableTasksByIds/{businessUnitIdentifier}": {
            "post": {
                "tags": ["Publicis"],
                "operationId": "Publicis_GetReportableTasksByIds",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GetReportableTasksByIdsRequest"
                        },
                        "x-nullable": false
                    },
                    {
                        "type": "string",
                        "name": "businessUnitIdentifier",
                        "in": "path",
                        "required": true,
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GetReportableTasksByIdsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/publicis/reportableTasksByIds": {
            "post": {
                "tags": ["Publicis"],
                "operationId": "Publicis_GetReportableTasksByIds2",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GetReportableTasksByIdsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GetReportableTasksByIdsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/publicis/assignmentsPerUsers": {
            "post": {
                "tags": ["Publicis"],
                "operationId": "Publicis_GetAssignmentsPerUsers",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GetAssignmentsPerUsersRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GetAssignmentsPerUsersResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/publicis/usersWorkingHours": {
            "post": {
                "tags": ["Publicis"],
                "operationId": "Publicis_GetUsersWorkingHours",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GetUsersWorkingHoursRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GetUsersWorkingHoursResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/publicis/resourceManager/groupMembershipLinks": {
            "post": {
                "tags": ["Publicis"],
                "operationId": "Publicis_GetGroupMembershipLinks",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GetGroupMembershipLinksRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GetGroupMembershipLinksResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        },
        "/publicis/resourceProjects": {
            "post": {
                "tags": ["Publicis"],
                "operationId": "Publicis_GetResourceProjects",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json"
                ],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GetResourceProjectsRequest"
                        },
                        "x-nullable": false
                    }
                ],
                "responses": {
                    "200": {
                        "x-nullable": false,
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/GetResourceProjectsResponse"
                        }
                    }
                },
                "security": [
                    {
                        "JWT Token": []
                    }
                ]
            }
        }
    },
    "definitions": {
        "EntitiesResponse": {
            "type": "object",
            "required": ["entities", "limit", "offset", "hasMore", "grandTotal"],
            "properties": {
                "entities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EntityModel"
                    }
                },
                "limit": {
                    "type": "integer",
                    "format": "int64"
                },
                "offset": {
                    "type": "integer",
                    "format": "int64"
                },
                "hasMore": {
                    "type": "boolean"
                },
                "grandTotal": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "EntityModel": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "internalId": {
                    "type": "string"
                },
                "entityTypeApiName": {
                    "type": "string"
                },
                "relationLinkId": {
                    "type": "string"
                },
                "permissions": {
                    "$ref": "#/definitions/Permissions"
                },
                "extensionData": {
                    "type": "object",
                    "additionalProperties": {}
                }
            }
        },
        "Permissions": {
            "type": "object",
            "required": ["objectPermissions", "fieldPermissions"],
            "properties": {
                "objectPermissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ObjectPermissionType"
                    }
                },
                "fieldPermissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FieldPermissions"
                    }
                }
            }
        },
        "ObjectPermissionType": {
            "type": "string",
            "description": "",
            "x-enumNames": ["Delete", "Update"],
            "enum": ["Delete", "Update"]
        },
        "FieldPermissions": {
            "type": "object",
            "required": ["fieldName", "permissions"],
            "properties": {
                "fieldName": {
                    "type": "string",
                    "minLength": 1
                },
                "permissions": {
                    "$ref": "#/definitions/FieldPermissionsType"
                }
            }
        },
        "FieldPermissionsType": {
            "type": "string",
            "description": "",
            "x-enumNames": ["Read", "ReadWrite", "None"],
            "enum": ["Read", "ReadWrite", "None"]
        },
        "EntitiesRequest": {
            "type": "object",
            "required": [
                "fields",
                "relations",
                "dataFilters",
                "limit",
                "offset",
                "sortStrategy",
                "excludePermissions"
            ],
            "properties": {
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "relations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dataFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FilterRequest"
                    }
                },
                "limit": {
                    "type": "integer",
                    "format": "int32"
                },
                "offset": {
                    "type": "integer",
                    "format": "int32"
                },
                "sortBy": {
                    "type": "string"
                },
                "sortStrategy": {
                    "$ref": "#/definitions/EntitySortStrategy"
                },
                "excludePermissions": {
                    "type": "boolean"
                }
            }
        },
        "FilterRequest": {
            "type": "object",
            "required": ["field", "operator", "filterValueType", "values"],
            "properties": {
                "field": {
                    "$ref": "#/definitions/FilterField"
                },
                "operator": {
                    "$ref": "#/definitions/OperatorId"
                },
                "filterValueType": {
                    "$ref": "#/definitions/FilterValueItemType"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BaseFilterValue"
                    }
                }
            }
        },
        "FilterField": {
            "type": "object",
            "required": ["entityType", "fieldName"],
            "properties": {
                "entityType": {
                    "type": "string"
                },
                "fieldName": {
                    "type": "string"
                }
            }
        },
        "OperatorId": {
            "type": "string",
            "description": "",
            "x-enumNames": [
                "None",
                "Equals",
                "NotEqual",
                "In",
                "NotIn",
                "GreaterThan",
                "LessThan",
                "Before",
                "After",
                "BeginsWith",
                "EndsWith",
                "TextualContains",
                "Between",
                "Contains",
                "DoesNotContain",
                "NotBetween",
                "GreaterOrEqual",
                "LessOrEqual",
                "Match",
                "AfterOrEqualsOf",
                "BeforeOrEqualsOf",
                "Blanks",
                "MatchesCurrency",
                "NotMatchedCurrency",
                "IsUnassignedOrEquals",
                "NonBlanks",
                "Is",
                "IsNot",
                "InTheFollowing",
                "DuringThePrevious",
                "PreviousDay",
                "Today",
                "NextDay",
                "LastWeek",
                "ThisWeek",
                "NextWeek",
                "LastMonth",
                "ThisMonth",
                "NextMonth",
                "LastQuarter",
                "ThisQuarter",
                "NextQuarter",
                "LastYear",
                "ThisYear",
                "NextYear",
                "Me",
                "MyManager",
                "MyDirectReports",
                "EqualsMulti",
                "NotEqualsMulti"
            ],
            "enum": [
                "None",
                "Equals",
                "NotEqual",
                "In",
                "NotIn",
                "GreaterThan",
                "LessThan",
                "Before",
                "After",
                "BeginsWith",
                "EndsWith",
                "TextualContains",
                "Between",
                "Contains",
                "DoesNotContain",
                "NotBetween",
                "GreaterOrEqual",
                "LessOrEqual",
                "Match",
                "AfterOrEqualsOf",
                "BeforeOrEqualsOf",
                "Blanks",
                "MatchesCurrency",
                "NotMatchedCurrency",
                "IsUnassignedOrEquals",
                "NonBlanks",
                "Is",
                "IsNot",
                "InTheFollowing",
                "DuringThePrevious",
                "PreviousDay",
                "Today",
                "NextDay",
                "LastWeek",
                "ThisWeek",
                "NextWeek",
                "LastMonth",
                "ThisMonth",
                "NextMonth",
                "LastQuarter",
                "ThisQuarter",
                "NextQuarter",
                "LastYear",
                "ThisYear",
                "NextYear",
                "Me",
                "MyManager",
                "MyDirectReports",
                "EqualsMulti",
                "NotEqualsMulti"
            ]
        },
        "FilterValueItemType": {
            "type": "string",
            "description": "",
            "x-enumNames": [
                "None",
                "Numeric",
                "NumericWithUnit",
                "PickList",
                "Date",
                "ReferenceToObject",
                "Checkbox",
                "Text",
                "TextArea",
                "RelativeDate",
                "ContextualDate"
            ],
            "enum": [
                "None",
                "Numeric",
                "NumericWithUnit",
                "PickList",
                "Date",
                "ReferenceToObject",
                "Checkbox",
                "Text",
                "TextArea",
                "RelativeDate",
                "ContextualDate"
            ]
        },
        "BaseFilterValue": {
            "type": "object"
        },
        "CheckboxFilterValue": {
            "type": "object",
            "required": ["value"],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "ContextualDateFilterValue": {
            "type": "object",
            "required": ["value"],
            "properties": {
                "value": {
                    "$ref": "#/definitions/ContextualDate"
                }
            }
        },
        "ContextualDate": {
            "type": "string",
            "description": "",
            "x-enumNames": [
                "Today",
                "ThisWeek",
                "NextWeek",
                "ThisMonth",
                "NextMonth",
                "ThisQuarter",
                "NextQuarter",
                "ThisYear",
                "NextYear"
            ],
            "enum": [
                "Today",
                "ThisWeek",
                "NextWeek",
                "ThisMonth",
                "NextMonth",
                "ThisQuarter",
                "NextQuarter",
                "ThisYear",
                "NextYear"
            ]
        },
        "DateFilterValue": {
            "type": "object",
            "required": ["value"],
            "properties": {
                "value": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "NumericFilterValue": {
            "type": "object",
            "required": ["value"],
            "properties": {
                "value": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "NumericWithUnitFilterValue": {
            "type": "object",
            "required": ["value"],
            "properties": {
                "value": {
                    "$ref": "#/definitions/AmountAndUnit"
                }
            }
        },
        "AmountAndUnit": {
            "type": "object",
            "required": ["amount", "unit"],
            "properties": {
                "amount": {
                    "type": "number",
                    "format": "double"
                },
                "unit": {
                    "type": "string"
                }
            }
        },
        "PickListFilterValue": {
            "type": "object",
            "required": ["value"],
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "ReferenceToObjectFilterValue": {
            "type": "object",
            "required": ["value"],
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "RelativeDateFilterValue": {
            "type": "object",
            "required": ["value"],
            "properties": {
                "value": {
                    "$ref": "#/definitions/RelativeDateValue"
                }
            }
        },
        "RelativeDateValue": {
            "type": "object",
            "required": ["dateUnit", "amount"],
            "properties": {
                "dateUnit": {
                    "$ref": "#/definitions/RelativeDateUnit"
                },
                "amount": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "RelativeDateUnit": {
            "type": "string",
            "description": "",
            "x-enumNames": ["Days", "Weeks", "Months", "Quarters", "Years"],
            "enum": ["Days", "Weeks", "Months", "Quarters", "Years"]
        },
        "TextFilterValue": {
            "type": "object",
            "required": ["value"],
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "EntitySortStrategy": {
            "type": "string",
            "description": "",
            "x-enumNames": ["Asc", "Desc"],
            "enum": ["Asc", "Desc"]
        },
        "GroupedEntitiesResponse": {
            "type": "object",
            "required": ["grandTotal", "groupedEntities"],
            "properties": {
                "grandTotal": {
                    "type": "integer",
                    "format": "int32"
                },
                "groupedEntities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GroupedEntityListOfEntityModel"
                    }
                }
            }
        },
        "GroupedEntityListOfEntityModel": {
            "type": "object",
            "required": ["entities", "limit", "offset", "hasMore", "groupName", "totalRecords"],
            "properties": {
                "entities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EntityModel"
                    }
                },
                "limit": {
                    "type": "integer",
                    "format": "int64"
                },
                "offset": {
                    "type": "integer",
                    "format": "int64"
                },
                "hasMore": {
                    "type": "boolean"
                },
                "groupName": {
                    "type": "string",
                    "minLength": 1
                },
                "totalRecords": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "GroupedEntitiesRequest": {
            "type": "object",
            "required": [
                "fields",
                "relations",
                "dataFilters",
                "limit",
                "offset",
                "sortStrategy",
                "excludePermissions",
                "groupBy"
            ],
            "properties": {
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "relations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dataFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FilterRequest"
                    }
                },
                "limit": {
                    "type": "integer",
                    "format": "int32"
                },
                "offset": {
                    "type": "integer",
                    "format": "int32"
                },
                "sortBy": {
                    "type": "string"
                },
                "sortStrategy": {
                    "$ref": "#/definitions/EntitySortStrategy"
                },
                "excludePermissions": {
                    "type": "boolean"
                },
                "groupBy": {
                    "type": "string",
                    "minLength": 1
                },
                "groupName": {
                    "type": "string"
                }
            }
        },
        "EntityDetailsResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "internalId": {
                    "type": "string"
                },
                "entityTypeApiName": {
                    "type": "string"
                },
                "permissions": {
                    "$ref": "#/definitions/Permissions"
                },
                "extensionData": {
                    "type": "object",
                    "additionalProperties": {}
                }
            }
        },
        "EntityDetailsRequest": {
            "type": "object",
            "required": ["fields", "relations", "excludePermissions"],
            "properties": {
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "relations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "excludePermissions": {
                    "type": "boolean"
                }
            }
        },
        "EntitiesByIdsRequest": {
            "type": "object",
            "required": [
                "fields",
                "relations",
                "dataFilters",
                "limit",
                "offset",
                "sortStrategy",
                "excludePermissions",
                "ids"
            ],
            "properties": {
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "relations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dataFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FilterRequest"
                    }
                },
                "limit": {
                    "type": "integer",
                    "format": "int32"
                },
                "offset": {
                    "type": "integer",
                    "format": "int32"
                },
                "sortBy": {
                    "type": "string"
                },
                "sortStrategy": {
                    "$ref": "#/definitions/EntitySortStrategy"
                },
                "excludePermissions": {
                    "type": "boolean"
                },
                "ids": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "CountResponse": {
            "type": "object",
            "required": ["totalCount"],
            "properties": {
                "totalCount": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "CountRequest": {
            "type": "object",
            "required": ["dataFilters"],
            "properties": {
                "dataFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FilterRequest"
                    }
                }
            }
        },
        "RelatedEntitiesRequest": {
            "type": "object",
            "required": [
                "fields",
                "relations",
                "dataFilters",
                "limit",
                "offset",
                "sortStrategy",
                "excludePermissions"
            ],
            "properties": {
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "relations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dataFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FilterRequest"
                    }
                },
                "limit": {
                    "type": "integer",
                    "format": "int32"
                },
                "offset": {
                    "type": "integer",
                    "format": "int32"
                },
                "sortBy": {
                    "type": "string"
                },
                "sortStrategy": {
                    "$ref": "#/definitions/EntitySortStrategy"
                },
                "excludePermissions": {
                    "type": "boolean"
                }
            }
        },
        "GroupedRelationsRequest": {
            "type": "object",
            "required": [
                "fields",
                "relations",
                "dataFilters",
                "limit",
                "offset",
                "sortStrategy",
                "excludePermissions",
                "groupBy"
            ],
            "properties": {
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "relations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dataFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FilterRequest"
                    }
                },
                "limit": {
                    "type": "integer",
                    "format": "int32"
                },
                "offset": {
                    "type": "integer",
                    "format": "int32"
                },
                "sortBy": {
                    "type": "string"
                },
                "sortStrategy": {
                    "$ref": "#/definitions/EntitySortStrategy"
                },
                "excludePermissions": {
                    "type": "boolean"
                },
                "groupBy": {
                    "type": "string",
                    "minLength": 1
                },
                "groupName": {
                    "type": "string"
                }
            }
        },
        "AvatarsResponse": {
            "type": "object",
            "required": ["resourceEntities"],
            "properties": {
                "resourceEntities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceEntity"
                    }
                }
            }
        },
        "ResourceEntity": {
            "type": "object",
            "properties": {
                "internalId": {
                    "type": "string"
                },
                "entityTypeApiName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "imageUrl": {
                    "type": "string"
                },
                "state": {}
            }
        },
        "AvatarsRequest": {
            "type": "object",
            "properties": {
                "fieldName": {
                    "type": "string"
                },
                "relation": {
                    "$ref": "#/definitions/Relation"
                },
                "dataFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FilterRequest"
                    }
                }
            }
        },
        "Relation": {
            "type": "object",
            "required": ["name"],
            "properties": {
                "name": {
                    "type": "string"
                },
                "filteredEntityType": {
                    "type": "string"
                }
            }
        },
        "PicklistData": {
            "type": "object",
            "properties": {
                "propertyName": {
                    "type": "string"
                },
                "dependsOnPicklist": {
                    "type": "string"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PicklistOptionData"
                    }
                }
            }
        },
        "PicklistOptionData": {
            "type": "object",
            "required": ["internalId"],
            "properties": {
                "internalId": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "color": {
                    "type": "string"
                },
                "imageUrl": {
                    "type": "string"
                }
            }
        },
        "ProblemDetails": {
            "type": "object",
            "additionalProperties": {},
            "required": ["extensions"],
            "properties": {
                "type": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "status": {
                    "type": "integer",
                    "format": "int32"
                },
                "detail": {
                    "type": "string"
                },
                "instance": {
                    "type": "string"
                },
                "extensions": {
                    "type": "object",
                    "additionalProperties": {}
                }
            }
        },
        "SwimlaneResponse": {
            "type": "object",
            "required": ["grandTotal", "swimlanes", "groupedEntitiesCount"],
            "properties": {
                "grandTotal": {
                    "type": "integer",
                    "format": "int32"
                },
                "swimlanes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SwimlaneData"
                    }
                },
                "groupedEntitiesCount": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SwimlaneGroupedEntitiesCount"
                    }
                }
            }
        },
        "SwimlaneData": {
            "type": "object",
            "properties": {
                "swimlaneValue": {
                    "$ref": "#/definitions/ResourceEntity"
                }
            }
        },
        "SwimlaneGroupedEntitiesCount": {
            "type": "object",
            "required": ["groupName", "totalRecords"],
            "properties": {
                "groupName": {
                    "type": "string"
                },
                "totalRecords": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "CustomPanel": {
            "type": "object",
            "required": ["id", "apiName", "name", "description", "isUrl", "url", "order"],
            "properties": {
                "id": {
                    "type": "string"
                },
                "apiName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "isUrl": {
                    "type": "boolean"
                },
                "url": {
                    "type": "string"
                },
                "order": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "MetadataRequest": {
            "type": "object",
            "required": ["entityType", "propertyNames"],
            "properties": {
                "entityType": {
                    "type": "string",
                    "minLength": 1
                },
                "propertyNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "FieldsResponse": {
            "type": "object",
            "required": [
                "isCalculated",
                "isCreateOnly",
                "isCustom",
                "isFilterable",
                "isManuallySet",
                "isNullable",
                "isSortable",
                "isUpdateable",
                "isVisible",
                "isFinancial",
                "isSpecialCustomRelation"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "tooltip": {
                    "type": "string"
                },
                "presentationType": {
                    "type": "string"
                },
                "manuallySetFieldName": {
                    "type": "string"
                },
                "isCalculated": {
                    "type": "boolean"
                },
                "isCreateOnly": {
                    "type": "boolean"
                },
                "isCustom": {
                    "type": "boolean"
                },
                "isFilterable": {
                    "type": "boolean"
                },
                "isManuallySet": {
                    "type": "boolean"
                },
                "isNullable": {
                    "type": "boolean"
                },
                "isSortable": {
                    "type": "boolean"
                },
                "isUpdateable": {
                    "type": "boolean"
                },
                "isVisible": {
                    "type": "boolean"
                },
                "isFinancial": {
                    "type": "boolean"
                },
                "decimalPlaces": {
                    "type": "integer",
                    "format": "int32"
                },
                "referenceTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ReferenceType"
                    }
                },
                "isSpecialCustomRelation": {
                    "type": "boolean"
                }
            }
        },
        "ReferenceType": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "displayField": {
                    "type": "string"
                }
            }
        },
        "MetadataEntitiesRequest": {
            "type": "object",
            "required": [
                "entityType",
                "propertyNames",
                "relationNames",
                "includeFields",
                "includeRelations"
            ],
            "properties": {
                "entityType": {
                    "type": "string",
                    "minLength": 1
                },
                "propertyNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "relationNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "includeFields": {
                    "type": "boolean"
                },
                "includeRelations": {
                    "type": "boolean"
                }
            }
        },
        "SystemSettingsResponse": {
            "type": "object",
            "properties": {
                "numericFormat": {
                    "type": "string"
                },
                "shortDateFormat": {
                    "type": "string"
                },
                "showEffortRelatedTimeInHours": {
                    "type": "boolean"
                },
                "onlyAdminsCanCreateGridViews": {
                    "type": "boolean"
                },
                "enableSupportOfMultiCurrency": {
                    "type": "boolean"
                }
            }
        },
        "OrganizationSettingsResponse": {
            "type": "object",
            "required": ["currencies"],
            "properties": {
                "currencies": {
                    "$ref": "#/definitions/CurrenciesData"
                },
                "entityTypeFilterValues": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "entityTypes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/EntityTypeDetails"
                    }
                }
            }
        },
        "CurrenciesData": {
            "type": "object",
            "required": ["baseCurrency", "managedCurrencies"],
            "properties": {
                "baseCurrency": {
                    "$ref": "#/definitions/NameAndValue"
                },
                "managedCurrencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NameAndValue"
                    }
                }
            }
        },
        "NameAndValue": {
            "type": "object",
            "required": ["name", "value"],
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "EntityTypeDetails": {
            "type": "object",
            "properties": {
                "label": {
                    "type": "string"
                }
            }
        },
        "DescribeEntitiesResponse": {
            "type": "object",
            "properties": {
                "entityDescriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EntityDescriptionResponse"
                    }
                }
            }
        },
        "EntityDescriptionResponse": {
            "type": "object",
            "required": ["disabled"],
            "properties": {
                "typeName": {
                    "type": "string"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FieldsResponse"
                    }
                },
                "validStates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "label": {
                    "type": "string"
                },
                "labelPlural": {
                    "type": "string"
                },
                "parentEntity": {
                    "type": "string"
                },
                "displayField": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                }
            }
        },
        "DescribeEntitiesRequest": {
            "type": "object",
            "required": ["entityType"],
            "properties": {
                "entityType": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "AvailableFieldsRequest": {
            "type": "object",
            "required": ["entityType", "includeRelations"],
            "properties": {
                "entityType": {
                    "type": "string",
                    "minLength": 1
                },
                "includeRelations": {
                    "type": "boolean"
                }
            }
        },
        "RelationFieldsResponse": {
            "type": "object",
            "required": ["entityType", "fields"],
            "properties": {
                "entityType": {
                    "type": "string"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FieldsResponse"
                    }
                }
            }
        },
        "RelationFieldsRequest": {
            "type": "object",
            "required": ["entityType", "relationName"],
            "properties": {
                "entityType": {
                    "type": "string"
                },
                "relationName": {
                    "type": "string"
                }
            }
        },
        "PropertyCardLayoutResponse": {
            "type": "object",
            "required": ["dimension"],
            "properties": {
                "dimension": {
                    "type": "integer",
                    "format": "int32"
                },
                "sections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Section"
                    }
                }
            }
        },
        "Section": {
            "type": "object",
            "required": ["showPath", "order"],
            "properties": {
                "type": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "titleType": {
                    "type": "string"
                },
                "objectFieldName": {
                    "type": "string"
                },
                "access": {
                    "type": "string"
                },
                "showPath": {
                    "type": "boolean"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LayoutSectionField"
                    }
                },
                "order": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "LayoutSectionField": {
            "type": "object",
            "properties": {
                "column": {
                    "type": "integer",
                    "format": "int32"
                },
                "row": {
                    "type": "integer",
                    "format": "int32"
                },
                "wholeRow": {
                    "type": "boolean"
                },
                "locations": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "presentationType": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "isSortable": {
                    "type": "boolean"
                },
                "isFilterable": {
                    "type": "boolean"
                },
                "isNullable": {
                    "type": "boolean"
                },
                "isUpdateable": {
                    "type": "boolean"
                },
                "isCustom": {
                    "type": "boolean"
                },
                "isCreateOnly": {
                    "type": "boolean"
                },
                "isVisible": {
                    "type": "boolean"
                },
                "isCalculated": {
                    "type": "boolean"
                },
                "referenceTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ReferenceType"
                    }
                }
            }
        },
        "ProfilesResponse": {
            "type": "object",
            "required": ["profiles"],
            "properties": {
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Profile"
                    }
                }
            }
        },
        "Profile": {
            "type": "object",
            "properties": {
                "internalId": {
                    "type": "string"
                },
                "entityTypeApiName": {
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "imageUrl": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "AuthorizationGroupsResponse": {
            "type": "object",
            "required": ["authorizationGroups"],
            "properties": {
                "authorizationGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AuthorizationGroup"
                    }
                }
            }
        },
        "AuthorizationGroup": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "entityTypeApiName": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "imageUrl": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "RibbonActionsResponse": {
            "type": "object",
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IRibbonActionItem"
                    }
                }
            }
        },
        "IRibbonActionItem": {
            "type": "object",
            "required": ["enabled"],
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "childActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IRibbonActionItem"
                    }
                }
            }
        },
        "RibbonActionsRequest": {
            "type": "object",
            "required": ["ids", "ribbonType", "entityType"],
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ribbonType": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                },
                "mainEntityId": {
                    "type": "string"
                },
                "parentEntityId": {
                    "type": "string"
                },
                "queryName": {
                    "type": "string"
                },
                "relationName": {
                    "type": "string"
                }
            }
        },
        "ContextMenusResponse": {
            "type": "object",
            "required": ["menus"],
            "properties": {
                "menus": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContextMenu"
                    }
                }
            }
        },
        "ContextMenu": {
            "type": "object",
            "required": ["id", "name", "enabled"],
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "subMenus": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContextMenu"
                    }
                },
                "additionalData": {
                    "type": "boolean"
                }
            }
        },
        "ContextMenusRequest": {
            "type": "object",
            "required": ["selectedRelatedEntityId", "mainEntityId", "relationName"],
            "properties": {
                "selectedLinkId": {
                    "type": "string"
                },
                "selectedRelatedEntityId": {
                    "type": "string",
                    "minLength": 1
                },
                "mainEntityId": {
                    "type": "string",
                    "minLength": 1
                },
                "relationName": {
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "DataWarehouseCountRequest": {
            "type": "object",
            "required": ["rightBound"],
            "properties": {
                "leftBound": {
                    "type": "string",
                    "format": "date-time"
                },
                "rightBound": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "DataWarehouseEntitiesByIdsResponse": {
            "type": "object",
            "properties": {
                "entities": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {}
                    }
                }
            }
        },
        "DataWarehouseEntitiesByIdsRequest": {
            "type": "object",
            "required": ["ids", "fields"],
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "DataWarehouseGetIdsResponse": {
            "type": "object",
            "required": ["ids"],
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "DataWarehouseGetIdsRequest": {
            "type": "object",
            "required": ["rightBound"],
            "properties": {
                "leftBound": {
                    "type": "string",
                    "format": "date-time"
                },
                "rightBound": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "DataWarehouseEntityDetailsResponseOfBIConfiguration": {
            "type": "object",
            "required": ["entities"],
            "properties": {
                "entities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BIConfiguration"
                    }
                }
            }
        },
        "BIConfiguration": {
            "type": "object",
            "properties": {
                "configuration": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "running": {
                    "type": "boolean"
                },
                "runningPhase": {
                    "type": "string"
                },
                "runningEntity": {
                    "type": "string"
                },
                "runningPid": {
                    "type": "string"
                },
                "lastSyncData": {
                    "type": "string"
                },
                "lastSyncDate": {
                    "type": "string"
                },
                "accessToken": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "currentSyncDate": {
                    "type": "string"
                },
                "currentExportDate": {
                    "type": "string"
                }
            }
        },
        "ConfigurationRequest": {
            "type": "object",
            "required": ["typeName", "fields"],
            "properties": {
                "typeName": {
                    "type": "string",
                    "minLength": 1
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "UpdateConfigurationRequest": {
            "type": "object",
            "required": ["id"],
            "properties": {
                "id": {
                    "type": "string",
                    "minLength": 1
                },
                "configuration": {
                    "type": "string"
                },
                "running": {
                    "type": "boolean"
                },
                "runningPId": {
                    "type": "string"
                }
            }
        },
        "StorageConnectionResponse": {
            "type": "object",
            "required": ["isSuccess"],
            "properties": {
                "message": {
                    "type": "string"
                },
                "isSuccess": {
                    "type": "boolean"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "BlobConnectionRequest": {
            "type": "object",
            "required": ["blob_connection_string", "blob_connection_type"],
            "properties": {
                "blob_connection_string": {
                    "type": "string",
                    "minLength": 1
                },
                "blob_connection_type": {
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "VerifyConnectRequest": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "GetUsersResponse": {
            "type": "object",
            "required": ["tenantId", "users"],
            "properties": {
                "tenantId": {
                    "type": "string"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PlanviewAdminUser"
                    }
                }
            }
        },
        "PlanviewAdminUser": {
            "type": "object",
            "required": ["active"],
            "properties": {
                "userId": {
                    "type": "string"
                },
                "login": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "active": {
                    "type": "boolean"
                }
            }
        },
        "GetTenantResponse": {
            "type": "object",
            "required": ["region", "supports", "planviewIdActivated", "isSandbox"],
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "region": {
                    "$ref": "#/definitions/Region"
                },
                "supports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "planviewIdActivated": {
                    "type": "boolean"
                },
                "isSandbox": {
                    "type": "boolean"
                }
            }
        },
        "Region": {
            "type": "string",
            "description": "",
            "x-enumNames": ["US", "EU", "AP"],
            "enum": ["US", "EU", "AP"]
        },
        "RegisterTenantRequest": {
            "type": "object",
            "required": ["state"],
            "properties": {
                "state": {
                    "type": "boolean"
                }
            }
        },
        "GetTokenResponse": {
            "type": "object",
            "required": ["expiresAt"],
            "properties": {
                "idToken": {
                    "type": "string"
                },
                "expiresAt": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "CalculateSentimentResponse": {
            "type": "object",
            "required": ["objectId"],
            "properties": {
                "objectId": {
                    "type": "string"
                },
                "sentimentScore": {
                    "type": "number",
                    "format": "double"
                },
                "sentimentStatus": {
                    "$ref": "#/definitions/SentimentStatus"
                }
            }
        },
        "SentimentStatus": {
            "type": "string",
            "description": "",
            "x-enumNames": ["None", "Positive", "Neutral", "Negative"],
            "enum": ["None", "Positive", "Neutral", "Negative"]
        },
        "CalculateSentimentRequest": {
            "type": "object",
            "required": ["objectId", "fieldNames"],
            "properties": {
                "objectId": {
                    "type": "string",
                    "minLength": 1
                },
                "fieldNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "WhiteboardTokenResponse": {
            "type": "object",
            "required": ["idToken", "expiresAt"],
            "properties": {
                "idToken": {
                    "type": "string"
                },
                "expiresAt": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "IdentifierType": {
            "type": "string",
            "description": "",
            "x-enumNames": ["Entity"],
            "enum": ["Entity"]
        },
        "WorkloadEntitiesResponse": {
            "type": "object",
            "required": ["workloadEntities", "grandTotal", "limit", "offset", "hasMore"],
            "properties": {
                "workloadEntities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WorkloadEntity"
                    }
                },
                "grandTotal": {
                    "type": "integer",
                    "format": "int32"
                },
                "limit": {
                    "type": "integer",
                    "format": "int64"
                },
                "offset": {
                    "type": "integer",
                    "format": "int64"
                },
                "hasMore": {
                    "type": "boolean"
                }
            }
        },
        "WorkloadEntity": {
            "type": "object"
        },
        "ResourceWorkloadRequest": {
            "type": "object",
            "required": ["dataFilters", "workloadSettings", "limit", "offset", "sourceEntity"],
            "properties": {
                "dataFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FilterRequest"
                    }
                },
                "workloadSettings": {
                    "$ref": "#/definitions/WorkloadRequest"
                },
                "limit": {
                    "type": "integer",
                    "format": "int32"
                },
                "offset": {
                    "type": "integer",
                    "format": "int32"
                },
                "sourceEntity": {
                    "$ref": "#/definitions/SourceEntity"
                }
            }
        },
        "WorkloadRequest": {
            "type": "object",
            "required": [
                "loadBaseType",
                "measureType",
                "slicePeriodType",
                "slicesAmount",
                "sliceStartDate",
                "aggregationTypes"
            ],
            "properties": {
                "loadBaseType": {
                    "$ref": "#/definitions/LoadBase"
                },
                "measureType": {
                    "$ref": "#/definitions/MeasureType"
                },
                "slicePeriodType": {
                    "$ref": "#/definitions/SlicePeriodType"
                },
                "slicesAmount": {
                    "type": "integer"
                },
                "sliceStartDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "aggregationTypes": {
                    "$ref": "#/definitions/ResourceManagementAggregationTypes"
                }
            }
        },
        "LoadBase": {
            "type": "string",
            "description": "",
            "x-enumNames": ["ProjectAssignment", "TaskAssignment"],
            "enum": ["ProjectAssignment", "TaskAssignment"]
        },
        "MeasureType": {
            "type": "string",
            "description": "",
            "x-enumNames": ["Hours", "Units", "FTE", "PersonDays"],
            "enum": ["Hours", "Units", "FTE", "PersonDays"]
        },
        "SlicePeriodType": {
            "type": "string",
            "description": "",
            "x-enumNames": ["Day", "Week", "Month", "Quarter", "Year"],
            "enum": ["Day", "Week", "Month", "Quarter", "Year"]
        },
        "ResourceManagementAggregationTypes": {
            "type": "string",
            "description": "",
            "x-enumFlags": true,
            "x-enumNames": [
                "None",
                "RootObjectLevel",
                "ProjectLevel",
                "ProjectLevelDetailed",
                "UseCapacity",
                "UseProjectPool",
                "UseCurrentPeriodActualAndPlanned",
                "UseProjectsWithNoTaskAssignment"
            ],
            "enum": [
                "None",
                "RootObjectLevel",
                "ProjectLevel",
                "ProjectLevelDetailed",
                "UseCapacity",
                "UseProjectPool",
                "UseCurrentPeriodActualAndPlanned",
                "UseProjectsWithNoTaskAssignment"
            ]
        },
        "SourceEntity": {
            "type": "object",
            "required": ["entityKeys", "entityType"],
            "properties": {
                "entityKeys": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/EntityKey"
                    }
                },
                "entityType": {
                    "type": "string"
                }
            }
        },
        "EntityKey": {
            "type": "object",
            "required": ["entityId"],
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "businessUnitId": {
                    "type": "string"
                }
            }
        },
        "EntityWorkloadRequest": {
            "type": "object",
            "required": ["dataFilters", "workloadSettings", "limit", "offset", "resourceEntityKey"],
            "properties": {
                "dataFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FilterRequest"
                    }
                },
                "workloadSettings": {
                    "$ref": "#/definitions/WorkloadRequest"
                },
                "limit": {
                    "type": "integer",
                    "format": "int32"
                },
                "offset": {
                    "type": "integer",
                    "format": "int32"
                },
                "resourceEntityKey": {
                    "$ref": "#/definitions/EntityKey"
                }
            }
        },
        "GetReportableWorkItemsResponse": {
            "type": "object",
            "required": ["reportableWorkItems"],
            "properties": {
                "reportableWorkItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ReportableWorkItem"
                    }
                }
            }
        },
        "ReportableWorkItem": {
            "type": "object"
        },
        "GetReportableWorkItemsRequest": {
            "type": "object",
            "required": ["startDate", "dueDate", "fields", "excludeCrossBUResources"],
            "properties": {
                "startDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "dueDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "excludeCrossBUResources": {
                    "type": "boolean"
                }
            }
        },
        "GetReportableTasksByIdsResponse": {
            "type": "object",
            "required": ["reportableTasks"],
            "properties": {
                "reportableTasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ReportableTask"
                    }
                }
            }
        },
        "ReportableTask": {
            "type": "object"
        },
        "GetReportableTasksByIdsRequest": {
            "type": "object",
            "required": ["identifiers", "fields"],
            "properties": {
                "identifiers": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "GetAssignmentsPerUsersResponse": {
            "type": "object",
            "required": ["workItems", "assignedWork"],
            "properties": {
                "workItems": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {}
                    }
                },
                "assignedWork": {
                    "$ref": "#/definitions/AssignedWork"
                }
            }
        },
        "AssignedWork": {
            "type": "object",
            "required": ["workByDay", "rlTimePhaseDaily"],
            "properties": {
                "workByDay": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WorkByDayAssignment"
                    }
                },
                "rlTimePhaseDaily": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RlTimePhaseDailyAssignment"
                    }
                }
            }
        },
        "WorkByDayAssignment": {
            "type": "object",
            "required": [
                "work",
                "date",
                "durationInDaysInt",
                "workItemId",
                "resourceId",
                "id",
                "resourceLinkId"
            ],
            "properties": {
                "work": {
                    "$ref": "#/definitions/WorkUnit"
                },
                "date": {
                    "type": "string",
                    "format": "date-time"
                },
                "durationInDaysInt": {
                    "type": "integer",
                    "format": "int32"
                },
                "workItemId": {
                    "type": "string"
                },
                "resourceId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "resourceLinkId": {
                    "type": "string"
                }
            }
        },
        "WorkUnit": {
            "type": "object",
            "required": ["unit", "value"],
            "properties": {
                "unit": {
                    "type": "string"
                },
                "value": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "RlTimePhaseDailyAssignment": {
            "type": "object",
            "required": ["work", "date", "durationInDaysInt", "workItemId", "resourceId", "ids"],
            "properties": {
                "work": {
                    "$ref": "#/definitions/WorkUnit"
                },
                "date": {
                    "type": "string",
                    "format": "date-time"
                },
                "durationInDaysInt": {
                    "type": "integer",
                    "format": "int32"
                },
                "workItemId": {
                    "type": "string"
                },
                "resourceId": {
                    "type": "string"
                },
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "GetAssignmentsPerUsersRequest": {
            "type": "object",
            "required": ["startDate", "dueDate", "resourceIds", "fields", "workItemType"],
            "properties": {
                "startDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "dueDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "resourceIds": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "workItemType": {
                    "type": "string",
                    "minLength": 1
                },
                "optionalFilter": {
                    "$ref": "#/definitions/GetAssignmentsPerUsersRequestFilter"
                }
            }
        },
        "GetAssignmentsPerUsersRequestFilter": {
            "type": "object",
            "properties": {
                "workItemIsManagedByMiddleware": {
                    "type": "string",
                    "minLength": 1
                },
                "resourceLinkState": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                },
                "workItemIsStaffingPlan": {
                    "type": "string",
                    "minLength": 1
                },
                "workItemProjectIsStaffingPlan": {
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "GetUsersWorkingHoursResponse": {
            "type": "object",
            "required": ["usersWorkingHours", "calendarExceptions"],
            "properties": {
                "usersWorkingHours": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserWorkingHours"
                    }
                },
                "calendarExceptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UsersWorkingHoursCalendarExcept"
                    }
                }
            }
        },
        "UserWorkingHours": {
            "type": "object",
            "required": ["id", "resourceId", "date", "workingHours", "capacity"],
            "properties": {
                "id": {
                    "type": "string"
                },
                "resourceId": {
                    "type": "string"
                },
                "date": {
                    "type": "string",
                    "format": "date-time"
                },
                "workingHours": {
                    "$ref": "#/definitions/WorkUnit"
                },
                "capacity": {
                    "$ref": "#/definitions/WorkUnit"
                },
                "calendarExceptionId": {
                    "type": "string"
                }
            }
        },
        "UsersWorkingHoursCalendarExcept": {
            "type": "object",
            "required": [
                "id",
                "name",
                "resourceId",
                "workingDay",
                "startDate",
                "endDate",
                "exceptionType"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "resourceId": {
                    "type": "string"
                },
                "workingDay": {
                    "type": "boolean"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "exceptionType": {
                    "$ref": "#/definitions/UsersWorkingHoursExceptionType"
                }
            }
        },
        "UsersWorkingHoursExceptionType": {
            "type": "object",
            "required": ["id", "name"],
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "GetUsersWorkingHoursRequest": {
            "type": "object",
            "required": ["startDate", "dueDate", "resourceIds"],
            "properties": {
                "startDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "dueDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "resourceIds": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "GetGroupMembershipLinksResponse": {
            "type": "object",
            "required": ["groupMembershipLinks"],
            "properties": {
                "groupMembershipLinks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GroupMembershipLink"
                    }
                }
            }
        },
        "GroupMembershipLink": {
            "type": "object",
            "required": ["id", "member", "container"],
            "properties": {
                "id": {
                    "type": "string"
                },
                "member": {
                    "$ref": "#/definitions/ObjectInfo"
                },
                "container": {
                    "$ref": "#/definitions/ObjectInfo"
                }
            }
        },
        "ObjectInfo": {
            "type": "object",
            "required": ["id", "name"],
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "GetGroupMembershipLinksRequest": {
            "type": "object",
            "required": ["resourceManagerId"],
            "properties": {
                "resourceManagerId": {
                    "type": "string",
                    "minLength": 1
                },
                "directManagerId": {
                    "type": "string"
                }
            }
        },
        "GetResourceProjectsResponse": {
            "type": "object",
            "required": ["projects"],
            "properties": {
                "projects": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {}
                    }
                }
            }
        },
        "GetResourceProjectsRequest": {
            "type": "object",
            "required": ["resourceId", "fields"],
            "properties": {
                "resourceId": {
                    "type": "string",
                    "minLength": 1
                },
                "fields": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                },
                "optionalFilter": {
                    "$ref": "#/definitions/GetResourceProjectsRequestFilter"
                }
            }
        },
        "GetResourceProjectsRequestFilter": {
            "type": "object",
            "properties": {
                "wiIsStaffingPlan": {
                    "type": "string",
                    "minLength": 1
                }
            }
        }
    },
    "securityDefinitions": {
        "JWT Token": {
            "type": "apiKey",
            "description": "JWT Authorization header using the Bearer scheme. \n                                                Enter 'Bearer' [space] and then your token in the text input below. {Environment.NewLine}\n                                                Example: 'Bearer 12345abcdef'",
            "name": "Authorization",
            "in": "header"
        }
    }
}
